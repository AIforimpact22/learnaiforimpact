{
  "level": "Intermediate–Advanced",
  "rating": 4.9,
  "category": "Artificial Intelligence",
  "sections": [
    {
      "order": 1,
      "title": "Module 1: Ice Breaker for Coding",
      "lessons": [
        {
          "kind": "article",
          "order": 1,
          "title": "Preface",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Course Preface • Advanced ML</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* {\r\n  box-sizing: border-box;\r\n  word-wrap: break-word;\r\n  overflow-wrap: break-word;\r\n}\r\nbody {\r\n  font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;\r\n  color: #555555;\r\n  margin: 0;\r\n  background: #ffffff;\r\n}\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB;\r\n  border-radius: 14px;\r\n  overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04);\r\n  margin-bottom: 24px;\r\n  background: #ffffff;\r\n}\r\n\r\n/* === Banner / header (grey background → white text) === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; /* enforce white over grey */\r\n  padding: 18px 20px;\r\n}\r\n.section-card .banner small {\r\n  font-size: 12px;\r\n  letter-spacing: .08em;\r\n  opacity: .9;\r\n  text-transform: uppercase;\r\n  color: #FFFFFF; /* white on grey */\r\n}\r\n.section-card .banner h1 {\r\n  margin: 6px 0 4px;\r\n  font-size: 26px;\r\n  line-height: 1.2;\r\n  color: #FFFFFF; /* white on grey */\r\n}\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; /* white on grey */ }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555555; }\r\n\r\n/* === Blockquote (grey box → white text) === */\r\n.section-card blockquote {\r\n  border-left: 4px solid #FFFFFF; /* white accent on grey */\r\n  margin: 18px 0;\r\n  padding: 8px 14px;\r\n  background: #5f5f5f; /* darker grey for contrast */\r\n  border-radius: 6px;\r\n  color: #FFFFFF; /* white on grey */\r\n}\r\n\r\n/* === Two-column quick facts === */\r\n.quick-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\r\n  gap: 14px;\r\n  margin: 18px 0;\r\n}\r\n.quick-grid .box {\r\n  border: 1px solid #EBEBEB;\r\n  border-radius: 10px;\r\n  padding: 14px;\r\n  background: #ffffff; /* stays white (dark text) */\r\n  color: #555555;\r\n}\r\n.quick-grid .box > div { font-weight: 700; margin-bottom: 6px; color: #000000; }\r\n.quick-grid ul { margin: 8px 0 0 18px; color: #555555; }\r\n\r\n/* === Roadmap pills (grey pills → white text) === */\r\n.roadmap-label { margin: 16px 0 6px; font-weight: 700; color: #000000; }\r\n.roadmap {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 8px;\r\n}\r\n.roadmap span {\r\n  padding: 6px 10px;\r\n  border: 1px solid #555555;\r\n  border-radius: 999px;\r\n  background: #5f5f5f;  /* grey */\r\n  color: #FFFFFF;       /* white on grey */\r\n  font-size: 14px;\r\n}\r\n\r\n/* === Call-to-action buttons === */\r\n.cta-row {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-top: 18px;\r\n  flex-wrap: wrap;\r\n}\r\n.cta-row a {\r\n  text-decoration: none;\r\n  padding: 10px 16px;\r\n  border-radius: 8px;\r\n  font-weight: 700;\r\n}\r\n.cta-primary {\r\n  border: 1px solid #000000;\r\n  background: #000000;\r\n  color: #EBEBEB;\r\n}\r\n.cta-secondary {\r\n  border: 1px solid #000000;\r\n  color: #000000;\r\n  background: #ffffff;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n    <section class=\"section-card\">\r\n      <!-- Banner -->\r\n      <div class=\"banner\">\r\n        <small>Preface</small>\r\n        <h1>Bridging Research, Industry, and Real-World AI</h1>\r\n        <p>Advanced Machine Learning & Real-Time Deployment</p>\r\n      </div>\r\n\r\n      <!-- Body -->\r\n      <div class=\"body\">\r\n        <p>\r\n          Welcome to the <strong>Advanced Machine Learning and Real-Time Deployment</strong> course—an immersive program informed by years of hands-on work across academia and industry. \r\n          This course bridges the gap between theoretical foundations and <em>production-grade</em> AI systems.\r\n        </p>\r\n\r\n        <p>\r\n          Having navigated both <strong>research</strong> and <strong>applied engineering</strong>, I understand the practical challenges of turning ideas into\r\n          dependable, scalable solutions. This program helps you avoid common pitfalls, adopt best practices, and accelerate your ability to deploy AI that\r\n          impacts real users and real businesses.\r\n        </p>\r\n\r\n        <blockquote>\r\n          <strong>Your next step toward impactful innovation begins here.</strong>\r\n        </blockquote>\r\n\r\n        <!-- Two-column quick facts -->\r\n        <div class=\"quick-grid\">\r\n          <div class=\"box\">\r\n            <div>What you’ll master</div>\r\n            <ul>\r\n              <li>Production-ready coding patterns & modularity</li>\r\n              <li>Advanced SQL & data modeling for ML</li>\r\n              <li>Statistics that matter in practice</li>\r\n              <li>Unsupervised & supervised ML workflows</li>\r\n              <li>Real-time inference & deployment</li>\r\n              <li>Integrating AI APIs with cloud & databases</li>\r\n            </ul>\r\n          </div>\r\n          <div class=\"box\">\r\n            <div>Who this is for</div>\r\n            <ul>\r\n              <li>Engineers & analysts moving into applied ML</li>\r\n              <li>Researchers shipping real-world prototypes</li>\r\n              <li>Builders who value robust, maintainable systems</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Week roadmap pills -->\r\n        <div class=\"roadmap-label\">Roadmap (9 Weeks)</div>\r\n        <div class=\"roadmap\">\r\n          <span>Week 1: Ice Breaker for Coding</span>\r\n          <span>Week 2: UI & UX</span>\r\n          <span>Week 3: Modularity</span>\r\n          <span>Week 4: Advanced SQL</span>\r\n          <span>Week 5: Stats for ML</span>\r\n          <span>Week 6: Unsupervised ML</span>\r\n          <span>Week 7: Supervised ML</span>\r\n          <span>Week 8: Utilizing AI API</span>\r\n          <span>Week 9: Capstone</span>\r\n        </div>\r\n\r\n        <!-- CTA row -->\r\n        <div class=\"cta-row\">\r\n          <a href=\"/learn/1\" class=\"cta-primary\">Start Learning</a>\r\n          <a href=\"#syllabus\" class=\"cta-secondary\">View Syllabus</a>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "7b62065b-bdb9-4e0f-bc05-e9cb622cbabc"
        },
        {
          "kind": "article",
          "order": 2,
          "title": "Profile of the Tutor: Hawkar Abdulhaq",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Hawkar • Profile</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* {\r\n  box-sizing: border-box;\r\n  word-wrap: break-word;\r\n  overflow-wrap: break-word;\r\n}\r\nbody {\r\n  font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;\r\n  color: #555555;\r\n  margin: 0;\r\n  background: #ffffff;\r\n}\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB;\r\n  border-radius: 14px;\r\n  overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04);\r\n  margin-bottom: 24px;\r\n  background: #ffffff;\r\n}\r\n\r\n/* === Banner / header (grey background → white text) === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; /* enforce white over grey */\r\n  padding: 18px 20px;\r\n}\r\n.section-card .banner small {\r\n  font-size: 12px;\r\n  letter-spacing: .08em;\r\n  opacity: .9;\r\n  text-transform: uppercase;\r\n  color: #FFFFFF; /* white on grey */\r\n}\r\n.section-card .banner h1 {\r\n  margin: 6px 0 4px;\r\n  font-size: 26px;\r\n  line-height: 1.2;\r\n  color: #FFFFFF; /* white on grey */\r\n}\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; /* white on grey */ }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555555; }\r\n\r\n/* === Blockquote (grey box → white text) === */\r\n.section-card blockquote {\r\n  border-left: 4px solid #FFFFFF; /* white accent on grey */\r\n  margin: 18px 0;\r\n  padding: 8px 14px;\r\n  background: #5f5f5f; /* darker grey for contrast */\r\n  border-radius: 6px;\r\n  color: #FFFFFF; /* white on grey */\r\n}\r\n\r\n/* === Two-column facts / feature boxes === */\r\n.quick-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\r\n  gap: 14px;\r\n  margin: 18px 0;\r\n}\r\n.quick-grid .box {\r\n  border: 1px solid #EBEBEB;\r\n  border-radius: 10px;\r\n  padding: 14px;\r\n  background: #ffffff;\r\n  color: #555555;\r\n}\r\n.quick-grid .box > div { font-weight: 700; margin-bottom: 6px; color: #000000; }\r\n.quick-grid ul { margin: 8px 0 0 18px; color: #555555; }\r\n\r\n/* === Roadmap pills (grey pills → white text) === */\r\n.roadmap-label { margin: 16px 0 6px; font-weight: 700; color: #000000; }\r\n.roadmap {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 8px;\r\n}\r\n.roadmap span {\r\n  padding: 6px 10px;\r\n  border: 1px solid #555555;\r\n  border-radius: 999px;\r\n  background: #5f5f5f;  /* grey */\r\n  color: #FFFFFF;       /* white on grey */\r\n  font-size: 14px;\r\n}\r\n\r\n/* === Call-to-action buttons === */\r\n.cta-row {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-top: 18px;\r\n  flex-wrap: wrap;\r\n}\r\n.cta-row a {\r\n  text-decoration: none;\r\n  padding: 10px 16px;\r\n  border-radius: 8px;\r\n  font-weight: 700;\r\n}\r\n.cta-primary {\r\n  border: 1px solid #000000;\r\n  background: #000000;\r\n  color: #EBEBEB;\r\n}\r\n.cta-secondary {\r\n  border: 1px solid #000000;\r\n  color: #000000;\r\n  background: #ffffff;\r\n}\r\n\r\n/* === Media row (photo + text) === */\r\n.media-row {\r\n  display: flex;\r\n  gap: 18px;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n}\r\n.media-row img {\r\n  width: 120px; height: 120px; border-radius: 999px; object-fit: cover;\r\n  border: 1px solid #EBEBEB;\r\n}\r\n.media-row .text { min-width: 240px; flex: 1; }\r\n.media-row .subtitle { margin: 4px 0 0; color: #6b6b6b; }\r\n\r\n/* === Publication summaries === */\r\n.pub-list { display: grid; gap: 14px; margin-top: 8px; }\r\n.pub {\r\n  border: 1px solid #EBEBEB;\r\n  border-radius: 10px;\r\n  padding: 14px;\r\n  background: #ffffff;\r\n}\r\n.pub h3 { margin: 0 0 6px; font-size: 18px; color: #131722; }\r\n.pub .meta { font-size: 14px; color: #6b6b6b; margin-bottom: 8px; }\r\n.pub p { margin: 0; }\r\n\r\n/* === Footer === */\r\n.footer-note {\r\n  font-size: 13px; color: #777;\r\n  display: flex; justify-content: space-between; gap: 10px; flex-wrap: wrap;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- HERO / PROFILE -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Profile</small>\r\n        <h1>Hawkar</h1>\r\n        <p>PhD Candidate (Earth Sciences) — Geothermal & UTES • Groundwater Modeling • GeoScience Python</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"media-row\">\r\n          <img alt=\"Profile photo of Hawkar\" src=\"https://i.imgur.com/jC22kaM.jpeg\" />\r\n          <div class=\"text\">\r\n            <p class=\"subtitle\"><strong>Place & Date of Birth:</strong> Erbil, Iraq, 1987</p>\r\n            <p class=\"subtitle\"><strong>Current Program:</strong> PhD Candidate (Earth Sciences), University of Szeged <em>(2021–Present)</em></p>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"roadmap-label\">Core Coding Stack</div>\r\n        <div class=\"roadmap\">\r\n          <span>Python</span>\r\n          <span>SQL</span>\r\n          <span>HTML</span>\r\n          <span>Server Deployment</span>\r\n        </div>\r\n\r\n        <div class=\"cta-row\">\r\n          <a class=\"cta-primary\" href=\"https://scholar.google.com/citations?hl=en&user=aaBj5v8AAAAJ&view_op=list_works&sortby=pubdate\" target=\"_blank\" rel=\"noopener\">Google Scholar</a>\r\n          <a class=\"cta-secondary\" href=\"#\" aria-disabled=\"true\">Download CV</a>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- ENGINEERING & CODING FOCUS -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Engineering</small>\r\n        <h1>Big-Data Acceleration & Production-Ready Pipelines</h1>\r\n        <p>Prioritizing clean code, robust data engineering, and performance for geoscience scale</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          I design and ship <strong>data engineering pipelines</strong> that shrink processing time for large geoscience datasets\r\n          (well logs, reservoir models, climate series). My focus is on modular code, reliable storage interfaces,\r\n          and deployment-ready services that convert complex subsurface data into <em>fast, trustable</em> results.\r\n        </p>\r\n\r\n        <div class=\"quick-grid\">\r\n          <div class=\"box\">\r\n            <div>What I Build</div>\r\n            <ul>\r\n              <li>ETL/ELT pipelines for well logs & UTES datasets</li>\r\n              <li>Fast preprocessors for modeling & ML workflows</li>\r\n              <li>Batch + near-real-time data services</li>\r\n              <li>Clean APIs & lightweight UIs for results</li>\r\n            </ul>\r\n          </div>\r\n          <div class=\"box\">\r\n            <div>How I Code</div>\r\n            <ul>\r\n              <li>Modular Python packages & clear interfaces</li>\r\n              <li>SQL-first data modeling for scale</li>\r\n              <li>Deterministic jobs with logging & retries</li>\r\n              <li>Deployable services (server setups & configs)</li>\r\n            </ul>\r\n          </div>\r\n          <div class=\"box\">\r\n            <div>Where It Helps</div>\r\n            <ul>\r\n              <li>UTES site screening & thermal performance</li>\r\n              <li>Groundwater & basin modeling pipelines</li>\r\n              <li>Climate & erosion analysis at scale</li>\r\n              <li>Geostatistics for mapping & decisions</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"roadmap-label\">Coding Priorities</div>\r\n        <div class=\"roadmap\">\r\n          <span>Performance</span>\r\n          <span>Modularity</span>\r\n          <span>Data Integrity</span>\r\n          <span>Reproducibility</span>\r\n          <span>Maintainability</span>\r\n          <span>Deployability</span>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- RESEARCH HIGHLIGHTS (DESCRIPTIVE) -->\r\n    <section class=\"section-card\" id=\"research\">\r\n      <div class=\"banner\">\r\n        <small>Research</small>\r\n        <h1>Selected Research — Descriptive Highlights</h1>\r\n        <p>Condensed narratives of recent publications (coding impact emphasized)</p>\r\n      </div>\r\n      <div class=\"body\">\r\n\r\n        <div class=\"pub-list\">\r\n          <article class=\"pub\">\r\n            <h3>Harnessing geothermal energy in Hungary (2026)</h3>\r\n            <div class=\"meta\">Geological Society, London, Special Publications 555 (1), SP555-2024-22 • Cited by: 7 • Authors: Szanyi, Kovács, <strong>Abdulhaq</strong></div>\r\n            <p>\r\n              Developed a reproducible data pipeline to unify geothermal datasets across regions and stratigraphic units,\r\n              enabling consistent analysis for national-scale assessment. The coding emphasis was on modular ingestion and\r\n              queryable outputs for decision support.\r\n            </p>\r\n          </article>\r\n\r\n          <article class=\"pub\">\r\n            <h3>New structural findings in Bijeel-Aqra, Kurdistan (2025)</h3>\r\n            <div class=\"meta\">Journal of African Earth Sciences 230, 105729 • Cited by: 1 • Authors: Sissakian, Ghafur, Sherwani, <strong>Abdulhaq</strong>, Omer</div>\r\n            <p>\r\n              Built SQL-driven mapping layers and Python utilities to integrate structural observations with hydrocarbon\r\n              maturation indicators. The workflow improved turnaround time from raw field data to interpretable structural\r\n              products for exploration.\r\n            </p>\r\n          </article>\r\n\r\n          <article class=\"pub\">\r\n            <h3>ML model for sand-channel prediction for UTES (2025)</h3>\r\n            <div class=\"meta\">Energies 18 (16), 4230 • Authors: <strong>Abdulhaq</strong>, Geiger, Vass, Tóth, Bozsó, Szanyi</div>\r\n            <p>\r\n              Engineered a well-log feature pipeline and evaluation harness that speeds up model iteration for\r\n              sand-channel detection. The codebase emphasized reusability, stratified validation, and\r\n              deployment-ready artifacts for UTES site selection.\r\n            </p>\r\n          </article>\r\n\r\n          <article class=\"pub\">\r\n            <h3>Soil types & erosion in Iraq — critical discussion (2025)</h3>\r\n            <div class=\"meta\">Iraqi Bulletin of Geology and Mining 21 (1), 343-364 • Authors: Sissakian, Othman, Obaid, <strong>Abdulhaq</strong></div>\r\n            <p>\r\n              Consolidated heterogeneous soil surveys and climate records into a clean analytical dataset.\r\n              Python + SQL routines reduced manual preprocessing and made comparative erosion analyses repeatable.\r\n            </p>\r\n          </article>\r\n\r\n          <article class=\"pub\">\r\n            <h3>Predicting thermal performance of ATES in depleted clastics (2025)</h3>\r\n            <div class=\"meta\">Energies 18 (10), 2642 • Cited by: 2 • Authors: <strong>Abdulhaq</strong>, Geiger, Vass, Tóth, Medgyes, Bozsó, Kóbor, …</div>\r\n            <p>\r\n              Implemented a scalable training pipeline for thermal response prediction with configuration-based runs.\r\n              Focus on dataset versioning, feature provenance, and efficient retraining for scenario testing.\r\n            </p>\r\n          </article>\r\n\r\n          <article class=\"pub\">\r\n            <h3>Transforming abandoned fields into heat-storage sites (2024)</h3>\r\n            <div class=\"meta\">Energies 17 (16), 3954 • Cited by: 7 • Authors: <strong>Abdulhaq</strong>, Geiger, Vass, Tóth, Medgyes, Szanyi</div>\r\n            <p>\r\n              Coded an enhanced MCDA-AHP workflow with geostatistical layers to rank storage candidates.\r\n              Emphasis on transparent, scriptable criteria and reproducible maps for stakeholders.\r\n            </p>\r\n          </article>\r\n\r\n          <article class=\"pub\">\r\n            <h3>Geothermal energy & critical metals — review (2023)</h3>\r\n            <div class=\"meta\">Energies 16 (20), 7168 • Cited by: 20 • Authors: Szanyi, Rybach, <strong>Abdulhaq</strong></div>\r\n            <p>\r\n              Assembled a curated literature dataset with standardized tags for rapid topic queries.\r\n              Lightweight Python tooling aided evidence synthesis across sub-disciplines.\r\n            </p>\r\n          </article>\r\n        </div>\r\n\r\n        <div class=\"cta-row\" style=\"margin-top:22px;\">\r\n          <a class=\"cta-primary\" href=\"https://scholar.google.com/citations?hl=en&user=aaBj5v8AAAAJ&view_op=list_works&sortby=pubdate\" target=\"_blank\" rel=\"noopener\">View All on Google Scholar</a>\r\n          <a class=\"cta-secondary\" href=\"#research\">Back to Research</a>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- EDUCATION -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Background</small>\r\n        <h1>Education</h1>\r\n        <p>Foundational training across geology, earth science engineering, and doctoral research</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"quick-grid\">\r\n          <div class=\"box\">\r\n            <div>PhD Candidate (Earth Sciences)</div>\r\n            University of Szeged — <em>2021–Present</em>\r\n          </div>\r\n          <div class=\"box\">\r\n            <div>MSc in Earth Science Engineering</div>\r\n            University of Miskolc, Hungary — <em>2017</em>\r\n          </div>\r\n          <div class=\"box\">\r\n            <div>BSc in Geology</div>\r\n            University of Salahadeen, Erbil — <em>2011</em>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- MENTORING PHILOSOPHY -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Teaching</small>\r\n        <h1>Mentoring Philosophy</h1>\r\n        <p>Committed to learner success and impact</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <blockquote>\r\n          “Whoever I mentor, I genuinely wish them great success, hoping they will achieve even greater success through this course.”\r\n        </blockquote>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- ABOUT -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>About</small>\r\n        <h1>Bio</h1>\r\n        <p>Academic rigor, industry practice, real-world outcomes</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          Hawkar combines rigorous academic training with hands-on industry experience, guiding learners to transform theoretical\r\n          knowledge into impactful, real-world AI and data-driven solutions across geoscience domains. Work spans geothermal energy\r\n          and underground thermal energy storage (UTES), groundwater modeling, climate analysis, geological mapping, and Python-based\r\n          analytics for subsurface datasets.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER NOTE -->\r\n    <div class=\"footer-note\">\r\n      <span>© <span id=\"y\"></span> Hawkar</span>\r\n      <span>Last updated <span id=\"d\"></span></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(undefined, {year:'numeric',month:'short',day:'2-digit'});\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "2c527984-5d29-406e-b627-e4329598bb0d"
        },
        {
          "kind": "article",
          "order": 3,
          "title": "Four Levels of Using Generative AI",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Four Levels of Using Generative AI</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555555; margin: 0; background: #ffffff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header (grey → white text) === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555555; }\r\n\r\n/* === Cover image === */\r\n.cover { display: block; width: 100%; height: auto; border-bottom: 1px solid #EBEBEB; }\r\n\r\n/* === Level grid === */\r\n.levels { display: grid; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr)); gap: 14px; margin-top: 12px; }\r\n.level { border: 1px solid #EBEBEB; border-radius: 12px; padding: 14px; background: #ffffff; }\r\n.level h2 { margin: 0 0 8px; font-size: 18px; color: #000000; }\r\n.level .kvs { display: grid; gap: 6px; margin-bottom: 10px; }\r\n.kv { display: grid; grid-template-columns: 120px 1fr; gap: 10px; }\r\n.kv .k { font-weight: 700; color: #000000; }\r\n.kv .v { color: #555555; }\r\n.level ul { margin: 8px 0 0 18px; }\r\n\r\n/* === Emphasis row (pills) === */\r\n.roadmap-label { margin: 16px 0 6px; font-weight: 700; color: #000000; }\r\n.roadmap { display: flex; flex-wrap: wrap; gap: 8px; }\r\n.roadmap span {\r\n  padding: 6px 10px; border: 1px solid #555555; border-radius: 999px;\r\n  background: #5f5f5f; color: #FFFFFF; font-size: 14px;\r\n}\r\n\r\n/* === Call-to-action buttons === */\r\n.cta-row { display: flex; gap: 10px; margin-top: 18px; flex-wrap: wrap; }\r\n.cta-row a { text-decoration: none; padding: 10px 16px; border-radius: 8px; font-weight: 700; }\r\n.cta-primary { border: 1px solid #000000; background: #000000; color: #EBEBEB; }\r\n.cta-secondary { border: 1px solid #000000; color: #000000; background: #ffffff; }\r\n\r\n/* === Mobile adjustments === */\r\n@media (max-width: 560px) { .kv { grid-template-columns: 1fr; } }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- HERO / COVER -->\r\n    <section class=\"section-card\" id=\"top\">\r\n      <div class=\"banner\">\r\n        <small>Framework</small>\r\n        <h1>Four Levels of Using Generative AI</h1>\r\n        <p>From quick advice to strategic, production-grade AI systems</p>\r\n      </div>\r\n      <img\r\n        class=\"cover\"\r\n        alt=\"Generative AI levels cover\"\r\n        src=\"https://raw.githubusercontent.com/AIforimpact22/portalaiforimpact/refs/heads/main/phhotos/levels.jpg\"\r\n        loading=\"eager\"\r\n      />\r\n      <div class=\"body\">\r\n        <p>\r\n          This practical framework explains how Generative AI can be applied at four maturity levels. As goals move from\r\n          quick answers to end-to-end systems, the role of AI shifts—from a conversational consultant to a strategic asset\r\n          embedded in products and research. This course emphasizes the top tiers so you can <strong>build</strong>,\r\n          <strong>deploy</strong>, and <strong>operate</strong> solutions that matter.\r\n        </p>\r\n        <div class=\"roadmap-label\">Course Focus</div>\r\n        <div class=\"roadmap\">\r\n          <span>Level 3 — Development Partner</span>\r\n          <span>Level 4 — Strategic Asset</span>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- LEVELS GRID -->\r\n    <section class=\"section-card\" id=\"levels\">\r\n      <div class=\"banner\">\r\n        <small>Levels</small>\r\n        <h1>The Four Levels</h1>\r\n        <p>Clear roles, purposes, output expectations, and real examples</p>\r\n      </div>\r\n      <div class=\"body\">\r\n\r\n        <div class=\"levels\">\r\n          <!-- Level 1 -->\r\n          <article class=\"level\" aria-labelledby=\"lvl1\">\r\n            <h2 id=\"lvl1\">1. AI as a Consultant</h2>\r\n            <div class=\"kvs\">\r\n              <div class=\"kv\"><div class=\"k\">Role of GenAI</div><div class=\"v\">Conversational Q&A for quick advice</div></div>\r\n              <div class=\"kv\"><div class=\"k\">Purpose</div><div class=\"v\">Speed up understanding; get suggestions fast</div></div>\r\n              <div class=\"kv\"><div class=\"k\">Output</div><div class=\"v\">May contain inaccuracies — <strong>human validation required</strong></div></div>\r\n            </div>\r\n            <div><strong>Examples</strong></div>\r\n            <ul>\r\n              <li>Ask ChatGPT to debug a Python error or Excel formula</li>\r\n              <li>Request résumé-writing tips</li>\r\n              <li>Get high-level business-strategy pointers</li>\r\n            </ul>\r\n          </article>\r\n\r\n          <!-- Level 2 -->\r\n          <article class=\"level\" aria-labelledby=\"lvl2\">\r\n            <h2 id=\"lvl2\">2. AI as a Content Creator</h2>\r\n            <div class=\"kvs\">\r\n              <div class=\"kv\"><div class=\"k\">Role of GenAI</div><div class=\"v\">Co-create text, images, video, or slides</div></div>\r\n              <div class=\"kv\"><div class=\"k\">Purpose</div><div class=\"v\">You set direction; AI drafts, polishes, and refines</div></div>\r\n              <div class=\"kv\"><div class=\"k\">Output</div><div class=\"v\">Aligned to your prompt and brand with review</div></div>\r\n            </div>\r\n            <div><strong>Examples</strong></div>\r\n            <ul>\r\n              <li>Generate illustrations with DALL·E or Midjourney from your concept sketch</li>\r\n              <li>Draft a blog post in ChatGPT, then edit for brand voice</li>\r\n              <li>Produce a video script outline with AI-suggested structure</li>\r\n            </ul>\r\n          </article>\r\n\r\n          <!-- Level 3 -->\r\n          <article class=\"level\" aria-labelledby=\"lvl3\">\r\n            <h2 id=\"lvl3\">3. AI as a Development Partner</h2>\r\n            <div class=\"kvs\">\r\n              <div class=\"kv\"><div class=\"k\">Role of GenAI</div><div class=\"v\">Python-driven data analysis, UI/UX, and real-time apps</div></div>\r\n              <div class=\"kv\"><div class=\"k\">Purpose</div><div class=\"v\">Accelerate developer workflows; scaffold scalable solutions</div></div>\r\n              <div class=\"kv\"><div class=\"k\">Output</div><div class=\"v\">Production-lean code with human architecture & reviews</div></div>\r\n            </div>\r\n            <div><strong>Examples</strong></div>\r\n            <ul>\r\n              <li>Use GenAI to generate Python functions for data cleaning & feature engineering</li>\r\n              <li>Build an interactive Streamlit dashboard that summarizes KPIs and suggests visual improvements</li>\r\n              <li>Auto-scaffold REST API endpoints with FastAPI to serve data insights</li>\r\n              <li>Get AI-guided UI mock-ups or CSS tweaks that enhance user experience</li>\r\n            </ul>\r\n          </article>\r\n\r\n          <!-- Level 4 -->\r\n          <article class=\"level\" aria-labelledby=\"lvl4\">\r\n            <h2 id=\"lvl4\">4. AI as a Strategic Asset</h2>\r\n            <div class=\"kvs\">\r\n              <div class=\"kv\"><div class=\"k\">Role of GenAI</div><div class=\"v\">ML deployment, predictive models, and deep integration</div></div>\r\n              <div class=\"kv\"><div class=\"k\">Purpose</div><div class=\"v\">Embed AI into products, operations, or research outputs</div></div>\r\n              <div class=\"kv\"><div class=\"k\">Output</div><div class=\"v\">End-to-end ML systems with monitoring & governance</div></div>\r\n            </div>\r\n            <div><strong>Examples</strong></div>\r\n            <ul>\r\n              <li>Deploy a GenAI-assisted sales-forecasting model with live monitoring</li>\r\n              <li>Integrate a recommendation engine into an e-commerce platform for personalized offers</li>\r\n              <li>Publish research using GenAI-driven climate or geothermal predictions</li>\r\n              <li>Build a chat-based analytics assistant over corporate data with a RAG pipeline</li>\r\n            </ul>\r\n          </article>\r\n        </div>\r\n\r\n        <div class=\"cta-row\">\r\n          <a href=\"#focus\" class=\"cta-primary\">Focus on Levels 3 & 4</a>\r\n          <a href=\"#top\" class=\"cta-secondary\">Back to Top</a>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- COURSE FOCUS CALLOUT -->\r\n    <section class=\"section-card\" id=\"focus\">\r\n      <div class=\"banner\">\r\n        <small>Course Focus</small>\r\n        <h1>Build • Deploy • Leverage</h1>\r\n        <p>Zeroing in on Levels 3 & 4 for real-world impact</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          Learn to elevate GenAI from an ideation aid to a <strong>development partner</strong> and ultimately a\r\n          <strong>strategic asset</strong>. We cover production-lean Python patterns, scalable data services, UI/UX scaffolding,\r\n          deployment playbooks, and monitoring that keeps models accountable in the wild.\r\n        </p>\r\n        <div class=\"roadmap-label\">What You’ll Practice</div>\r\n        <div class=\"roadmap\">\r\n          <span>Python & APIs</span>\r\n          <span>Data Engineering</span>\r\n          <span>RAG & Retrieval</span>\r\n          <span>Model Serving</span>\r\n          <span>Observability</span>\r\n          <span>UX for AI</span>\r\n        </div>\r\n        <div class=\"cta-row\">\r\n          <a href=\"/learn/1\" class=\"cta-primary\">Start Learning</a>\r\n          <a href=\"#top\" class=\"cta-secondary\">Back to Top</a>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n  </div>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "2ec3eea9-0e22-40f6-9df9-98eca9e37e37"
        },
        {
          "kind": "article",
          "order": 4,
          "title": "Adopting AI as a Lifestyle",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Adopting AI as a Lifestyle</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555555; margin: 0; background: #ffffff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555555; }\r\n\r\n/* === Quotes & References === */\r\nblockquote {\r\n  border-left: 4px solid #000000; margin: 18px 0; padding: 8px 14px;\r\n  background: #f5f5f5; border-radius: 6px; color: #333333;\r\n}\r\n.ref { font-size: 14px; color: #777777; margin-top: 6px; }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Lifestyle</small>\r\n        <h1>Adopting AI as a Lifestyle</h1>\r\n        <p>Integrating AI into your daily life boosts productivity—if done sustainably</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          Here are four science-backed strategies for integrating AI into your routine in ways that maximize productivity while keeping your energy sustainable.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- STEP 1 -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Step 1</small>\r\n        <h1>Block Out Distraction-Free Time</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>Silence notifications and dedicate sessions for uninterrupted <em>deep work</em>.</p>\r\n        <p><strong>Why?</strong> Research shows it takes <strong>23 minutes</strong> to refocus after interruptions (Mark, Gudith, & Klocke, 2008).</p>\r\n        <div class=\"ref\"><a href=\"https://ics.uci.edu/~gmark/chi08-mark.pdf\" target=\"_blank\">Mark et al., 2008</a></div>\r\n        <blockquote>\r\n          “Deep work is professional activity performed in a state of distraction-free concentration. It pushes your\r\n          cognitive capabilities to their limit, creating new value and improving your skills.”  \r\n          <span class=\"ref\"><a href=\"https://calnewport.com/writing/#books\" target=\"_blank\">Newport, 2016</a></span>\r\n        </blockquote>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- STEP 2 -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Step 2</small>\r\n        <h1>Break Tasks Into Manageable Steps</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>Use ChatGPT to break large AI projects into clear subtasks. Track progress in a checklist (like Google Sheets), marking items complete.</p>\r\n        <p><strong>Why?</strong> According to psychologist Dr. Timothy Pychyl:</p>\r\n        <blockquote>\r\n          “Breaking tasks down reduces procrastination by decreasing uncertainty and anxiety about where to start.”  \r\n        </blockquote>\r\n        <p>Marking tasks complete also releases dopamine, boosting motivation and productivity (Gawande, 2009).</p>\r\n        <div class=\"ref\"><a href=\"https://www.newyorker.com/magazine/2007/12/10/the-checklist\" target=\"_blank\">Gawande, 2009</a></div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- STEP 3 -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Step 3</small>\r\n        <h1>Schedule Regular Recharge Breaks</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>Take frequent short breaks away from screens—walk, stretch, or get fresh air.</p>\r\n        <p><strong>Why?</strong> Stanford researchers found walking increases creative thinking by ~60% compared to sitting (Oppezzo & Schwartz, 2014).</p>\r\n        <div class=\"ref\"><a href=\"https://www.apa.org/pubs/journals/releases/xlm-a0036577.pdf\" target=\"_blank\">Oppezzo & Schwartz, 2014</a></div>\r\n        <p>Breaks also help sustain focus and prevent burnout, improving long-term productivity (Ariga & Lleras, 2011).</p>\r\n        <div class=\"ref\"><a href=\"https://www.sciencedaily.com/releases/2011/02/110208131529.htm\" target=\"_blank\">Ariga & Lleras, 2011</a></div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- STEP 4 -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Step 4</small>\r\n        <h1>Seek Alternative Perspectives</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>When stuck, consult ChatGPT or peers for fresh approaches. Reframe the problem by stepping back to view the broader context.</p>\r\n        <p><strong>Why?</strong> Innovation experts suggest that:</p>\r\n        <blockquote>\r\n          “Reframing problems generates novel solutions by challenging initial assumptions.”  \r\n          <span class=\"ref\"><a href=\"https://adamgrant.net/book/think-again/\" target=\"_blank\">Grant, 2021</a></span>\r\n        </blockquote>\r\n        <p>Studies also show AI like ChatGPT can boost creativity by ~15%, providing insights differently from traditional methods (Kohnke, 2023).</p>\r\n        <div class=\"ref\"><a href=\"https://www.mdpi.com/2227-7102/13/2/193\" target=\"_blank\">Kohnke, 2023</a></div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- CLOSING -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Closing</small>\r\n        <h1>Sustainable Progress</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <blockquote>\r\n          “Sustainable progress beats burnout. Keep your energy high by balancing focused work with well-timed breaks.”\r\n        </blockquote>\r\n        <p>Wishing you a productive and healthy AI journey!</p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "1baba7b0-f9fe-4b14-baa2-c83d20e3c23d"
        },
        {
          "kind": "article",
          "order": 5,
          "title": "What is Python? Why We Chose It for Learning!",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>1.3 What is Python? Why We Chose It for Learning!</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555555; margin: 0; background: #ffffff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1000px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555555; }\r\n\r\n/* === Feature list === */\r\n.feature-list { display: grid; gap: 12px; margin: 14px 0; }\r\n.feature { border: 1px solid #EBEBEB; border-radius: 10px; padding: 12px; background: #fafafa; }\r\n.feature strong { color: #000000; }\r\n\r\n/* === Applications grid === */\r\n.app-grid { display: grid; grid-template-columns: 1fr; gap: 14px; margin: 16px 0; }\r\n.app { border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #ffffff; }\r\n.app h3 { margin: 0 0 6px; font-size: 18px; color: #000000; }\r\n.app p { margin: 0; font-size: 15px; color: #555555; }\r\n\r\n/* === References === */\r\n.ref-list { margin-top: 14px; }\r\n.ref-list a { display: block; margin: 6px 0; color: #2f6feb; text-decoration: none; }\r\n.ref-list a:hover { text-decoration: underline; }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n\r\n/* Responsive */\r\n@media (min-width: 700px) {\r\n  .app-grid { grid-template-columns: repeat(2, 1fr); }\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Section 1.3</small>\r\n        <h1>What is Python? Why We Chose It for Learning!</h1>\r\n        <p>A language built for readability, versatility, and real-world impact</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          Python is a powerful, high-level programming language celebrated for its readability and versatility.\r\n          From web development to scientific research, its clean, intuitive syntax makes it a favorite for both\r\n          beginners and experts.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- KEY REASONS -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Essentials</small>\r\n        <h1>Why Python is Ideal for Learning</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"feature-list\">\r\n          <div class=\"feature\"><strong>Ease of Learning</strong> – Syntax resembles human language; beginner-friendly.</div>\r\n          <div class=\"feature\"><strong>Wide Application</strong> – Powers data analysis, ML, web apps, automation, and more.</div>\r\n          <div class=\"feature\"><strong>Strong Community Support</strong> – Large ecosystem of libraries, frameworks, and help.</div>\r\n          <div class=\"feature\"><strong>Career Relevance</strong> – Highly sought after in data science, AI, web, and beyond.</div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- APPLICATIONS -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Applications</small>\r\n        <h1>Python’s Applications Across Fields</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"app-grid\">\r\n          <div class=\"app\">\r\n            <h3>Geosciences</h3>\r\n            <p>Earthquake analysis, climate modeling, geological surveys. Libraries like GeoPandas and GDAL analyze spatial data; USGS API delivers real-time data.</p>\r\n          </div>\r\n          <div class=\"app\">\r\n            <h3>Medical & Health Sciences</h3>\r\n            <p>Image analysis, patient data, drug discovery. SimpleITK and OpenCV process X-rays and MRIs, accelerating diagnoses.</p>\r\n          </div>\r\n          <div class=\"app\">\r\n            <h3>Finance</h3>\r\n            <p>Algorithmic trading, risk assessment, fraud detection. Pandas and NumPy manage datasets; Scikit-Learn powers stock predictions.</p>\r\n          </div>\r\n          <div class=\"app\">\r\n            <h3>Education</h3>\r\n            <p>Performance analysis, grading automation, interactive apps. Jupyter Notebooks deliver lessons and let students practice coding.</p>\r\n          </div>\r\n          <div class=\"app\">\r\n            <h3>Engineering & Manufacturing</h3>\r\n            <p>Process simulation, design optimization, production-line management. SciPy and Matplotlib model and visualize systems.</p>\r\n          </div>\r\n          <div class=\"app\">\r\n            <h3>Entertainment & Media</h3>\r\n            <p>Game dev, animation, content recommendations. Pygame supports games; TensorFlow/Keras enable personalization.</p>\r\n          </div>\r\n          <div class=\"app\">\r\n            <h3>Agriculture</h3>\r\n            <p>Crop-yield prediction, soil health, pest detection. Remote sensing + NDVI libraries analyze plant health for decisions.</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- REFERENCES -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Resources</small>\r\n        <h1>More References</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"ref-list\">\r\n          <a href=\"https://www.geeksforgeeks.org/blogs/python-applications-in-real-world/\" target=\"_blank\">GeeksforGeeks – Python Applications in Real World</a>\r\n          <a href=\"https://www.bocasay.com/7-applications-python-programming/\" target=\"_blank\">Bocasay – 7 Applications of Python Programming</a>\r\n          <a href=\"https://trio.dev/python-applications/\" target=\"_blank\">Trio – Python Applications</a>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "c5f245f0-986e-4841-a4b7-794497d0f261"
        },
        {
          "kind": "article",
          "order": 6,
          "title": "What is in the Python Script?",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>A Python Script Explained</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555555; margin: 0; background: #ffffff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1000px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555555; }\r\n\r\n/* === Components grid === */\r\n.comp-grid { display: grid; grid-template-columns: 1fr; gap: 14px; margin: 16px 0; }\r\n.comp { border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fafafa; }\r\n.comp h3 { margin: 0 0 6px; font-size: 17px; color: #000000; }\r\n.comp p { margin: 0; font-size: 15px; }\r\n.comp code { background: #f0f0f0; padding: 2px 6px; border-radius: 4px; font-family: monospace; font-size: 14px; }\r\n\r\n/* Responsive */\r\n@media (min-width: 700px) { .comp-grid { grid-template-columns: repeat(2, 1fr); } }\r\n\r\n/* === Code block === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 16px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, monospace; font-size: 14px;\r\n}\r\npre code { color: #f3f3f3; }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Python Basics</small>\r\n        <h1>A Python Script Explained</h1>\r\n        <p>Libraries, variables, functions, loops, and outputs working together</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          A Python script is a collection of libraries, variables, functions, and loops that create a structured workflow.  \r\n          Think of it like a recipe: each line is an instruction that moves the task toward completion.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- KEY COMPONENTS -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Essentials</small>\r\n        <h1>Key Components of a Script</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"comp-grid\">\r\n          <div class=\"comp\">\r\n            <h3>Importing Libraries</h3>\r\n            <p>Adds pre-built functionality (data handling, plotting, web access, etc.).</p>\r\n            <code>import pandas as pd</code>\r\n          </div>\r\n          <div class=\"comp\">\r\n            <h3>Defining Variables</h3>\r\n            <p>Stores information (numbers, text) for later use.</p>\r\n            <code>temperature = 72</code>\r\n          </div>\r\n          <div class=\"comp\">\r\n            <h3>Functions & Loops</h3>\r\n            <p>Reusable tasks and repeated actions, reducing code repetition.</p>\r\n            <code>for item in list:</code>\r\n          </div>\r\n          <div class=\"comp\">\r\n            <h3>Data Processing & Analysis</h3>\r\n            <p>Cleans, calculates, and organizes data for insights.</p>\r\n            <code># Calculate averages, clean missing values</code>\r\n          </div>\r\n          <div class=\"comp\">\r\n            <h3>Output & Visualization</h3>\r\n            <p>Displays results—print statements, charts, or saved files.</p>\r\n            <code>print(\"Average =\", avg)</code>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- END-TO-END EXAMPLE -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Example</small>\r\n        <h1>End-to-End Python Script</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>Here’s a simple script that processes and visualizes weather data:</p>\r\n<pre><code># 1. Importing Libraries\r\nimport pandas as pd           # Manage and analyze data tables\r\nimport matplotlib.pyplot as plt  # Create visualizations\r\n\r\n# 2. Defining Variables\r\ndata = {\r\n    \"Temperature\": [70, 75, 80, 85, 90],\r\n    \"Humidity\":    [30, 45, 50, 60, 70],\r\n}\r\ncity = \"Kurdistan\"\r\n\r\n# 3. DataFrame & Average Temperature\r\ndf = pd.DataFrame(data)\r\naverage_temp = df[\"Temperature\"].mean()\r\n\r\n# 4. Loop through Data and Print\r\nprint(f\"Weather data for {city}:\")\r\nfor temp in df[\"Temperature\"]:\r\n    print(f\"- Temperature: {temp}°F\")\r\n\r\n# 5. Visualize Data\r\nplt.plot(df[\"Temperature\"], label=\"Temperature\", color=\"red\")\r\nplt.plot(df[\"Humidity\"], label=\"Humidity\", color=\"blue\")\r\nplt.xlabel(\"Day\")\r\nplt.ylabel(\"Value\")\r\nplt.title(f\"Weather Data for {city}\")\r\nplt.legend()\r\nplt.show()\r\n\r\n# 6. Output Result\r\nprint(f\"The average temperature in {city} is {average_temp}°F.\")\r\n</code></pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "d31e418f-033b-4eb5-93eb-501ac77b0afd"
        },
        {
          "kind": "article",
          "order": 7,
          "title": "Introduction to Python Libraries",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Python Libraries — Quick Reference (with Context)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555555; margin: 0; background: #ffffff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555555; }\r\n\r\n/* === Context callouts === */\r\n.callouts { display: grid; gap: 12px; margin-top: 10px; }\r\n.callout {\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 12px; background: #fafafa;\r\n}\r\n.callout strong { color: #000; }\r\n\r\n/* === Responsive table === */\r\n.lib-table { width: 100%; border-collapse: collapse; margin-top: 8px; }\r\n.lib-table th, .lib-table td {\r\n  border: 1px solid #EBEBEB; padding: 10px 12px; text-align: left; vertical-align: top;\r\n}\r\n.lib-table th { background: #F8F8F8; color: #000; font-weight: 700; }\r\n.lib-name { font-weight: 700; color: #131722; }\r\n.lib-ex { font-size: 15px; }\r\n\r\n/* Mobile: turn rows into cards */\r\n@media (max-width: 760px) {\r\n  .lib-table, .lib-table thead, .lib-table tbody, .lib-table th, .lib-table td, .lib-table tr { display: block; }\r\n  .lib-table thead { display: none; }\r\n  .lib-table tr {\r\n    border: 1px solid #EBEBEB; border-radius: 10px; margin-bottom: 12px; overflow: hidden; background: #fff;\r\n  }\r\n  .lib-table td { border: none; border-bottom: 1px solid #EBEBEB; padding: 12px; }\r\n  .lib-table td:last-child { border-bottom: none; }\r\n  .lib-table td[data-label]::before {\r\n    content: attr(data-label) \": \";\r\n    display: inline-block; font-weight: 700; color: #000; margin-right: 6px;\r\n  }\r\n}\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Reference</small>\r\n        <h1>Python Libraries — Quick Reference</h1>\r\n        <p>Core libraries, purposes, and example projects — with context</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          Python libraries extend the language’s functionality so you can solve complex problems with concise, reliable code.\r\n          Use this list as a practical starting point when choosing tools for data, web, ML, and apps.\r\n        </p>\r\n        <div class=\"callouts\">\r\n          <div class=\"callout\"><strong>How to choose:</strong> Start from the <em>purpose</em> column. If you need tabular data work, reach for <strong>Pandas</strong>; interactive charts? Try <strong>Plotly</strong>; production web? <strong>Flask</strong> or <strong>Django</strong> depending on scope.</div>\r\n          <div class=\"callout\"><strong>Tip:</strong> Combine a small set well (e.g., <strong>Pandas + NumPy + Matplotlib</strong>) before adding more. Fewer dependencies = simpler deployments.</div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- LIBRARY TABLE -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Catalog</small>\r\n        <h1>Core Libraries at a Glance</h1>\r\n        <p>Purpose-first overview with concrete examples</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <table class=\"lib-table\" aria-label=\"Python libraries quick reference\">\r\n          <thead>\r\n            <tr>\r\n              <th style=\"width: 50px;\">#</th>\r\n              <th style=\"width: 160px;\">Library</th>\r\n              <th style=\"width: 260px;\">Purpose</th>\r\n              <th>Example Projects</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td data-label=\"#\">0</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">Pandas</td>\r\n              <td data-label=\"Purpose\">Data manipulation & analysis</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">Clean and analyze CSV/Excel, process financial data, generate reports</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">1</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">NumPy</td>\r\n              <td data-label=\"Purpose\">Numerical computing, matrix operations</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">Scientific computing, large datasets, linear algebra</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">2</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">Matplotlib</td>\r\n              <td data-label=\"Purpose\">Static visualizations & charts</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">Line, bar, pie charts; trend plotting</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">3</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">Seaborn</td>\r\n              <td data-label=\"Purpose\">Statistical data visualization</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">Heatmaps, pair plots, exploratory data reports</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">4</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">Scikit-Learn</td>\r\n              <td data-label=\"Purpose\">Machine-learning models</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">Classification, clustering, recommendation engines</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">5</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">TensorFlow</td>\r\n              <td data-label=\"Purpose\">Deep-learning & neural networks</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">Image recognition, object detection, NLP</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">6</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">Keras</td>\r\n              <td data-label=\"Purpose\">Rapid deep-learning prototyping</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">Quick image or text models for experimentation</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">7</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">NLTK</td>\r\n              <td data-label=\"Purpose\">Basic NLP & text processing</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">Chatbots, sentiment analysis, language translation</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">8</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">spaCy</td>\r\n              <td data-label=\"Purpose\">Advanced NLP at scale</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">Entity recognition, document classification, large language models</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">9</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">OpenCV</td>\r\n              <td data-label=\"Purpose\">Computer vision</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">Face recognition, motion tracking, real-time object detection</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">10</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">BeautifulSoup</td>\r\n              <td data-label=\"Purpose\">Web scraping</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">Collect news articles, aggregate multi-site data</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">11</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">Requests</td>\r\n              <td data-label=\"Purpose\">HTTP requests & API access</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">Retrieve weather data, stock quotes, automate REST calls</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">12</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">Flask</td>\r\n              <td data-label=\"Purpose\">Lightweight web apps / REST APIs</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">Rapid dashboards, microservices, prototypes</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">13</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">Django</td>\r\n              <td data-label=\"Purpose\">Full-stack web framework</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">E-commerce sites, CMS platforms, large web apps</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">14</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">Streamlit</td>\r\n              <td data-label=\"Purpose\">Interactive data apps & dashboards</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">No-boilerplate dashboards, data visualizations</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">15</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">Pygame</td>\r\n              <td data-label=\"Purpose\">2D game development</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">Educational games, interactive simulations</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">16</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">PySpark</td>\r\n              <td data-label=\"Purpose\">Distributed data processing</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">Big-data analytics, real-time ETL pipelines</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">17</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">Plotly</td>\r\n              <td data-label=\"Purpose\">Interactive web visuals</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">3D graphs, dynamic dashboards, browser-based charts</td>\r\n            </tr>\r\n            <tr>\r\n              <td data-label=\"#\">18</td>\r\n              <td class=\"lib-name\" data-label=\"Library\">SQLAlchemy</td>\r\n              <td data-label=\"Purpose\">Database ORM & management</td>\r\n              <td class=\"lib-ex\" data-label=\"Example Projects\">CRUD backends, database migrations, data models</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "8bb7f54e-bd83-4852-863f-d34b21be2272"
        }
      ]
    },
    {
      "order": 2,
      "title": "Module 2: Start Coding with AI",
      "lessons": [
        {
          "kind": "article",
          "order": 1,
          "title": "GitHub for Beginners",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>GitHub for Beginners • Create a Repository (Online)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Steps === */\r\n.step { border-left: 4px solid #000; padding-left: 12px; margin: 14px 0; }\r\n.step h3 { margin: 0 0 6px; font-size: 18px; color: #000; }\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n\r\n/* === Responsive video embed (added) === */\r\n.video-embed { position: relative; width: 100%; height: 0; padding-bottom: 56.25%; background: #000; border-radius: 12px; overflow: hidden; }\r\n.video-embed iframe { position: absolute; inset: 0; width: 100%; height: 100%; border: 0; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO (added at top) -->\r\n    <section class=\"section-card\" id=\"video\">\r\n      <div class=\"body\">\r\n        <div class=\"video-embed\">\r\n          <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/NKXpnieI-lg\" title=\"GitHub for Beginners\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>GitHub 101</small>\r\n        <h1>Create Your First Repository (Online Only)</h1>\r\n        <p>The simplest path: create a repo on github.com in minutes</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          A <strong>repository</strong> (repo) is like a <em>folder on your computer</em>. You put files and subfolders inside it.\r\n          The difference: GitHub stores that folder on the internet so you can back it up, share it, and collaborate.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- OPTION A: CREATE VIA WEBSITE -->\r\n    <section class=\"section-card\" id=\"web\">\r\n      <div class=\"banner\">\r\n        <small>Online</small>\r\n        <h1>Create a Repository on GitHub.com</h1>\r\n        <p>No installs. Just your browser.</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>Step 1 — Open the “New repository” page</h3>\r\n          <p>\r\n            Go to <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a> and sign in.  \r\n            Click the <strong>+</strong> button (top-right) → <strong>New repository</strong>.\r\n          </p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>Step 2 — Name your repo</h3>\r\n          <p>\r\n            In <strong>Repository name</strong>, type something simple, e.g. <span class=\"inline\">my-first-repo</span>.<br/>\r\n            (Optional) Add a short <strong>Description</strong>.\r\n          </p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>Step 3 — Choose visibility</h3>\r\n          <p>\r\n            Select <strong>Public</strong> (anyone can see it) or <strong>Private</strong> (only you and invited people).\r\n          </p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>Step 4 — Initialize with a README</h3>\r\n          <p>\r\n            Check <strong>Add a README file</strong>. This gives your repo a helpful starting page and prevents it from being empty.\r\n          </p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>Step 5 — (Optional) Add .gitignore and License</h3>\r\n          <p>\r\n            You can skip these for your first repo. Later, you can add a <span class=\"inline\">.gitignore</span> (to ignore temp files)\r\n            and a <span class=\"inline\">LICENSE</span> (how others may use your work).\r\n          </p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>Step 6 — Create the repository</h3>\r\n          <p>Click <strong>Create repository</strong>. You’ll land on your new repo’s page.</p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>Step 7 — Add files (upload in the browser)</h3>\r\n          <p>\r\n            Click <strong>Add file → Upload files</strong> → drag & drop files from your computer → then click\r\n            <strong>Commit changes</strong> to save them in the repo.\r\n          </p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>Step 8 — Edit files online</h3>\r\n          <p>\r\n            Click a file (e.g., <span class=\"inline\">README.md</span>) → click the pencil icon → make edits → click\r\n            <strong>Commit changes</strong>. That’s it — you’ve updated your repo.\r\n          </p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>Step 9 — Share your repo</h3>\r\n          <p>\r\n            Copy the browser URL of your repo and share it. If it’s private, invite collaborators via\r\n            <strong>Settings → Collaborators</strong>.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "bafd0b81-5f40-4aa8-97d0-9edc1ad6abdd"
        },
        {
          "kind": "article",
          "order": 2,
          "title": "Use GitHub Codespaces • Build, Run, Push",
          "content": {
            "body_md": "<!DOCTYPE html> \r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Use GitHub Codespaces • Build, Run, Push</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Steps === */\r\n.step { border-left: 4px solid #000; padding-left: 12px; margin: 14px 0; }\r\n.step h3 { margin: 0 0 6px; font-size: 18px; color: #000; }\r\n\r\n/* === Code / terminal === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 14px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO (added) -->\r\n    <section class=\"section-card\" id=\"video\">\r\n      <div class=\"body\">\r\n        <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/uSrWCL0UPvs\" title=\"Use GitHub Codespaces • Build, Run, Push\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Codespaces 101</small>\r\n        <h1>Use GitHub Codespaces with Your Repository</h1>\r\n        <p>Open a cloud dev environment, run a Python script, and push changes to GitHub</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          <strong>GitHub Codespaces</strong> lets you code in the browser (or VS Code) without installing anything on your computer.\r\n          You’ll open your repo in a Codespace, create a simple Python script, run it, then commit & push back to GitHub.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- OPEN A CODESPACE -->\r\n    <section class=\"section-card\" id=\"open\">\r\n      <div class=\"banner\">\r\n        <small>Step 1</small>\r\n        <h1>Open a Codespace for Your Repo</h1>\r\n        <p>Launch a ready-to-code environment in the cloud</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>1.1 — Go to your repository</h3>\r\n          <p>Open <em>your repo page</em> on <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a>.</p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>1.2 — Open Codespaces</h3>\r\n          <p>\r\n            Click the green <strong>Code</strong> button → <strong>Codespaces</strong> tab → <strong>Create codespace on main</strong>.\r\n            (If asked, keep the defaults.)\r\n          </p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>1.3 — Wait for it to start</h3>\r\n          <p>GitHub will prepare your environment. You’ll see a VS Code-like interface in your browser with a built-in terminal.</p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- CREATE & RUN PYTHON SCRIPT -->\r\n    <section class=\"section-card\" id=\"python\">\r\n      <div class=\"banner\">\r\n        <small>Step 2</small>\r\n        <h1>Create and Run a Simple Python Script</h1>\r\n        <p>Test locally inside your Codespace</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>2.1 — Create a new file</h3>\r\n          <p>\r\n            In the Explorer (left sidebar), click <strong>New File</strong> and name it <span class=\"inline\">hello.py</span>.\r\n            Paste the code below and save (<span class=\"inline\">Ctrl/Cmd + S</span>).\r\n          </p>\r\n<pre># hello.py\r\nname = \"Hawkar\"\r\ntemps = [70, 75, 80]\r\navg = sum(temps) / len(temps)\r\nprint(f\"Hello {name}! Average temp is {avg:.1f}°F.\")</pre>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>2.2 — Run the script in the Terminal</h3>\r\n          <p>Open the terminal (<span class=\"inline\">Ctrl/Cmd + `</span>) and run:</p>\r\n<pre>python3 hello.py\r\n# or, depending on the image:\r\npython hello.py</pre>\r\n          <p>You should see the output printed below the command.</p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>2.3 — (Optional) Use packages</h3>\r\n          <p>If you need a library, install it with <span class=\"inline\">pip</span>:</p>\r\n<pre>pip install pandas</pre>\r\n          <p>Then import it in your script and run again.</p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- COMMIT & PUSH -->\r\n    <section class=\"section-card\" id=\"push\">\r\n      <div class=\"banner\">\r\n        <small>Step 3</small>\r\n        <h1>Save Changes to GitHub (Commit & Push)</h1>\r\n        <p>Use the built-in Source Control in Codespaces</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>3.1 — Stage your changes</h3>\r\n          <p>\r\n            Click the <strong>Source Control</strong> icon (left sidebar). You’ll see <span class=\"inline\">hello.py</span> listed as a change.\r\n            Click <strong>+</strong> (Stage Changes) next to it.\r\n          </p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>3.2 — Commit</h3>\r\n          <p>Enter a short message like <em>“Add hello.py test script”</em> and click <strong>Commit</strong>.</p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>3.3 — Push</h3>\r\n          <p>\r\n            Click <strong>Sync Changes</strong> or <strong>Push</strong> in the Source Control panel.\r\n            Your new file and commits are now on GitHub.\r\n          </p>\r\n        </div>\r\n\r\n        <p><em>Prefer the terminal?</em> You can run these commands instead:</p>\r\n<pre>git status\r\ngit add hello.py\r\ngit commit -m \"Add hello.py test script\"\r\ngit push</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- VERIFY -->\r\n    <section class=\"section-card\" id=\"verify\">\r\n      <div class=\"banner\">\r\n        <small>Step 4</small>\r\n        <h1>Verify on GitHub</h1>\r\n        <p>Confirm your file is in the repository</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>4.1 — Refresh your repo page</h3>\r\n          <p>\r\n            Open your repository on <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a> and refresh.\r\n            You should see <span class=\"inline\">hello.py</span> in the file list and your latest commit message.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- STOP / CLEANUP -->\r\n    <section class=\"section-card\" id=\"stop\">\r\n      <div class=\"banner\">\r\n        <small>Step 5</small>\r\n        <h1>Stop or Reopen Your Codespace</h1>\r\n        <p>Manage your environment easily</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>5.1 — Stop (to save resources)</h3>\r\n          <p>\r\n            Click the green <strong>Code</strong> button → You’ll see <strong>(Active)</strong> status → \r\n            click the three dots (⋯) → select <strong>Stop codespace</strong>. \r\n            You can reopen it anytime from the same menu.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "3aac05fc-76fc-478a-b53e-c45921e460c1"
        },
        {
          "kind": "article",
          "order": 3,
          "title": "Streamlit in GitHub Codespaces • Build & Run",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Streamlit in GitHub Codespaces • Build & Run</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Steps === */\r\n.step { border-left: 4px solid #000; padding-left: 12px; margin: 14px 0; }\r\n.step h3 { margin: 0 0 6px; font-size: 18px; color: #000; }\r\n\r\n/* === Code / terminal === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 14px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO (added at the very top) -->\r\n    <section class=\"section-card\" id=\"video\">\r\n      <div class=\"body\" style=\"padding:0;\">\r\n        <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/t6limpZZyQ4\" title=\"Streamlit in GitHub Codespaces • Build & Run\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen style=\"width:100%; aspect-ratio:16/9; height:auto; display:block; border:0;\"></iframe>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Streamlit 101</small>\r\n        <h1>Create & Run a Streamlit App in Codespaces</h1>\r\n        <p>Zero local installs — build in the browser and view via port forwarding</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          You’ll open your repository in a <strong>GitHub Codespace</strong>, install Streamlit, create a simple app\r\n          (<span class=\"inline\">app.py</span>), run it on a forwarded port, and see it in your browser.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- OPEN CODESPACE -->\r\n    <section class=\"section-card\" id=\"open\">\r\n      <div class=\"banner\">\r\n        <small>Step 1</small>\r\n        <h1>Open Your Repository in a Codespace</h1>\r\n        <p>Use the cloud dev environment</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>1.1 — Go to your repository on GitHub</h3>\r\n          <p>Open your repo page at <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a>.</p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>1.2 — Launch Codespaces</h3>\r\n          <p>\r\n            Click the green <strong>Code</strong> button → <strong>Codespaces</strong> tab → <strong>Create codespace on main</strong>.\r\n          </p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>1.3 — Wait for the editor</h3>\r\n          <p>You’ll see a VS Code-like editor in your browser with a built-in terminal at the bottom.</p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INSTALL STREAMlit -->\r\n    <section class=\"section-card\" id=\"install\">\r\n      <div class=\"banner\">\r\n        <small>Step 2</small>\r\n        <h1>Install Streamlit in the Codespace</h1>\r\n        <p>One-time install in the container</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>2.1 — Install via pip</h3>\r\n          <p>In the terminal inside Codespaces, run:</p>\r\n<pre>pip install streamlit</pre>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- CREATE APP.PY -->\r\n    <section class=\"section-card\" id=\"create\">\r\n      <div class=\"banner\">\r\n        <small>Step 3</small>\r\n        <h1>Create a Simple Streamlit App</h1>\r\n        <p>Minimal UI with input, chart, and dataframe</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>3.1 — New file: <span class=\"inline\">app.py</span></h3>\r\n          <p>In the Explorer (left), click <strong>New File</strong> → name it <span class=\"inline\">app.py</span> and paste:</p>\r\n<pre>import streamlit as st\r\nimport pandas as pd\r\n\r\nst.set_page_config(page_title=\"Hello Streamlit\", page_icon=\"👋\", layout=\"centered\")\r\n\r\nst.title(\"Hello, Streamlit in Codespaces 👋\")\r\nst.write(\"This is a simple demo running entirely in your browser-based dev environment.\")\r\n\r\nname = st.text_input(\"Your name\", \"Hawkar\")\r\ntemps = pd.DataFrame({\"Temperature (°F)\": [70, 75, 80], \"Humidity (%)\": [30, 45, 50]})\r\n\r\nst.subheader(f\"Welcome, {name}!\")\r\nst.dataframe(temps)\r\n\r\nst.line_chart(temps[\"Temperature (°F)\"])\r\n\r\nif st.button(\"Compute Average Temp\"):\r\n    avg = temps[\"Temperature (°F)\"].mean()\r\n    st.success(f\"Average temperature is {avg:.1f}°F\")</pre>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- RUN STREAMLIT WITH PORT FORWARDING -->\r\n    <section class=\"section-card\" id=\"run\">\r\n      <div class=\"banner\">\r\n        <small>Step 4</small>\r\n        <h1>Run Streamlit and Open the App</h1>\r\n        <p>Forward a port and view in your browser</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>4.1 — Start Streamlit on a fixed port</h3>\r\n          <p>From the terminal:</p>\r\n<pre>streamlit run app.py --server.address 0.0.0.0 --server.port 8000</pre>\r\n          <p>\r\n            The app will start on port <strong>8000</strong>. Codespaces detects this and offers to open the port.\r\n          </p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>4.2 — Open the forwarded port</h3>\r\n          <p>\r\n            If prompted, click <strong>Open in Browser</strong>.  \r\n            Or open the <strong>Ports</strong> panel (bottom), find port <strong>8000</strong>, click the globe icon to open it.\r\n          </p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>4.3 — (Optional) Make the port public for sharing</h3>\r\n          <p>\r\n            In the <strong>Ports</strong> panel, set the port visibility to <strong>Public</strong> to share the URL.  \r\n            (Keep it <strong>Private</strong> if you don’t want to share access.)\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- COMMIT & PUSH -->\r\n    <section class=\"section-card\" id=\"push\">\r\n      <div class=\"banner\">\r\n        <small>Step 5</small>\r\n        <h1>Commit & Push Your Streamlit App</h1>\r\n        <p>Save your work back to GitHub</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>5.1 — Stage & Commit</h3>\r\n          <p>\r\n            Click the <strong>Source Control</strong> icon (left). Stage <span class=\"inline\">app.py</span> with <strong>+</strong>, add a message like\r\n            <em>\"Add Streamlit demo\"</em>, then click <strong>Commit</strong>.\r\n          </p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>5.2 — Push</h3>\r\n          <p>Click <strong>Sync Changes</strong> or <strong>Push</strong> to upload your commit to GitHub.</p>\r\n        </div>\r\n\r\n        <p><em>Terminal alternative:</em></p>\r\n<pre>git status\r\ngit add app.py\r\ngit commit -m \"Add Streamlit demo\"\r\ngit push</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- VERIFY -->\r\n    <section class=\"section-card\" id=\"verify\">\r\n      <div class=\"banner\">\r\n        <small>Step 6</small>\r\n        <h1>Verify on GitHub</h1>\r\n        <p>Confirm your new file is in the repo</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>6.1 — Check your repository</h3>\r\n          <p>Refresh your repo page on <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a>. You should see <span class=\"inline\">app.py</span> and your latest commit.</p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "ee0007ba-43da-4d21-8bb6-f417312f7d9c"
        },
        {
          "kind": "article",
          "order": 4,
          "title": "What is Streamlit? Why It Improves UI & UX",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>What is Streamlit? Why It Improves UI & UX</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Highlights grid === */\r\n.quick-grid { display: grid; grid-template-columns: 1fr; gap: 14px; margin-top: 12px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fafafa; }\r\n.box h3 { margin: 0 0 6px; font-size: 17px; color: #000; }\r\n.box p { margin: 0; font-size: 15px; }\r\n\r\n/* Responsive */\r\n@media (min-width: 720px) { .quick-grid { grid-template-columns: repeat(2, 1fr); } }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Streamlit 101</small>\r\n        <h1>What is Streamlit?</h1>\r\n        <p>And why it helps the user interface and user experience of your code</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          <strong>Streamlit</strong> is an open-source Python library that turns scripts into interactive web apps —\r\n          with minimal effort and no need for frontend skills. Instead of showing results in plain terminal text,\r\n          Streamlit makes it easy to build apps where users can explore, interact, and visualize data directly in the browser.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- WHY IT HELPS -->\r\n    <section class=\"section-card\" id=\"why\">\r\n      <div class=\"banner\">\r\n        <small>Benefits</small>\r\n        <h1>Why Streamlit Improves UI & UX</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"quick-grid\">\r\n          <div class=\"box\">\r\n            <h3>Simple & Fast</h3>\r\n            <p>Write Python only. No HTML, CSS, or JavaScript required — yet you still get a professional-looking interface.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h3>Interactive Widgets</h3>\r\n            <p>Add sliders, dropdowns, text inputs, and buttons with one line of code, giving users control over your code’s behavior.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h3>Data Visualization</h3>\r\n            <p>Display charts, maps, and dataframes interactively — much easier to understand than static console output.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h3>Better UX for Sharing</h3>\r\n            <p>Deploy your script as a web app so others can use it without installing Python or dependencies locally.</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- NEXT STEPS -->\r\n    <section class=\"section-card\" id=\"next\">\r\n      <div class=\"banner\">\r\n        <small>Explore</small>\r\n        <h1>Learn More & Deploy Apps</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          With Streamlit, you can go beyond “code that runs” and deliver “apps people enjoy using”.\r\n          For more information and deployment options, visit:\r\n        </p>\r\n        <p>\r\n          <a href=\"https://streamlit.io/cloud\" target=\"_blank\" rel=\"noopener\"><strong>https://streamlit.io/cloud</strong></a>\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "beca1097-a301-450c-8d7f-12ffefc968b3"
        },
        {
          "kind": "article",
          "order": 5,
          "title": "Streamlit in Codespaces • Visualize CSV Data",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Build a CSV Visualization App (Streamlit + Codespaces)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Steps === */\r\n.step { border-left: 4px solid #000; padding-left: 12px; margin: 14px 0; }\r\n.step h3 { margin: 0 0 6px; font-size: 18px; color: #000; }\r\n\r\n/* === Code / terminal === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 14px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO -->\r\n    <section class=\"section-card\" id=\"video\">\r\n      <div class=\"body\">\r\n        <div style=\"display:flex; justify-content:center;\">\r\n          <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/B1at9e_SwzM\" title=\"Streamlit in Codespaces • Visualize CSV Data\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Streamlit • Codespaces</small>\r\n        <h1>Visualize a CSV with Streamlit in GitHub Codespaces</h1>\r\n        <p>Repository layout → CSV → app.py → run → push</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          You will create a repo layout, add a small CSV file, write <strong>app.py</strong> to visualize it with Streamlit,\r\n          run the app in your Codespace, and push the changes back to GitHub.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- REPOSITORY STRUCTURE -->\r\n    <section class=\"section-card\" id=\"structure\">\r\n      <div class=\"banner\">\r\n        <small>Step 1</small>\r\n        <h1>Repository Structure</h1>\r\n        <p>Minimal, clear layout</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>your-repo/\r\n├─ app.py\r\n├─ requirements.txt\r\n└─ data/\r\n   └─ weather.csv\r\n</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FILES -->\r\n    <section class=\"section-card\" id=\"files\">\r\n      <div class=\"banner\">\r\n        <small>Step 2</small>\r\n        <h1>Create Files</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>requirements.txt</h3>\r\n<pre>streamlit\r\npandas</pre>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>data/weather.csv</h3>\r\n<pre>Date,Temperature,Humidity\r\n2025-08-01,70,30\r\n2025-08-02,75,45\r\n2025-08-03,80,50\r\n2025-08-04,85,60\r\n2025-08-05,90,70</pre>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- APP.PY -->\r\n    <section class=\"section-card\" id=\"app\">\r\n      <div class=\"banner\">\r\n        <small>Step 3</small>\r\n        <h1>app.py Script</h1>\r\n        <p>Improved Streamlit script with caching, filtering, and safe summary</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>import streamlit as st\r\nimport pandas as pd\r\nfrom pathlib import Path\r\n\r\nst.set_page_config(page_title=\"CSV Viewer\", page_icon=\"📈\", layout=\"centered\")\r\n\r\nDATA_PATH = Path(\"data\") / \"weather.csv\"\r\n\r\nst.title(\"CSV Viewer (Streamlit)\")\r\nst.caption(\"Reads data/weather.csv and shows a table, summary, and a line chart.\")\r\n\r\n@st.cache_data(show_spinner=False)\r\ndef load_csv(p: Path) -> pd.DataFrame | None:\r\n    if not p.exists():\r\n        return None\r\n    df = pd.read_csv(p)\r\n    if \"Date\" in df.columns:\r\n        df[\"Date\"] = pd.to_datetime(df[\"Date\"], errors=\"coerce\")\r\n    return df\r\n\r\ndf = load_csv(DATA_PATH)\r\n\r\nif df is None:\r\n    st.error(f\"CSV not found at {DATA_PATH}. Make sure the file exists.\")\r\n    st.stop()\r\n\r\n# Raw data\r\nst.subheader(\"Raw Data\")\r\nst.dataframe(df, width=\"stretch\")  # ✅ new API (replaces use_container_width)\r\n\r\n# Summary (make it pandas-version-safe)\r\nst.subheader(\"Summary Statistics\")\r\nnumeric_cols = df.select_dtypes(include=\"number\").columns.tolist()\r\nif numeric_cols:\r\n    summary = df[numeric_cols].describe()\r\n    st.dataframe(summary, width=\"stretch\")\r\nelse:\r\n    st.info(\"No numeric columns found to summarize.\")\r\n\r\n# Optional date filter\r\nhas_dt = \"Date\" in df.columns and pd.api.types.is_datetime64_any_dtype(df[\"Date\"])\r\nif has_dt:\r\n    dmin, dmax = df[\"Date\"].min(), df[\"Date\"].max()\r\n    if pd.notna(dmin) and pd.notna(dmax):\r\n        st.subheader(\"Filter\")\r\n        start, end = st.date_input(\r\n            \"Date range:\",\r\n            value=(dmin.date(), dmax.date()),\r\n            min_value=dmin.date(),\r\n            max_value=dmax.date(),\r\n        )\r\n        if start and end:\r\n            mask = (df[\"Date\"] >= pd.to_datetime(start)) & (df[\"Date\"] <= pd.to_datetime(end))\r\n            df = df.loc[mask].copy()\r\n\r\n# Chart\r\nst.subheader(\"Chart\")\r\nnumeric_cols = df.select_dtypes(include=\"number\").columns.tolist()\r\nif not numeric_cols:\r\n    st.warning(\"No numeric columns to plot.\")\r\nelse:\r\n    metric = st.selectbox(\"Select a numeric column to plot:\", numeric_cols, index=0)\r\n    if has_dt:\r\n        chart_data = df.set_index(\"Date\")[[metric]].sort_index()\r\n    else:\r\n        chart_data = df[[metric]]\r\n\r\n    # ❗ Do NOT pass width=\"stretch\" here — Altair expects a number.\r\n    # Also avoid use_container_width (deprecated). Let Streamlit auto-size.\r\n    st.line_chart(chart_data)</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- RUN -->\r\n    <section class=\"section-card\" id=\"run\">\r\n      <div class=\"banner\">\r\n        <small>Step 4</small>\r\n        <h1>Run the App</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>In the Codespaces terminal:</p>\r\n<pre>pip install -r requirements.txt\r\nstreamlit run app.py --server.address 0.0.0.0 --server.port 8000</pre>\r\n        <p>Click <strong>Open in Browser</strong> when prompted, or use the Ports panel → port <strong>8000</strong>.</p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- RESULT -->\r\n    <section class=\"section-card\" id=\"result\">\r\n      <div class=\"banner\">\r\n        <small>Step 5</small>\r\n        <h1>What You See When Running</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <ul>\r\n          <li>A **title and caption** at the top: “CSV Viewer (Streamlit)”</li>\r\n          <li>A **data table** showing the contents of <span class=\"inline\">weather.csv</span></li>\r\n          <li>A **summary statistics table** (mean, min, max, etc.) for numeric columns</li>\r\n          <li>A **date filter widget** (calendar range) if the CSV has a Date column</li>\r\n          <li>A **chart section** where you can choose a numeric column (Temperature or Humidity) and see a line chart over time</li>\r\n          <li>Error/warning/info messages appear gracefully if columns are missing</li>\r\n        </ul>\r\n        <p>\r\n          In this example CSV, you can filter the date range (e.g., Aug 2–Aug 4), view the filtered table, summary statistics, and a line chart of Temperature or Humidity across dates.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "b2582ffc-58ee-4bd8-97d4-1d82af19ced3"
        },
        {
          "kind": "article",
          "order": 6,
          "title": "User Experience",
          "content": {
            "body_md": "<!DOCTYPE html> \r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Streamlit UX • CSV Explorer (User Experience Guide)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Steps === */\r\n.step { border-left: 4px solid #000; padding-left: 12px; margin: 14px 0; }\r\n.step h3 { margin: 0 0 6px; font-size: 18px; color: #000; }\r\n\r\n/* === Code / terminal === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 14px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\n/* === Bullets tidy === */\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO (added on top) -->\r\n    <section class=\"section-card\" id=\"video\">\r\n      <div class=\"body\" style=\"padding:0\">\r\n        <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/OqRsu45OS0M\" title=\"User Experience\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Streamlit UX</small>\r\n        <h1>CSV Explorer — User Experience</h1>\r\n        <p>Upload/auto-load CSV → Smart parsing → Filter → Explore → Chart → Export</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          This page documents the <strong>user experience</strong> of the improved <strong>CSV Explorer</strong> built with Streamlit.\r\n          It runs in your existing repository (same Codespace), replacing the previous <span class=\"inline\">app.py</span>.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- HOW TO RUN (Codespaces) -->\r\n    <section class=\"section-card\" id=\"run\">\r\n      <div class=\"banner\">\r\n        <small>Run</small>\r\n        <h1>How to Run in GitHub Codespaces</h1>\r\n        <p>Replace app.py → install dependencies → run Streamlit on a fixed port</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>1) Replace the app</h3>\r\n          <p>Open your Codespace → replace the existing <span class=\"inline\">app.py</span> with the script below and save.</p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>2) Ensure dependencies</h3>\r\n          <p>Your <span class=\"inline\">requirements.txt</span> should have at least:</p>\r\n<pre>streamlit\r\npandas</pre>\r\n          <p>(<em>Note:</em> <span class=\"inline\">pandas</span> pulls in <span class=\"inline\">numpy</span>.)</p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>3) Install & run</h3>\r\n          <p>In the terminal:</p>\r\n<pre>pip install -r requirements.txt\r\nstreamlit run app.py --server.address 0.0.0.0 --server.port 8000</pre>\r\n          <p>Click <strong>Open in Browser</strong> (or use the Ports panel → globe icon on port <strong>8000</strong>).</p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- UX WALKTHROUGH -->\r\n    <section class=\"section-card\" id=\"ux\">\r\n      <div class=\"banner\">\r\n        <small>UX</small>\r\n        <h1>What the User Experiences</h1>\r\n        <p>Designed for clarity, speed, and reliability</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <ul>\r\n          <li><strong>Header & Caption.</strong> Clear page title and purpose.</li>\r\n          <li><strong>Sidebar → Data.</strong> Upload a CSV or automatically load <span class=\"inline\">data/weather.csv</span>. If neither is present, a <strong>demo weather dataset</strong> is generated.</li>\r\n          <li><strong>Smart datetime detection.</strong> Columns named like <em>Date / Time / Timestamp / Datetime</em> are auto-parsed. If none are detected, the user can try parsing a chosen column.</li>\r\n          <li><strong>Chart options.</strong> Users multi-select metrics to plot, choose resampling (Daily/Weekly/Monthly), aggregation (Mean/Sum), rolling average window, normalization to 0–1, and chart type (Line/Area/Bar).</li>\r\n          <li><strong>Raw Data table.</strong> Scrollable, searchable dataframe view.</li>\r\n          <li><strong>Summary stats.</strong> Numeric columns summarized via <span class=\"inline\">describe()</span>.</li>\r\n          <li><strong>KPIs.</strong> Quick metrics for row count and date-range boundaries when a datetime column is active.</li>\r\n          <li><strong>Date range filter.</strong> When applicable, filter the dataset and reflect counts (“Showing N rows from … to …”).</li>\r\n          <li><strong>Charts.</strong> Auto-sized charts of selected metrics; transformations (resample, rolling, normalize) apply in order.</li>\r\n          <li><strong>Export.</strong> Download the current filtered view as <span class=\"inline\">filtered.csv</span>.</li>\r\n          <li><strong>Resilience.</strong> All critical operations are guarded with helpful <em>error/warning/info</em> messages so the UX never “breaks”.</li>\r\n        </ul>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- APP CODE (EXACT) -->\r\n    <section class=\"section-card\" id=\"code\">\r\n      <div class=\"banner\">\r\n        <small>Code</small>\r\n        <h1>app.py (Exact Code Used)</h1>\r\n        <p>Paste this into your repository’s app.py</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>import io\r\nfrom pathlib import Path\r\nfrom typing import Optional, Tuple, List\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\nimport streamlit as st\r\n\r\n# ---------------- Page setup ----------------\r\nst.set_page_config(page_title=\"CSV Explorer\", page_icon=\"📈\", layout=\"centered\")\r\nst.title(\"📈 CSV Explorer\")\r\nst.caption(\"Load a CSV, filter by date, explore stats, and plot one or more metrics.\")\r\n\r\n# ---------------- Helpers ----------------\r\n@st.cache_data(show_spinner=False)\r\ndef read_csv_safely(file_or_path) -> Optional[pd.DataFrame]:\r\n    \"\"\"Read CSV; coerce obvious datetime columns.\"\"\"\r\n    try:\r\n        df = pd.read_csv(file_or_path)\r\n        for col in df.columns:\r\n            if col.lower() in (\"date\", \"time\", \"timestamp\", \"datetime\"):\r\n                df[col] = pd.to_datetime(df[col], errors=\"coerce\")\r\n        return df\r\n    except Exception as e:\r\n        st.error(f\"Could not read CSV: {e}\")\r\n        return None\r\n\r\n@st.cache_data(show_spinner=False)\r\ndef demo_weather() -> pd.DataFrame:\r\n    \"\"\"Small synthetic time-series if no file is provided.\"\"\"\r\n    dates = pd.date_range(\"2024-01-01\", periods=120, freq=\"D\")\r\n    x = np.arange(len(dates))\r\n    df = pd.DataFrame(\r\n        {\r\n            \"Date\": dates,\r\n            \"TempC\": 12 + 8 * np.sin(x / 9) + np.random.normal(0, 1.3, len(dates)),\r\n            \"Rain_mm\": np.clip(np.random.gamma(1.5, 1.2, len(dates)) - 1.2, 0, None),\r\n            \"Wind_kmh\": 10 + np.random.normal(0, 3, len(dates)),\r\n        }\r\n    )\r\n    return df\r\n\r\ndef find_datetime_columns(df: pd.DataFrame) -> List[str]:\r\n    return [c for c in df.columns if pd.api.types.is_datetime64_any_dtype(df[c])]\r\n\r\ndef numeric_columns(df: pd.DataFrame) -> List[str]:\r\n    return df.select_dtypes(include=\"number\").columns.tolist()\r\n\r\ndef filter_by_date(\r\n    df: pd.DataFrame, date_col: str\r\n) -> Tuple[pd.DataFrame, Optional[pd.Timestamp], Optional[pd.Timestamp]]:\r\n    dmin, dmax = df[date_col].min(), df[date_col].max()\r\n    if pd.isna(dmin) or pd.isna(dmax):\r\n        st.info(\"Date column contains invalid values; showing all rows.\")\r\n        return df, None, None\r\n    start, end = st.date_input(\r\n        \"Date range\",\r\n        value=(dmin.date(), dmax.date()),\r\n        min_value=dmin.date(),\r\n        max_value=dmax.date(),\r\n        key=\"date_range\",\r\n    )\r\n    if start and end:\r\n        mask = (df[date_col] >= pd.to_datetime(start)) & (df[date_col] <= pd.to_datetime(end))\r\n        return df.loc[mask].copy(), pd.to_datetime(start), pd.to_datetime(end)\r\n    return df, None, None\r\n\r\ndef resample_df(df: pd.DataFrame, date_col: str, cols: List[str], freq: Optional[str], how: str) -> pd.DataFrame:\r\n    if not freq:\r\n        return df.set_index(date_col)[cols].sort_index()\r\n    agg = \"mean\" if how == \"Mean\" else \"sum\"\r\n    return df.set_index(date_col)[cols].sort_index().resample(freq).agg(agg)\r\n\r\ndef apply_rolling(df: pd.DataFrame, window: int) -> pd.DataFrame:\r\n    return df.rolling(window, min_periods=1).mean() if window > 1 else df\r\n\r\ndef normalize_01(df: pd.DataFrame) -> pd.DataFrame:\r\n    def _scale(s: pd.Series) -> pd.Series:\r\n        mn, mx = s.min(), s.max()\r\n        return (s - mn) / (mx - mn) if pd.notna(mn) and pd.notna(mx) and mx != mn else s * 0\r\n    return df.apply(_scale, axis=0)\r\n\r\n# ---------------- Sidebar: data & options ----------------\r\nwith st.sidebar:\r\n    st.header(\"Data\")\r\n    uploaded = st.file_uploader(\"Upload CSV\", type=[\"csv\"])\r\n    fallback_path = Path(\"data\") / \"weather.csv\"\r\n\r\n    if uploaded is not None:\r\n        df = read_csv_safely(uploaded)\r\n        source_label = \"Uploaded file\"\r\n    elif fallback_path.exists():\r\n        df = read_csv_safely(fallback_path)\r\n        source_label = f\"{fallback_path}\"\r\n    else:\r\n        st.info(\"No file uploaded and no local CSV found — using demo data.\")\r\n        df = demo_weather()\r\n        source_label = \"Demo dataset\"\r\n\r\n    if df is None or df.empty:\r\n        st.error(\"No data to show.\")\r\n        st.stop()\r\n\r\n    st.caption(f\"Source: **{source_label}** • Rows: **{len(df):,}** • Columns: **{len(df.columns)}**\")\r\n\r\n    dt_cols = find_datetime_columns(df)\r\n    if dt_cols:\r\n        date_col = st.selectbox(\"Date column\", dt_cols, index=0)\r\n    else:\r\n        st.warning(\"No datetime column detected. You can still chart numeric columns.\")\r\n        # Optional manual parse\r\n        try_col = st.selectbox(\"Try parsing this column as dates (optional)\", [\"<none>\"] + df.columns.tolist(), index=0)\r\n        date_col = None\r\n        if try_col != \"<none>\":\r\n            try:\r\n                df[try_col] = pd.to_datetime(df[try_col], errors=\"coerce\")\r\n                if df[try_col].notna().any():\r\n                    date_col = try_col\r\n                    st.success(f\"Parsed '{try_col}' as datetime.\")\r\n                else:\r\n                    st.error(f\"Parsing '{try_col}' produced all NaT.\")\r\n            except Exception as e:\r\n                st.error(f\"Failed to parse '{try_col}' as datetime: {e}\")\r\n\r\n    st.header(\"Chart Options\")\r\n    num_cols = numeric_columns(df)\r\n    if not num_cols:\r\n        st.warning(\"No numeric columns found.\")\r\n    selected_cols = st.multiselect(\"Metrics to plot\", options=num_cols, default=num_cols[:1])\r\n\r\n    freq = st.selectbox(\"Resample (if dated)\", options=[\"Off\", \"D (Daily)\", \"W (Weekly)\", \"M (Monthly)\"], index=0)\r\n    freq_map = {\"Off\": None, \"D (Daily)\": \"D\", \"W (Weekly)\": \"W\", \"M (Monthly)\": \"M\"}\r\n    agg = st.radio(\"Aggregation\", [\"Mean\", \"Sum\"], horizontal=True, index=0)\r\n\r\n    roll = st.slider(\"Rolling average window\", min_value=1, max_value=60, value=1, help=\"Applies after resampling.\")\r\n    norm = st.checkbox(\"Normalize each series to 0–1\", value=False)\r\n    chart_kind = st.selectbox(\"Chart type\", [\"Line\", \"Area\", \"Bar\"], index=0)\r\n\r\n# ---------------- Raw data ----------------\r\nst.subheader(\"Raw Data\")\r\nst.caption(\"Sort columns, use the search box, or scroll. (Editing disabled for safety.)\")\r\nst.dataframe(df, width=\"stretch\")\r\n\r\n# ---------------- Summary ----------------\r\nst.subheader(\"Summary Statistics\")\r\nif num_cols:\r\n    summary = df[num_cols].describe()  # pandas-version-safe\r\n    st.dataframe(summary, width=\"stretch\")\r\nelse:\r\n    st.info(\"No numeric columns to summarize.\")\r\n\r\n# Quick KPIs (stringify dates to satisfy st.metric)\r\nk1, k2, k3 = st.columns(3)\r\nk1.metric(\"Rows\", f\"{len(df):,}\")\r\nif 'date_col' in locals() and date_col:\r\n    dmin = pd.to_datetime(df[date_col].min())\r\n    dmax = pd.to_datetime(df[date_col].max())\r\n    start_str = str(dmin.date()) if pd.notna(dmin) else \"—\"\r\n    end_str = str(dmax.date()) if pd.notna(dmax) else \"—\"\r\n    k2.metric(\"Start\", start_str)\r\n    k3.metric(\"End\", end_str)\r\nelse:\r\n    k2.metric(\"Datetime\", \"Not set\")\r\n    k3.metric(\"—\", \"—\")\r\n\r\n# ---------------- Filtering ----------------\r\ndf_view = df.copy()\r\nif 'date_col' in locals() and date_col:\r\n    st.subheader(\"Filter\")\r\n    df_view, start_ts, end_ts = filter_by_date(df_view, date_col)\r\n    if start_ts and end_ts:\r\n        st.success(f\"Showing {len[df_view):,} rows from {start_ts.date()} to {end_ts.date()}.\")\r\n    else:\r\n        st.info(f\"Showing all {len(df_view):,} rows.\")\r\n\r\n# ---------------- Chart ----------------\r\nst.subheader(\"Chart\")\r\nif not selected_cols:\r\n    st.warning(\"Pick at least one metric in the sidebar to plot.\")\r\nelse:\r\n    if 'date_col' in locals() and date_col:\r\n        series_df = resample_df(df_view, date_col, selected_cols, freq_map[freq], agg)\r\n    else:\r\n        series_df = df_view[selected_cols]\r\n\r\n    if series_df.empty:\r\n        st.warning(\"Nothing to plot with the current filters.\")\r\n    else:\r\n        if roll > 1:\r\n            series_df = apply_rolling(series_df, roll)\r\n        if norm:\r\n            series_df = normalize_01(series_df)\r\n\r\n        # Let Streamlit auto-size charts; don't pass width=\"stretch\" (Altair expects a number)\r\n        if chart_kind == \"Line\":\r\n            st.line_chart(series_df)\r\n        elif chart_kind == \"Area\":\r\n            st.area_chart(series_df)\r\n        else:\r\n            st.bar_chart(series_df)\r\n\r\n# ---------------- Export ----------------\r\nst.subheader(\"Export\")\r\ncsv_bytes = df_view.to_csv(index=False).encode(\"utf-8\")\r\nst.download_button(\r\n    \"Download current view as CSV\",\r\n    data=csv_bytes,\r\n    file_name=\"filtered.csv\",\r\n    mime=\"text/csv\",\r\n)\r\nst.caption(\"Export respects the current date filter (if any).\")\r\n\r\n# ---------------- Footer tip ----------------\r\nst.caption(\"Tip: Upload any CSV in the sidebar. If your dates aren’t recognized, choose a column to parse as datetime.\")</pre>\r\n        <p><em>Note:</em> HTML escapes were added only where needed for safe rendering.</p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "2c4b9781-0d2a-4213-83c4-22ac4cddac9b"
        },
        {
          "kind": "article",
          "order": 7,
          "title": "Organize Your App into Pages",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Streamlit • Organize Your App into Pages</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Steps === */\r\n.step { border-left: 4px solid #000; padding-left: 12px; margin: 14px 0; }\r\n.step h3 { margin: 0 0 6px; font-size: 18px; color: #000; }\r\n\r\n/* === Code / terminal === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 14px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n\r\n/* === Video embed (responsive) === */\r\n.video-embed { position: relative; width: 100%; aspect-ratio: 16 / 9; }\r\n.video-embed iframe { position: absolute; inset: 0; width: 100% !important; height: 100% !important; border: 0; border-radius: 12px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO (Top) -->\r\n    <section class=\"section-card\" id=\"video\">\r\n      <div class=\"banner\">\r\n        <small>Video</small>\r\n        <h1>Organize Your App into Pages — Walkthrough</h1>\r\n        <p>Watch first, then copy the code below.</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"video-embed\">\r\n          <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/g-Lth4kjsYc\" title=\"Organize Your App into Pages\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Streamlit UX</small>\r\n        <h1>Organize Your Streamlit App into Pages</h1>\r\n        <p>Navigation in the sidebar → Home • Visualization • Data View</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          You can improve user experience by splitting your Streamlit app into **pages** using a simple\r\n          sidebar radio selector. The script below adds a <strong>Home</strong> overview, a rich\r\n          <strong>Visualization</strong> page, and a flexible <strong>Data View</strong> page — all within one file.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- HOW TO RUN (Codespaces) -->\r\n    <section class=\"section-card\" id=\"run\">\r\n      <div class=\"banner\">\r\n        <small>Run</small>\r\n        <h1>Use This in Your Repo (Codespaces)</h1>\r\n        <p>Replace app.py → install → run on a fixed port</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>1) Replace your app</h3>\r\n          <p>Open your Codespace and replace <span class=\"inline\">app.py</span> with the code below.</p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>2) Dependencies</h3>\r\n          <p>Ensure <span class=\"inline\">requirements.txt</span> contains at least:</p>\r\n<pre>streamlit\r\npandas\r\nnumpy</pre>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>3) Install & run</h3>\r\n<pre>pip install -r requirements.txt\r\nstreamlit run app.py --server.address 0.0.0.0 --server.port 8000</pre>\r\n          <p>Then click <strong>Open in Browser</strong> (or use the Ports panel → port <strong>8000</strong>).</p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- APP CODE (EXACT) -->\r\n    <section class=\"section-card\" id=\"code\">\r\n      <div class=\"banner\">\r\n        <small>Code</small>\r\n        <h1>app.py (Multi-Page — Exact Code)</h1>\r\n        <p>Paste this as-is into your repository’s app.py</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>import io\r\nfrom pathlib import Path\r\nfrom typing import Optional, Tuple, List\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\nimport streamlit as st\r\n\r\n# =========================\r\n# Page setup\r\n# =========================\r\nst.set_page_config(page_title=\"CSV Explorer\", page_icon=\"📈\", layout=\"centered\")\r\n\r\n# Defaults\r\nFALLBACK_PATH = Path(\"data\") / \"weather.csv\"\r\n\r\n\r\n# =========================\r\n# Cached loaders & helpers\r\n# =========================\r\n@st.cache_data(show_spinner=False)\r\ndef read_csv_from_bytes(content: bytes) -> Optional[pd.DataFrame]:\r\n    \"\"\"Read CSV from uploaded bytes; coerce obvious datetime columns.\"\"\"\r\n    try:\r\n        df = pd.read_csv(io.BytesIO(content))\r\n        df = coerce_common_datetime_cols(df)\r\n        return df\r\n    except Exception as e:\r\n        st.error(f\"Could not read uploaded CSV: {e}\")\r\n        return None\r\n\r\n\r\n@st.cache_data(show_spinner=False)\r\ndef read_csv_from_path(path_str: str) -> Optional[pd.DataFrame]:\r\n    \"\"\"Read CSV from local path; coerce obvious datetime columns.\"\"\"\r\n    try:\r\n        df = pd.read_csv(path_str)\r\n        df = coerce_common_datetime_cols(df)\r\n        return df\r\n    except Exception as e:\r\n        st.error(f\"Could not read CSV at {path_str}: {e}\")\r\n        return None\r\n\r\n\r\n@st.cache_data(show_spinner=False)\r\ndef demo_dataset() -> pd.DataFrame:\r\n    \"\"\"Synthetic time-series if no file is provided.\"\"\"\r\n    dates = pd.date_range(\"2024-01-01\", periods=180, freq=\"D\")\r\n    x = np.arange(len(dates))\r\n    return pd.DataFrame(\r\n        {\r\n            \"Date\": dates,\r\n            \"TempC\": 15 + 7 * np.sin(x / 10) + np.random.normal(0, 1.4, len(dates)),\r\n            \"Rain_mm\": np.clip(np.random.gamma(1.8, 1.0, len(dates)) - 1.0, 0, None),\r\n            \"Wind_kmh\": 12 + np.random.normal(0, 3, len(dates)),\r\n        }\r\n    )\r\n\r\n\r\ndef coerce_common_datetime_cols(df: pd.DataFrame) -> pd.DataFrame:\r\n    \"\"\"Coerce columns named like dates into datetime (nonfatal).\"\"\"\r\n    for col in df.columns:\r\n        name = str(col).lower()\r\n        if name in (\"date\", \"time\", \"timestamp\", \"datetime\"):\r\n            df[col] = pd.to_datetime(df[col], errors=\"coerce\")\r\n    return df\r\n\r\n\r\ndef find_datetime_columns(df: pd.DataFrame) -> List[str]:\r\n    return [c for c in df.columns if pd.api.types.is_datetime64_any_dtype(df[c])]\r\n\r\n\r\ndef numeric_columns(df: pd.DataFrame) -> List[str]:\r\n    return df.select_dtypes(include=\"number\").columns.tolist()\r\n\r\n\r\ndef filter_by_date(\r\n    df: pd.DataFrame, date_col: str\r\n) -> Tuple[pd.DataFrame, Optional[pd.Timestamp], Optional[pd.Timestamp]]:\r\n    dmin, dmax = df[date_col].min(), df[date_col].max()\r\n    if pd.isna(dmin) or pd.isna(dmax):\r\n        st.info(\"Date column contains invalid values; showing all rows.\")\r\n        return df, None, None\r\n    start, end = st.date_input(\r\n        \"Date range\",\r\n        value=(dmin.date(), dmax.date()),\r\n        min_value=dmin.date(),\r\n        max_value=dmax.date(),\r\n        key=\"date_range\",\r\n    )\r\n    if start and end:\r\n        mask = (df[date_col] >= pd.to_datetime(start)) & (df[date_col] <= pd.to_datetime(end))\r\n        return df.loc[mask].copy(), pd.to_datetime(start), pd.to_datetime(end)\r\n    return df, None, None\r\n\r\n\r\ndef resample_df(df: pd.DataFrame, date_col: str, cols: List[str], freq: Optional[str], how: str) -> pd.DataFrame:\r\n    if not freq:\r\n        return df.set_index(date_col)[cols].sort_index()\r\n    agg = \"mean\" if how == \"Mean\" else \"sum\"\r\n    return df.set_index(date_col)[cols].sort_index().resample(freq).agg(agg)\r\n\r\n\r\ndef apply_rolling(df: pd.DataFrame, window: int) -> pd.DataFrame:\r\n    return df.rolling(window, min_periods=1).mean() if window and window > 1 else df\r\n\r\n\r\ndef normalize_01(df: pd.DataFrame) -> pd.DataFrame:\r\n    def _scale(s: pd.Series) -> pd.Series:\r\n        mn, mx = s.min(), s.max()\r\n        return (s - mn) / (mx - mn) if pd.notna(mn) and pd.notna(mx) and mx != mn else s * 0\r\n    return df.apply(_scale, axis=0)\r\n\r\n\r\n# =========================\r\n# Sidebar: navigation & data source\r\n# =========================\r\nwith st.sidebar:\r\n    st.header(\"🔀 Navigation\")\r\n    page = st.radio(\"Go to\", [\"Home\", \"Visualization\", \"Data View\"], index=0)\r\n\r\n    st.header(\"🗂️ Data\")\r\n    uploaded = st.file_uploader(\"Upload CSV\", type=[\"csv\"])\r\n    source_label = \"\"\r\n\r\n    if uploaded is not None:\r\n        content = uploaded.read()  # bytes\r\n        df = read_csv_from_bytes(content)\r\n        source_label = \"Uploaded file\"\r\n    elif FALLBACK_PATH.exists():\r\n        df = read_csv_from_path(str(FALLBACK_PATH))\r\n        source_label = f\"{FALLBACK_PATH}\"\r\n    else:\r\n        st.info(\"No file uploaded and no local CSV found — using demo data.\")\r\n        df = demo_dataset()\r\n        source_label = \"Demo dataset\"\r\n\r\n    if df is None or df.empty:\r\n        st.error(\"No data to show.\")\r\n        st.stop()\r\n\r\n    st.caption(f\"**Source:** {source_label}  •  **Rows:** {len(df):,}  •  **Columns:** {len(df.columns)}\")\r\n\r\n    # Date column management\r\n    dt_cols = find_datetime_columns(df)\r\n    date_col: Optional[str] = None\r\n    if dt_cols:\r\n        date_col = st.selectbox(\"Date column\", dt_cols, index=0)\r\n    else:\r\n        st.warning(\"No datetime column detected.\")\r\n        try_col = st.selectbox(\"Try parsing a column as dates (optional)\", [\"<none>\"] + df.columns.tolist(), index=0)\r\n        if try_col != \"<none>\":\r\n            try:\r\n                df[try_col] = pd.to_datetime(df[try_col], errors=\"coerce\")\r\n                if df[try_col].notna().any():\r\n                    date_col = try_col\r\n                    st.success(f\"Parsed '{try_col}' as datetime.\")\r\n                else:\r\n                    st.error(f\"Parsing '{try_col}' produced all NaT.\")\r\n            except Exception as e:\r\n                st.error(f\"Failed to parse '{try_col}' as datetime: {e}\")\r\n\r\n    # Page-specific sidebar controls\r\n    if page == \"Visualization\":\r\n        st.header(\"📊 Chart Options\")\r\n        num_cols = numeric_columns(df)\r\n        if not num_cols:\r\n            st.warning(\"No numeric columns found.\")\r\n            selected_cols = []\r\n        else:\r\n            selected_cols = st.multiselect(\"Metrics to plot\", options=num_cols, default=num_cols[:1])\r\n\r\n        freq_choice = st.selectbox(\"Resample (if dated)\", options=[\"Off\", \"D (Daily)\", \"W (Weekly)\", \"M (Monthly)\"], index=0)\r\n        freq_map = {\"Off\": None, \"D (Daily)\": \"D\", \"W (Weekly)\": \"W\", \"M (Monthly)\": \"M\"}\r\n        agg = st.radio(\"Aggregation\", [\"Mean\", \"Sum\"], horizontal=True, index=0)\r\n\r\n        roll = st.slider(\"Rolling average window\", min_value=1, max_value=60, value=1, help=\"Applies after resampling.\")\r\n        norm = st.checkbox(\"Normalize each series to 0–1\", value=False)\r\n        chart_kind = st.selectbox(\"Chart type\", [\"Line\", \"Area\", \"Bar\"], index=0)\r\n\r\n    if page == \"Data View\":\r\n        st.header(\"🔎 Filter & View\")\r\n        # Quick text filter\r\n        quick_filter = st.text_input(\"Quick text filter (matches any column)\", value=\"\")\r\n        # Column selector\r\n        col_choices = st.multiselect(\"Columns to display (blank = all)\", options=df.columns.tolist(), default=[])\r\n\r\n        enable_edit = st.checkbox(\"Enable editing (local only)\", value=False)\r\n\r\n    # Cache tools\r\n    st.header(\"🧹 Maintenance\")\r\n    if st.button(\"Clear cache\"):\r\n        st.cache_data.clear()\r\n        st.success(\"Cache cleared. Rerun to reload data.\")\r\n\r\n\r\n# =========================\r\n# Page: Home\r\n# =========================\r\nif page == \"Home\":\r\n    st.title(\"🏠 Home\")\r\n    st.caption(\"Overview of your dataset and quick stats.\")\r\n\r\n    # KPIs\r\n    k1, k2, k3, k4 = st.columns(4)\r\n    k1.metric(\"Rows\", f\"{len(df):,}\")\r\n    k2.metric(\"Columns\", f\"{len(df.columns):,}\")\r\n    n_num = len(numeric_columns(df))\r\n    k3.metric(\"Numeric cols\", f\"{n_num:,}\")\r\n    if date_col:\r\n        dmin = pd.to_datetime(df[date_col].min())\r\n        dmax = pd.to_datetime(df[date_col].max())\r\n        k4.metric(\"Date span\", f\"{str(dmin.date()) if pd.notna(dmin) else '—'} → {str(dmax.date()) if pd.notna(dmax) else '—'}\")\r\n    else:\r\n        k4.metric(\"Date column\", \"Not set\")\r\n\r\n    st.subheader(\"Preview\")\r\n    st.dataframe(df.head(50), width=\"stretch\")\r\n\r\n    st.subheader(\"Schema\")\r\n    schema = pd.DataFrame(\r\n        {\r\n            \"dtype\": df.dtypes.astype(str),\r\n            \"non_null\": df.notna().sum(),\r\n            \"nulls\": df.isna().sum(),\r\n            \"unique\": df.nunique(dropna=True),\r\n        }\r\n    )\r\n    st.dataframe(schema, width=\"stretch\")\r\n\r\n    st.markdown(\r\n        \"\"\"\r\n**Tips**\r\n- Use the sidebar to switch pages.\r\n- If your dates weren’t auto-detected, choose a column to parse.\r\n- Upload a new CSV any time; the app will reload automatically.\r\n        \"\"\"\r\n    )\r\n\r\n\r\n# =========================\r\n# Page: Visualization\r\n# =========================\r\nelif page == \"Visualization\":\r\n    st.title(\"📊 Visualization\")\r\n\r\n    # Guardrails\r\n    num_cols_all = numeric_columns(df)\r\n    if not num_cols_all:\r\n        st.warning(\"No numeric columns found to plot. Upload a CSV with numeric data.\")\r\n        st.stop()\r\n\r\n    # Filter by date if available\r\n    df_view = df.copy()\r\n    has_dt = bool(date_col)\r\n    if has_dt:\r\n        st.subheader(\"Filter\")\r\n        df_view, start_ts, end_ts = filter_by_date(df_view, date_col)\r\n        if start_ts and end_ts:\r\n            st.success(f\"Showing {len(df_view):,} rows from {start_ts.date()} to {end_ts.date()}.\")\r\n        else:\r\n            st.info(f\"Showing all {len(df_view):,} rows.\")\r\n\r\n    # Chart config from sidebar (already defined)\r\n    selected_cols = locals().get(\"selected_cols\", num_cols_all[:1])\r\n    freq_choice = locals().get(\"freq_choice\", \"Off\")\r\n    freq_map = {\"Off\": None, \"D (Daily)\": \"D\", \"W (Weekly)\": \"W\", \"M (Monthly)\": \"M\"}\r\n    agg = locals().get(\"agg\", \"Mean\")\r\n    roll = int(locals().get(\"roll\", 1))\r\n    norm = bool(locals().get(\"norm\", False))\r\n    chart_kind = locals().get(\"chart_kind\", \"Line\")\r\n\r\n    if not selected_cols:\r\n        st.warning(\"Pick at least one metric in the sidebar to plot.\")\r\n        st.stop()\r\n\r\n    # Build series\r\n    if has_dt:\r\n        series_df = resample_df(df_view, date_col, selected_cols, freq_map[freq_choice], agg)\r\n    else:\r\n        series_df = df_view[selected_cols]\r\n\r\n    if series_df.empty:\r\n        st.warning(\"Nothing to plot with the current settings.\")\r\n        st.stop()\r\n\r\n    if roll > 1:\r\n        series_df = apply_rolling(series_df, roll)\r\n    if norm:\r\n        series_df = normalize_01(series_df)\r\n\r\n    # Render chart (let Streamlit auto-size to avoid Altair width schema issues)\r\n    st.subheader(\"Chart\")\r\n    if chart_kind == \"Line\":\r\n        st.line_chart(series_df)\r\n    elif chart_kind == \"Area\":\r\n        st.area_chart(series_df)\r\n    else:\r\n        st.bar_chart(series_df)\r\n\r\n    # Export chart data\r\n    st.subheader(\"Export chart data\")\r\n    csv_bytes = series_df.reset_index().to_csv(index=False).encode(\"utf-8\")\r\n    st.download_button(\r\n        \"Download chart data as CSV\",\r\n        data=csv_bytes,\r\n        file_name=\"chart_data.csv\",\r\n        mime=\"text/csv\",\r\n    )\r\n\r\n\r\n# =========================\r\n# Page: Data View\r\n# =========================\r\nelse:\r\n    st.title(\"🧾 Data View\")\r\n\r\n    df_view = df.copy()\r\n\r\n    # Date filter (if available)\r\n    if date_col:\r\n        st.subheader(\"Date Filter\")\r\n        df_view, start_ts, end_ts = filter_by_date(df_view, date_col)\r\n        if start_ts and end_ts:\r\n            st.success(f\"Rows from {start_ts.date()} to {end_ts.date()}: {len(df_view):,}\")\r\n\r\n    # Quick text filter across all columns\r\n    quick_filter = locals().get(\"quick_filter\", \"\")\r\n    if quick_filter:\r\n        q = quick_filter.strip().lower()\r\n        mask = df_view.astype(str).apply(lambda col: col.str.lower().str.contains(q, na=False))\r\n        df_view = df_view[mask.any(axis=1)]\r\n\r\n    # Column subset\r\n    col_choices = locals().get(\"col_choices\", [])\r\n    if col_choices:\r\n        missing = [c for c in col_choices if c not in df_view.columns]\r\n        if missing:\r\n            st.warning(f\"Some selected columns are missing: {missing}\")\r\n        else:\r\n            df_view = df_view[col_choices]\r\n\r\n    # Editable or read-only grid\r\n    enable_edit = bool(locals().get(\"enable_edit\", False))\r\n    st.subheader(\"Table\")\r\n    if enable_edit:\r\n        st.caption(\"Editing is local to this session. Use the download button to export your changes.\")\r\n        edited = st.data_editor(df_view, num_rows=\"dynamic\")\r\n        df_display = edited\r\n    else:\r\n        st.caption(\"Read-only view. Use the sidebar to filter and select columns.\")\r\n        st.dataframe(df_view, width=\"stretch\")\r\n        df_display = df_view\r\n\r\n    # Export\r\n    st.subheader(\"Export\")\r\n    out_bytes = df_display.to_csv(index=False).encode(\"utf-8\")\r\n    st.download_button(\r\n        \"Download current view as CSV\",\r\n        data=out_bytes,\r\n        file_name=\"data_view.csv\",\r\n        mime=\"text/csv\",\r\n    )\r\n\r\n    st.caption(\"Tip: Use the sidebar for quick text filtering and column selection.\")</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "6361aec5-0347-49bd-8e66-107b6c4db009"
        }
      ]
    },
    {
      "order": 3,
      "title": "Module 3: Modularity",
      "lessons": [
        {
          "kind": "article",
          "order": 1,
          "title": "Modularity in Coding • The ISS Analogy",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Modularity in Coding • The ISS Analogy</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Image === */\r\n.img-full { display: block; width: 100%; height: auto; border-bottom: 1px solid #EBEBEB; margin-top: 12px; border-radius: 10px; }\r\n\r\n/* === Highlight boxes === */\r\n.quick-grid { display: grid; gap: 14px; margin: 14px 0; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fafafa; }\r\n.box h3 { margin: 0 0 6px; font-size: 17px; color: #000; }\r\n.box p { margin: 0; font-size: 15px; }\r\n\r\n/* Responsive */\r\n@media (min-width: 720px) { .quick-grid { grid-template-columns: repeat(2, 1fr); } }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Concepts</small>\r\n        <h1>Modularity in Coding</h1>\r\n        <p>Why modular design solves complexity in AI-assisted development</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          When we develop code with AI, we often hit a limitation: our scripts can grow large and unwieldy.  \r\n          Each time we want to improve them, it becomes harder to communicate the entire script back to the AI.  \r\n          The solution is <strong>modularity</strong>.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- ISS ANALOGY -->\r\n    <section class=\"section-card\" id=\"analogy\">\r\n      <div class=\"banner\">\r\n        <small>Analogy</small>\r\n        <h1>The International Space Station</h1>\r\n        <p>A powerful metaphor for modularity</p>\r\n      </div>\r\n      <img\r\n        class=\"img-full\"\r\n        src=\"https://images-assets.nasa.gov/image/iss056e201248/iss056e201248~large.jpg\"\r\n        alt=\"International Space Station from NASA\"\r\n      />\r\n      <div class=\"body\">\r\n        <p>\r\n          Think of the <strong>International Space Station (ISS)</strong>.  \r\n          It wasn’t built all at once. Instead, it was assembled over time from multiple modules —\r\n          each designed for a specific function: research, power, life support, docking.  \r\n          These modules integrate seamlessly, forming a larger, functional whole.\r\n        </p>\r\n        <p>\r\n          In the same way, code can (and should) be built from independent modules:  \r\n          smaller, focused pieces that do one thing well, and can be integrated into a larger application.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- MODULARITY BENEFITS -->\r\n    <section class=\"section-card\" id=\"benefits\">\r\n      <div class=\"banner\">\r\n        <small>Benefits</small>\r\n        <h1>Why Modularity Matters</h1>\r\n        <p>Scaling both horizontally and vertically</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"quick-grid\">\r\n          <div class=\"box\">\r\n            <h3>🔄 Reusability</h3>\r\n            <p>Modules can be reused across projects — no need to reinvent the wheel.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h3>📦 Maintainability</h3>\r\n            <p>Fixes and improvements are easier to apply in smaller, isolated components.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h3>📈 Scalability</h3>\r\n            <p>Scale <em>horizontally</em> by adding more modules, or <em>vertically</em> by deepening each module’s capabilities.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h3>🤝 Collaboration</h3>\r\n            <p>Different team members (or even AIs) can work on separate modules independently, then integrate them.</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- SUMMARY -->\r\n    <section class=\"section-card\" id=\"summary\">\r\n      <div class=\"banner\">\r\n        <small>Summary</small>\r\n        <h1>The Path Forward</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          Modularity is the antidote to complexity.  \r\n          Just like the ISS was built piece by piece, your software should be composed of modules —\r\n          each handling one responsibility, all working together.  \r\n          With modularity, AI-assisted coding becomes manageable, scalable, and sustainable.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "715722d7-ba49-43d0-a66a-063e0f1a02e5"
        },
        {
          "kind": "article",
          "order": 2,
          "title": "Streamlit Modularity • Minimal app.py + pages",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Streamlit Modularity • Minimal app.py + pages/</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1000px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 14px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n\r\n/* === Video embed (added) === */\r\n.video-embed { position: relative; border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden; box-shadow: 0 1px 2px rgba(0,0,0,.04); }\r\n.video-embed::before { content: \"\"; display: block; padding-top: 56.25%; } /* 16:9 */\r\n.video-embed iframe { position: absolute; inset: 0; width: 100%; height: 100%; border: 0; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO (added on top) -->\r\n    <section class=\"section-card\" id=\"video\">\r\n      <div class=\"banner\">\r\n        <small>Video</small>\r\n        <h1>Watch: Streamlit Modularity • Minimal app.py + pages</h1>\r\n        <p>Quick walkthrough of the modular layout and pages/ structure</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"video-embed\">\r\n          <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/Zlcix_RR1wI\" title=\"Streamlit Modularity • Minimal app.py + pages\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Streamlit • Modularity</small>\r\n        <h1>Minimal app.py + pages/ (Prompt-Driven Split)</h1>\r\n        <p>Keep app.py tiny, move features into pages/, share utilities in lib_data.py</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          same script that we had before which was three pages but in one script, we write in chatgpt to make it modular by a prompt like below<br>\r\n          <span class=\"inline\">'re-write the script to split to be a minimal app.py and the rest pages in the pages directory'</span>\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- REPO LAYOUT -->\r\n    <section class=\"section-card\" id=\"layout\">\r\n      <div class=\"banner\">\r\n        <small>Structure</small>\r\n        <h1>Repository Layout</h1>\r\n        <p>Exactly as produced by your prompt</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>.\r\n├─ app.py\r\n├─ lib_data.py\r\n└─ pages/\r\n   ├─ 1_Home.py\r\n   ├─ 2_Visualization.py\r\n   └─ 3_Data_View.py\r\n</pre>\r\n        <p>\r\n          Streamlit auto-discovers files under <span class=\"inline\">pages/</span> and shows them in the sidebar.\r\n          The numeric prefixes (<strong>1_</strong>, <strong>2_</strong>, <strong>3_</strong>) control the order.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- HOW TO RUN -->\r\n    <section class=\"section-card\" id=\"run\">\r\n      <div class=\"banner\">\r\n        <small>Run</small>\r\n        <h1>Run in Codespaces</h1>\r\n        <p>Install dependencies → run Streamlit → open port</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>In your Codespaces terminal:</p>\r\n<pre>pip install streamlit pandas numpy\r\nstreamlit run app.py --server.address 0.0.0.0 --server.port 8000</pre>\r\n        <p>Then click <strong>Open in Browser</strong> (or use the Ports panel → port <strong>8000</strong>).</p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- app.py -->\r\n    <section class=\"section-card\" id=\"app\">\r\n      <div class=\"banner\">\r\n        <small>Code</small>\r\n        <h1>app.py (Minimal)</h1>\r\n        <p>Landing page only — pages live in /pages</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre># app.py\r\nimport streamlit as st\r\n\r\nst.set_page_config(page_title=\"CSV Explorer\", page_icon=\"📈\", layout=\"centered\")\r\n\r\nst.title(\"CSV Explorer\")\r\nst.caption(\"Use the left sidebar to open pages: Home, Visualization, Data View.\")\r\nst.markdown(\r\n    \"- Start on **Home** to load a CSV (or use the demo dataset).\\n\"\r\n    \"- Then try **Visualization** and **Data View**.\"\r\n)\r\n</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- lib_data.py -->\r\n    <section class=\"section-card\" id=\"lib\">\r\n      <div class=\"banner\">\r\n        <small>Code</small>\r\n        <h1>lib_data.py (Shared Utilities)</h1>\r\n        <p>Loaders, parsers, filters, resampling, sidebars</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre># lib_data.py\r\nimport io\r\nfrom pathlib import Path\r\nfrom typing import Optional, Tuple, List\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\nimport streamlit as st\r\n\r\nFALLBACK_PATH = Path(\"data\") / \"weather.csv\"\r\nFREQ_MAP = {\"Off\": None, \"D (Daily)\": \"D\", \"W (Weekly)\": \"W\", \"M (Monthly)\": \"M\"}\r\n\r\n# ---------- Loaders ----------\r\n@st.cache_data(show_spinner=False)\r\ndef read_csv_from_bytes(content: bytes) -> Optional[pd.DataFrame]:\r\n    try:\r\n        df = pd.read_csv(io.BytesIO(content))\r\n        return coerce_common_datetime_cols(df)\r\n    except Exception as e:\r\n        st.error(f\"Could not read uploaded CSV: {e}\")\r\n        return None\r\n\r\n@st.cache_data(show_spinner=False)\r\ndef read_csv_from_path(path_str: str) -> Optional[pd.DataFrame]:\r\n    try:\r\n        df = pd.read_csv(path_str)\r\n        return coerce_common_datetime_cols(df)\r\n    except Exception as e:\r\n        st.error(f\"Could not read CSV at {path_str}: {e}\")\r\n        return None\r\n\r\n@st.cache_data(show_spinner=False)\r\ndef demo_dataset() -> pd.DataFrame:\r\n    dates = pd.date_range(\"2024-01-01\", periods=180, freq=\"D\")\r\n    x = np.arange(len(dates))\r\n    return pd.DataFrame(\r\n        {\r\n            \"Date\": dates,\r\n            \"TempC\": 15 + 7 * np.sin(x / 10) + np.random.normal(0, 1.4, len(dates)),\r\n            \"Rain_mm\": np.clip(np.random.gamma(1.8, 1.0, len(dates)) - 1.0, 0, None),\r\n            \"Wind_kmh\": 12 + np.random.normal(0, 3, len(dates)),\r\n        }\r\n    )\r\n\r\n# ---------- Data utilities ----------\r\ndef coerce_common_datetime_cols(df: pd.DataFrame) -> pd.DataFrame:\r\n    for col in df.columns:\r\n        name = str(col).lower()\r\n        if name in (\"date\", \"time\", \"timestamp\", \"datetime\"):\r\n            df[col] = pd.to_datetime(df[col], errors=\"coerce\")\r\n    return df\r\n\r\ndef find_datetime_columns(df: pd.DataFrame) -> List[str]:\r\n    return [c for c in df.columns if pd.api.types.is_datetime64_any_dtype(df[c])]\r\n\r\ndef numeric_columns(df: pd.DataFrame) -> List[str]:\r\n    return df.select_dtypes(include=\"number\").columns.tolist()\r\n\r\ndef filter_by_date(\r\n    df: pd.DataFrame, date_col: str, key_prefix: str = \"range_\"\r\n) -> Tuple[pd.DataFrame, Optional[pd.Timestamp], Optional[pd.Timestamp]]:\r\n    dmin, dmax = df[date_col].min(), df[date_col].max()\r\n    if pd.isna(dmin) or pd.isna(dmax):\r\n        st.info(\"Date column contains invalid values; showing all rows.\")\r\n        return df, None, None\r\n    start, end = st.date_input(\r\n        \"Date range\",\r\n        value=(dmin.date(), dmax.date()),\r\n        min_value=dmin.date(),\r\n        max_value=dmax.date(),\r\n        key=f\"{key_prefix}date_range\",\r\n    )\r\n    if start and end:\r\n        mask = (df[date_col] >= pd.to_datetime(start)) & (df[date_col] <= pd.to_datetime(end))\r\n        return df.loc[mask].copy(), pd.to_datetime(start), pd.to_datetime(end)\r\n    return df, None, None\r\n\r\ndef resample_df(df: pd.DataFrame, date_col: str, cols: List[str], freq: Optional[str], how: str) -> pd.DataFrame:\r\n    if not freq:\r\n        return df.set_index(date_col)[cols].sort_index()\r\n    agg = \"mean\" if how == \"Mean\" else \"sum\"\r\n    return df.set_index(date_col)[cols].sort_index().resample(freq).agg(agg)\r\n\r\ndef apply_rolling(df: pd.DataFrame, window: int) -> pd.DataFrame:\r\n    return df.rolling(window, min_periods=1).mean() if window and window > 1 else df\r\n\r\ndef normalize_01(df: pd.DataFrame) -> pd.DataFrame:\r\n    def _scale(s: pd.Series) -> pd.Series:\r\n        mn, mx = s.min(), s.max()\r\n        return (s - mn) / (mx - mn) if pd.notna(mn) and pd.notna(mx) and mx != mn else s * 0\r\n    return df.apply(_scale, axis=0)\r\n\r\n# ---------- Sidebars ----------\r\ndef sidebar_data_source() -> tuple[pd.DataFrame, Optional[str], str]:\r\n    st.sidebar.header(\"🗂️ Data\")\r\n    uploaded = st.sidebar.file_uploader(\"Upload CSV\", type=[\"csv\"], key=\"uploader\")\r\n    if uploaded is not None:\r\n        df = read_csv_from_bytes(uploaded.read())\r\n        source_label = \"Uploaded file\"\r\n    elif FALLBACK_PATH.exists():\r\n        df = read_csv_from_path(str(FALLBACK_PATH))\r\n        source_label = f\"{FALLBACK_PATH}\"\r\n    else:\r\n        st.sidebar.info(\"No file uploaded and no local CSV found — using demo data.\")\r\n        df = demo_dataset()\r\n        source_label = \"Demo dataset\"\r\n\r\n    if df is None or df.empty:\r\n        st.sidebar.error(\"No data to show.\")\r\n        st.stop()\r\n\r\n    st.sidebar.caption(f\"**Source:** {source_label}  •  **Rows:** {len(df):,}  •  **Columns:** {len(df.columns)}\")\r\n\r\n    # Date column manage/parse\r\n    dt_cols = find_datetime_columns(df)\r\n    date_col: Optional[str] = None\r\n    if dt_cols:\r\n        date_col = st.sidebar.selectbox(\"Date column\", dt_cols, index=0, key=\"date_col\")\r\n    else:\r\n        st.sidebar.warning(\"No datetime column detected.\")\r\n        try_col = st.sidebar.selectbox(\"Parse a column as dates (optional)\", [\"<none>\"] + df.columns.tolist(), index=0, key=\"try_parse\")\r\n        if try_col != \"<none>\":\r\n            try:\r\n                df[try_col] = pd.to_datetime(df[try_col], errors=\"coerce\")\r\n                if df[try_col].notna().any():\r\n                    date_col = try_col\r\n                    st.sidebar.success(f\"Parsed '{try_col}' as datetime.\")\r\n                else:\r\n                    st.sidebar.error(f\"Parsing '{try_col}' produced all NaT.\")\r\n            except Exception as e:\r\n                st.sidebar.error(f\"Failed to parse '{try_col}' as datetime: {e}\")\r\n\r\n    # Cache tools\r\n    st.sidebar.header(\"🧹 Maintenance\")\r\n    if st.sidebar.button(\"Clear cache\", use_container_width=False):\r\n        st.cache_data.clear()\r\n        st.sidebar.success(\"Cache cleared.\")\r\n\r\n    return df, date_col, source_label\r\n\r\ndef sidebar_chart_options(df: pd.DataFrame, key_prefix: str = \"viz_\") -> dict:\r\n    st.sidebar.header(\"📊 Chart Options\")\r\n    num_cols = numeric_columns(df)\r\n    if not num_cols:\r\n        st.sidebar.warning(\"No numeric columns found.\")\r\n        selected_cols = []\r\n    else:\r\n        selected_cols = st.sidebar.multiselect(\"Metrics to plot\", options=num_cols, default=num_cols[:1], key=f\"{key_prefix}metrics\")\r\n\r\n    freq_choice = st.sidebar.selectbox(\r\n        \"Resample (if dated)\", options=list(FREQ_MAP.keys()), index=0, key=f\"{key_prefix}freq\"\r\n    )\r\n    agg = st.sidebar.radio(\"Aggregation\", [\"Mean\", \"Sum\"], horizontal=True, index=0, key=f\"{key_prefix}agg\")\r\n    roll = st.sidebar.slider(\"Rolling average window\", min_value=1, max_value=60, value=1, key=f\"{key_prefix}roll\")\r\n    norm = st.sidebar.checkbox(\"Normalize each series to 0–1\", value=False, key=f\"{key_prefix}norm\")\r\n    chart_kind = st.sidebar.selectbox(\"Chart type\", [\"Line\", \"Area\", \"Bar\"], index=0, key=f\"{key_prefix}kind\")\r\n\r\n    return {\r\n        \"selected_cols\": selected_cols,\r\n        \"freq_choice\": freq_choice,\r\n        \"agg\": agg,\r\n        \"roll\": roll,\r\n        \"norm\": norm,\r\n        \"chart_kind\": chart_kind,\r\n    }\r\n\r\ndef sidebar_data_view_options(df: pd.DataFrame, key_prefix: str = \"dv_\") -> dict:\r\n    st.sidebar.header(\"🔎 Filter & View\")\r\n    quick_filter = st.sidebar.text_input(\"Quick text filter (matches any column)\", value=\"\", key=f\"{key_prefix}qf\")\r\n    col_choices = st.sidebar.multiselect(\"Columns to display (blank = all)\", options=df.columns.tolist(), default=[], key=f\"{key_prefix}cols\")\r\n    enable_edit = st.sidebar.checkbox(\"Enable editing (local only)\", value=False, key=f\"{key_prefix}edit\")\r\n    return {\"quick_filter\": quick_filter, \"col_choices\": col_choices, \"enable_edit\": enable_edit}\r\n</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- pages/1_Home.py -->\r\n    <section class=\"section-card\" id=\"home\">\r\n      <div class=\"banner\">\r\n        <small>Code</small>\r\n        <h1>pages/1_Home.py</h1>\r\n        <p>Overview KPIs, preview, schema</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre># pages/1_Home.py\r\nimport pandas as pd\r\nimport streamlit as st\r\nfrom lib_data import sidebar_data_source, numeric_columns\r\n\r\nst.title(\"🏠 Home\")\r\nst.caption(\"Overview of your dataset and quick stats.\")\r\n\r\ndf, date_col, _ = sidebar_data_source()\r\n\r\n# KPIs\r\nk1, k2, k3, k4 = st.columns(4)\r\nk1.metric(\"Rows\", f\"{len(df):,}\")\r\nk2.metric(\"Columns\", f\"{len(df.columns):,}\")\r\nn_num = len(numeric_columns(df))\r\nk3.metric(\"Numeric cols\", f\"{n_num:,}\")\r\nif date_col:\r\n    dmin = pd.to_datetime(df[date_col].min())\r\n    dmax = pd.to_datetime(df[date_col].max())\r\n    k4.metric(\"Date span\", f\"{str(dmin.date()) if pd.notna(dmin) else '—'} → {str(dmax.date()) if pd.notna(dmax) else '—'}\")\r\nelse:\r\n    k4.metric(\"Date column\", \"Not set\")\r\n\r\nst.subheader(\"Preview\")\r\nst.dataframe(df.head(50), width=\"stretch\")\r\n\r\nst.subheader(\"Schema\")\r\nschema = pd.DataFrame(\r\n    {\r\n        \"dtype\": df.dtypes.astype(str),\r\n        \"non_null\": df.notna().sum(),\r\n        \"nulls\": df.isna().sum(),\r\n        \"unique\": df.nunique(dropna=True),\r\n    }\r\n)\r\nst.dataframe(schema, width=\"stretch\")\r\n\r\nst.markdown(\r\n    \"\"\"\r\n**Tips**\r\n- Upload a CSV or let the app use a demo dataset.\r\n- If your dates weren’t auto-detected, choose a column to parse in the sidebar.\r\n- Use the other pages for charts and table exploration.\r\n\"\"\"\r\n)\r\n</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- pages/2_Visualization.py -->\r\n    <section class=\"section-card\" id=\"viz\">\r\n      <div class=\"banner\">\r\n        <small>Code</small>\r\n        <h1>pages/2_Visualization.py</h1>\r\n        <p>Resample, aggregate, rolling, normalize, chart & export</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre># pages/2_Visualization.py\r\nimport streamlit as st\r\nfrom lib_data import (\r\n    sidebar_data_source,\r\n    sidebar_chart_options,\r\n    numeric_columns,\r\n    filter_by_date,\r\n    resample_df,\r\n    apply_rolling,\r\n    normalize_01,\r\n    FREQ_MAP,\r\n)\r\n\r\nst.title(\"📊 Visualization\")\r\n\r\ndf, date_col, _ = sidebar_data_source()\r\n\r\n# Guardrails\r\nif not numeric_columns(df):\r\n    st.warning(\"No numeric columns found to plot. Upload a CSV with numeric data.\")\r\n    st.stop()\r\n\r\nopts = sidebar_chart_options(df, key_prefix=\"viz_\")\r\n\r\n# Filter by date if available\r\ndf_view = df.copy()\r\nif date_col:\r\n    st.subheader(\"Filter\")\r\n    df_view, start_ts, end_ts = filter_by_date(df_view, date_col, key_prefix=\"viz_\")\r\n    if start_ts and end_ts:\r\n        st.success(f\"Showing {len[df_view):,} rows from {start_ts.date()} to {end_ts.date()}.\")\r\n    else:\r\n        st.info(f\"Showing all {len(df_view):,} rows.\")\r\n\r\n# Build series\r\nif not opts[\"selected_cols\"]:\r\n    st.warning(\"Pick at least one metric in the sidebar to plot.\")\r\n    st.stop()\r\n\r\nif date_col:\r\n    series_df = resample_df(\r\n        df_view,\r\n        date_col,\r\n        opts[\"selected_cols\"],\r\n        FREQ_MAP[opts[\"freq_choice\"]],\r\n        opts[\"agg\"],\r\n    )\r\nelse:\r\n    series_df = df_view[opts[\"selected_cols\"]]\r\n\r\nif series_df.empty:\r\n    st.warning(\"Nothing to plot with the current settings.\")\r\n    st.stop()\r\n\r\nif opts[\"roll\"] > 1:\r\n    series_df = apply_rolling(series_df, opts[\"roll\"])\r\nif opts[\"norm\"]:\r\n    series_df = normalize_01(series_df)\r\n\r\n# Render chart (auto-size; no width string)\r\nst.subheader(\"Chart\")\r\nkind = opts[\"chart_kind\"]\r\nif kind == \"Line\":\r\n    st.line_chart(series_df)\r\nelif kind == \"Area\":\r\n    st.area_chart(series_df)\r\nelse:\r\n    st.bar_chart(series_df)\r\n\r\n# Export chart data\r\nst.subheader(\"Export chart data\")\r\ncsv_bytes = series_df.reset_index().to_csv(index=False).encode(\"utf-8\")\r\nst.download_button(\r\n    \"Download chart data as CSV\",\r\n    data=csv_bytes,\r\n    file_name=\"chart_data.csv\",\r\n    mime=\"text/csv\",\r\n)\r\n</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- pages/3_Data_View.py -->\r\n    <section class=\"section-card\" id=\"data-view\">\r\n      <div class=\"banner\">\r\n        <small>Code</small>\r\n        <h1>pages/3_Data_View.py</h1>\r\n        <p>Filter, choose columns, optional editing, export</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre># pages/3_Data_View.py\r\nimport pandas as pd\r\nimport streamlit as st\r\nfrom lib_data import (\r\n    sidebar_data_source,\r\n    sidebar_data_view_options,\r\n    filter_by_date,\r\n)\r\n\r\nst.title(\"🧾 Data View\")\r\n\r\ndf, date_col, _ = sidebar_data_source()\r\nopts = sidebar_data_view_options(df, key_prefix=\"dv_\")\r\n\r\ndf_view = df.copy()\r\n\r\n# Date filter (if available)\r\nif date_col:\r\n    st.subheader(\"Date Filter\")\r\n    df_view, start_ts, end_ts = filter_by_date(df_view, date_col, key_prefix=\"dv_\")\r\n    if start_ts and end_ts:\r\n        st.success(f\"Rows from {start_ts.date()} to {end_ts.date()}: {len(df_view):,}\")\r\n\r\n# Quick text filter across all columns\r\nq = (opts[\"quick_filter\"] or \"\").strip().lower()\r\nif q:\r\n    mask = df_view.astype(str).apply(lambda col: col.str.lower().str.contains(q, na=False))\r\n    df_view = df_view[mask.any(axis=1)]\r\n\r\n# Column subset\r\ncols = opts[\"col_choices\"] or list(df_view.columns)\r\nmissing = [c for c in cols if c not in df_view.columns]\r\nif missing:\r\n    st.warning(f\"Some selected columns are missing: {missing}\")\r\ncols = [c for c in cols if c in df_view.columns]\r\ndf_view = df_view[cols]\r\n\r\n# Editable or read-only grid\r\nst.subheader(\"Table\")\r\nif opts[\"enable_edit\"]:\r\n    st.caption(\"Editing is local to this session. Use the download button to export your changes.\")\r\n    df_display = st.data_editor(df_view, num_rows=\"dynamic\")\r\nelse:\r\n    st.caption(\"Read-only view. Use the sidebar to filter and select columns.\")\r\n    st.dataframe(df_view, width=\"stretch\")\r\n    df_display = df_view\r\n\r\n# Export\r\nst.subheader(\"Export\")\r\nout_bytes = df_display.to_csv(index=False).encode(\"utf-8\")\r\nst.download_button(\r\n    \"Download current view as CSV\",\r\n    data=out_bytes,\r\n    file_name=\"data_view.csv\",\r\n    mime=\"text/csv\",\r\n)\r\n</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "30119028-3910-48bb-bb97-bc3879aede12"
        },
        {
          "kind": "article",
          "order": 3,
          "title": "Add a New Page Without Changing Anything Else",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Streamlit Modularity • Add “4_Quick_Profile” Page</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1000px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 14px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n\r\n/* === (Added) Professional video embed wrapper === */\r\n.video-wrap { display: flex; justify-content: center; align-items: center; }\r\n.video-wrap iframe { max-width: 100%; border-radius: 12px; box-shadow: 0 2px 12px rgba(0,0,0,.12); }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO (added at top) -->\r\n    <section class=\"section-card\" id=\"video\">\r\n      <div class=\"banner\">\r\n        <small>Video</small>\r\n        <h1>Add a New Page Without Changing Anything Else</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"video-wrap\">\r\n          <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/pNEU-RM_muU\" title=\"Add a New Page Without Changing Anything Else\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Streamlit • Modularity</small>\r\n        <h1>Add a New Page to an Existing Modular App</h1>\r\n        <p>Drop a file into <code class=\"inline\">pages/</code> — no changes anywhere else</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          Because your app is already modular, you can add brand-new functionality by simply creating a new file in\r\n          <span class=\"inline\">pages/</span>. Below is the prompt (for ChatGPT or your notes), the repository update,\r\n          and the exact code for the new <strong>“4_Quick_Profile”</strong> page.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- UPDATED PROMPT (for adding a page) -->\r\n    <section class=\"section-card\" id=\"prompt\">\r\n      <div class=\"banner\">\r\n        <small>Prompt</small>\r\n        <h1>Use This Prompt to Add the New Page</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>Use This Prompt to Add a New Page\r\nCreate a new Streamlit page for my already-modular app.\r\nThe app uses a minimal app.py and pages/ directory, plus shared helpers in lib_data.py.\r\nAdd a new file: pages/4_Quick_Profile.py that:\r\n- Loads data via lib_data.sidebar_data_source()\r\n- Shows KPIs (rows, columns, missing cells, duplicate rows)\r\n- Displays Schema & Nulls with pct_null and a CSV download\r\n- Summarizes numeric columns, shows a correlation heatmap with Altair\r\n- Adds a Distribution Explorer for a selected numeric column (bins slider, optional log y)\r\n- Shows a Categorical Overview (top-N frequencies) with an Altair bar chart + CSV download\r\n- Finishes with a “Sample Rows” section and a note that no other files need changes.\r\nIf Altair is used, remind me to include \"altair\" in requirements.txt.</pre>\r\n        <p>\r\n          This prompt focuses on adding a <strong>new page</strong> to an <strong>existing modular app</strong> — not re-modularizing the app.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- REPO LAYOUT UPDATE -->\r\n    <section class=\"section-card\" id=\"repo\">\r\n      <div class=\"banner\">\r\n        <small>Structure</small>\r\n        <h1>Repository (Updated)</h1>\r\n        <p>Only a single new page is added</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>.\r\n├─ app.py\r\n├─ lib_data.py\r\n└─ pages/\r\n   ├─ 1_Home.py\r\n   ├─ 2_Visualization.py\r\n   ├─ 3_Data_View.py\r\n   └─ 4_Quick_Profile.py   <— NEW</pre>\r\n        <p>\r\n          Streamlit auto-discovers files under <span class=\"inline\">pages/</span> and shows them in the sidebar.\r\n          The numeric prefix (<strong>4_</strong>) controls ordering.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- REQUIREMENTS -->\r\n    <section class=\"section-card\" id=\"reqs\">\r\n      <div class=\"banner\">\r\n        <small>Dependencies</small>\r\n        <h1>requirements.txt</h1>\r\n        <p>Add Altair (used for heatmaps & histograms)</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>streamlit\r\npandas\r\nnumpy\r\naltair</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- NEW PAGE CODE -->\r\n    <section class=\"section-card\" id=\"code\">\r\n      <div class=\"banner\">\r\n        <small>Code</small>\r\n        <h1>pages/4_Quick_Profile.py</h1>\r\n        <p>Drop this file into <code class=\"inline\">pages/</code> — nothing else to modify</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre># pages/4_Quick_Profile.py\r\nimport pandas as pd\r\nimport streamlit as st\r\nimport altair as alt\r\nfrom lib_data import sidebar_data_source, numeric_columns\r\n\r\nst.title(\"🔎 Quick Profile\")\r\nst.caption(\"Schema, missingness, correlations, and quick distributions — no app changes needed.\")\r\n\r\n# Load data via existing helper\r\ndf, date_col, _ = sidebar_data_source()\r\n\r\n# =========================\r\n# KPIs\r\n# =========================\r\nk1, k2, k3, k4 = st.columns(4)\r\nk1.metric(\"Rows\", f\"{len(df):,}\")\r\nk2.metric(\"Columns\", f\"{len(df.columns):,}\")\r\nk3.metric(\"Missing cells\", f\"{int(df.isna().sum().sum()):,}\")\r\nk4.metric(\"Duplicate rows\", f\"{int(df.duplicated().sum()):,}\")\r\n\r\n# =========================\r\n# Schema & Nulls\r\n# =========================\r\nst.subheader(\"Schema & Nulls\")\r\nschema = pd.DataFrame(\r\n    {\r\n        \"dtype\": df.dtypes.astype(str),\r\n        \"non_null\": df.notna().sum(),\r\n        \"nulls\": df.isna().sum(),\r\n        \"unique\": df.nunique(dropna=True),\r\n        \"pct_null\": (df.isna().mean() * 100).round(2),\r\n    }\r\n).sort_values(\"nulls\", ascending=False)\r\nst.dataframe(schema, width=\"stretch\")\r\n\r\nschema_csv = schema.to_csv(index=True).encode(\"utf-8\")\r\nst.download_button(\"⬇️ Download schema CSV\", data=schema_csv, file_name=\"schema_profile.csv\", mime=\"text/csv\")\r\n\r\n# =========================\r\n# Numeric summary & correlations\r\n# =========================\r\nnum_cols = numeric_columns(df)\r\nif num_cols:\r\n    st.subheader(\"Numeric Summary\")\r\n    st.dataframe(df[num_cols].describe(), width=\"stretch\")\r\n\r\n    st.subheader(\"Correlation Heatmap\")\r\n    corr = df[num_cols].corr()  # numeric-only by default\r\n    corr_long = (\r\n        corr.reset_index()\r\n        .melt(\"index\", var_name=\"col2\", value_name=\"corr\")\r\n        .rename(columns={\"index\": \"col1\"})\r\n    )\r\n    heatmap = (\r\n        alt.Chart(corr_long)\r\n        .mark_rect()\r\n        .encode(\r\n            x=alt.X(\"col1:N\", title=\"\", sort=None),\r\n            y=alt.Y(\"col2:N\", title=\"\", sort=None),\r\n            color=alt.Color(\"corr:Q\", scale=alt.Scale(scheme=\"redblue\", domain=[-1, 1])),\r\n            tooltip=[\"col1:N\", \"col2:N\", alt.Tooltip(\"corr:Q\", format=\".2f\")],\r\n        )\r\n        .properties(height=400)\r\n    )\r\n    st.altair_chart(heatmap)\r\n\r\n    st.subheader(\"Distribution Explorer\")\r\n    dist_col = st.selectbox(\"Choose a numeric column\", num_cols, index=0, key=\"prof_num_col\")\r\n    bins = st.slider(\"Bins\", min_value=5, max_value=100, value=30, key=\"prof_bins\")\r\n    logy = st.checkbox(\"Log scale (y-axis)\", value=False, key=\"prof_logy\")\r\n\r\n    # ✅ Encoding-level binning (Altair-compatible across versions)\r\n    hist = (\r\n        alt.Chart(df[[dist_col]].dropna())\r\n        .mark_bar()\r\n        .encode(\r\n            x=alt.X(f\"{dist_col}:Q\", bin=alt.Bin(maxbins=bins), title=dist_col),\r\n            y=alt.Y(\"count()\", title=\"Count\", scale=alt.Scale(type=\"log\") if logy else alt.Undefined),\r\n            tooltip=[alt.Tooltip(\"count()\", title=\"Count\")],\r\n        )\r\n        .properties(height=300)\r\n    )\r\n    st.altair_chart(hist)\r\nelse:\r\n    st.info(\"No numeric columns found for summary/correlation.\")\r\n\r\n# =========================\r\n# Categorical overview\r\n# =========================\r\nst.subheader(\"Categorical Overview\")\r\ncat_cols = [c for c in df.columns if c not in num_cols]\r\nif cat_cols:\r\n    cat_col = st.selectbox(\"Choose a categorical column\", cat_cols, index=0, key=\"prof_cat_col\")\r\n    top_n = st.slider(\"Show top N categories\", 3, 30, 10, key=\"prof_topn\")\r\n    vc = (\r\n        df[cat_col]\r\n        .astype(\"string\")\r\n        .value_counts(dropna=False)\r\n        .head(top_n)\r\n        .rename_axis(cat_col)\r\n        .reset_index(name=\"count\")\r\n    )\r\n    bar = (\r\n        alt.Chart(vc)\r\n        .mark_bar()\r\n        .encode(\r\n            x=alt.X(\"count:Q\", title=\"Count\"),\r\n            y=alt.Y(f\"{cat_col}:N\", sort=\"-x\", title=cat_col),\r\n            tooltip=[cat_col, \"count\"],\r\n        )\r\n        .properties(height=300)\r\n    )\r\n    st.altair_chart(bar)\r\n    st.dataframe(vc, width=\"stretch\")\r\n\r\n    vc_csv = vc.to_csv(index=False).encode(\"utf-8\")\r\n    st.download_button(\r\n        f\"⬇️ Download '{cat_col}' frequency table (CSV)\",\r\n        data=vc_csv,\r\n        file_name=f\"{cat_col}_frequencies.csv\",\r\n        mime=\"text/csv\",\r\n    )\r\nelse:\r\n    st.info(\"No categorical columns detected.\")\r\n\r\n# =========================\r\n# Sample rows\r\n# =========================\r\nst.subheader(\"Sample Rows\")\r\nn_sample = st.slider(\"Rows to preview\", 5, 100, 20, key=\"prof_sample_n\")\r\nst.dataframe(df.head(n_sample), width=\"stretch\")\r\n\r\nst.caption(\"Just drop this file into the `pages/` folder. No changes to other files required.\")</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- RUN -->\r\n    <section class=\"section-card\" id=\"run\">\r\n      <div class=\"banner\">\r\n        <small>Run</small>\r\n        <h1>Run in Codespaces</h1>\r\n        <p>Install → Run → Open Port</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>pip install -r requirements.txt\r\nstreamlit run app.py --server.address 0.0.0.0 --server.port 8000</pre>\r\n        <p>Open the forwarded port (8000). In the sidebar you’ll now see <strong>“4_Quick_Profile”</strong>.</p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "faf1370e-cbdf-4bc2-b677-fdda66ecbc1d"
        },
        {
          "kind": "article",
          "order": 4,
          "title": "Add a new Page: Extend your data",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Streamlit Modularity • Add \"5_Bulk_Upload_CSV\" Page</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1000px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Video container === */\r\n.video-container {\r\n  margin-bottom: 32px;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n  background: #f8f9fa;\r\n  padding: 20px;\r\n}\r\n\r\n.video-container h2 {\r\n  margin: 0 0 16px 0;\r\n  font-size: 22px;\r\n  color: #333;\r\n  text-align: center;\r\n  font-weight: 600;\r\n}\r\n\r\n.video-wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 0;\r\n  padding-bottom: 45.2%; /* 473/1047 aspect ratio */\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.15);\r\n}\r\n\r\n.video-wrapper iframe {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 14px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO SECTION -->\r\n    <div class=\"video-container\">\r\n      <div class=\"video-wrapper\">\r\n        <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/xVg4IVdlPrI\" title=\"Add a new Page: Extend your data\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Streamlit • Modularity</small>\r\n        <h1>Add a Bulk CSV Upload Page (Safe Append)</h1>\r\n        <p>Drop one new file into <code class=\"inline\">pages/</code> — no changes anywhere else</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          This page demonstrates how modularity lets you extend your app instantly: add\r\n          <strong>pages/5_Bulk_Upload_CSV.py</strong> and you get a full UI to upload multiple CSVs, combine them,\r\n          de-duplicate, and **append safely** to a base CSV (with newline protection to avoid row merges).\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- UPDATED PROMPT (for adding THIS page) -->\r\n    <section class=\"section-card\" id=\"prompt\">\r\n      <div class=\"banner\">\r\n        <small>Prompt</small>\r\n        <h1>Use This Prompt to Add the New Page</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>Add a new Streamlit page to my already-modular app:\r\nCreate pages/5_Bulk_Upload_CSV.py that:\r\n- Lets me upload one or more CSV files\r\n- Offers flexible read options (encoding, delimiter, decimal, header, NA handling, auto-parse dates)\r\n- Standardizes column names (case/trim/space handling) and can add a source filename column\r\n- Combines uploads by union or intersection of columns; optional within-upload de-duplication\r\n- Shows previews and a combined table\r\n- Appends to a base CSV with a safe trailing-newline check to prevent row merges\r\n- Optionally de-duplicates against the base before appending\r\n- Provides a download of the combined upload\r\nNo other files should need changes. The page should rely only on pandas and streamlit.</pre>\r\n        <p>Paste the resulting file into <span class=\"inline\">pages/</span> and it will appear in the Streamlit sidebar automatically.</p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- REPO LAYOUT UPDATE -->\r\n    <section class=\"section-card\" id=\"repo\">\r\n      <div class=\"banner\">\r\n        <small>Structure</small>\r\n        <h1>Repository (Updated)</h1>\r\n        <p>Only one new file added under <code class=\"inline\">pages/</code></p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>.\r\n├─ app.py\r\n├─ lib_data.py\r\n└─ pages/\r\n   ├─ 1_Home.py\r\n   ├─ 2_Visualization.py\r\n   ├─ 3_Data_View.py\r\n   ├─ 4_Quick_Profile.py\r\n   └─ 5_Bulk_Upload_CSV.py   <— NEW</pre>\r\n        <p>\r\n          Streamlit auto-discovers files under <span class=\"inline\">pages/</span> and shows them in the sidebar.\r\n          The numeric prefix (<strong>5_</strong>) controls ordering.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- REQUIREMENTS -->\r\n    <section class=\"section-card\" id=\"reqs\">\r\n      <div class=\"banner\">\r\n        <small>Dependencies</small>\r\n        <h1>requirements.txt</h1>\r\n        <p>No new packages required beyond what you already use</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>streamlit\r\npandas\r\nnumpy</pre>\r\n        <p>Altair isn't required for this page. (It was only used by your Quick Profile page.)</p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- NEW PAGE CODE -->\r\n    <section class=\"section-card\" id=\"code\">\r\n      <div class=\"banner\">\r\n        <small>Code</small>\r\n        <h1>pages/5_Bulk_Upload_CSV.py</h1>\r\n        <p>Drop this file into <code class=\"inline\">pages/</code> — nothing else to modify</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre># pages/5_Bulk_Upload_CSV.py\r\nimport io\r\nfrom pathlib import Path\r\nfrom typing import List, Optional, Tuple\r\n\r\nimport pandas as pd\r\nimport streamlit as st\r\n\r\nst.title(\"📤 Bulk CSV Upload → Append to Base File (safe newline)\")\r\nst.caption(\"Combine multiple CSVs and append them to /workspaces/photos/data/weather.csv without line merges.\")\r\n\r\n# -----------------------------\r\n# Constants\r\n# -----------------------------\r\nBASE_CSV_PATH = Path(\"/workspaces/photos/data/weather.csv\")\r\nBASE_CSV_PATH.parent.mkdir(parents=True, exist_ok=True)  # ensure folder exists\r\n\r\n# -----------------------------\r\n# Helpers\r\n# -----------------------------\r\ndef _standardize_cols(cols: List[str], case: str = \"keep\", trim: bool = True, spaces: str = \"keep\") -> List[str]:\r\n    out = []\r\n    for c in cols:\r\n        name = str(c)\r\n        if trim:\r\n            name = name.strip()\r\n        if spaces == \"underscore\":\r\n            name = \"_\".join(name.split())\r\n        elif spaces == \"single\":\r\n            name = \" \".join(name.split())\r\n        if case == \"lower\":\r\n            name = name.lower()\r\n        elif case == \"upper\":\r\n            name = name.upper()\r\n        out.append(name)\r\n    return out\r\n\r\ndef _coerce_common_datetime_cols(df: pd.DataFrame) -> pd.DataFrame:\r\n    for col in df.columns:\r\n        name = str(col).lower()\r\n        if name in (\"date\", \"time\", \"timestamp\", \"datetime\"):\r\n            df[col] = pd.to_datetime(df[col], errors=\"coerce\")\r\n    return df\r\n\r\n@st.cache_data(show_spinner=False)\r\ndef _read_one_csv(\r\n    content: bytes,\r\n    encoding: str,\r\n    sep_choice: str,\r\n    decimal: str,\r\n    header_row: bool,\r\n    treat_empty_as_na: bool,\r\n    parse_dates_auto: bool,\r\n) -> pd.DataFrame:\r\n    \"\"\"Read a CSV from bytes with flexible options.\"\"\"\r\n    bio = io.BytesIO(content)\r\n    if sep_choice == \"Auto (sniff)\":\r\n        sep, engine = None, \"python\"  # python engine for sep=None sniffing\r\n    elif sep_choice == \"Comma (,)\":\r\n        sep, engine = \",\", None\r\n    elif sep_choice == \"Semicolon (;)\":\r\n        sep, engine = \";\", None\r\n    else:\r\n        sep, engine = \"\\t\", None  # Tab\r\n\r\n    na_vals = None\r\n    keep_default_na = True\r\n    if treat_empty_as_na:\r\n        na_vals = [\"\", \"NA\", \"N/A\", \"na\", \"n/a\", \"NULL\", \"null\", \"None\", \"none\"]\r\n\r\n    df = pd.read_csv(\r\n        bio,\r\n        encoding=encoding,\r\n        sep=sep,\r\n        engine=engine,\r\n        header=0 if header_row else None,\r\n        decimal=decimal,\r\n        na_values=na_vals,\r\n        keep_default_na=keep_default_na,\r\n    )\r\n    if not header_row:\r\n        df.columns = [f\"col_{i+1}\" for i in range(df.shape[1])]\r\n    if parse_dates_auto:\r\n        df = _coerce_common_datetime_cols(df)\r\n    return df\r\n\r\ndef _read_base_columns(path: Path) -> Optional[List[str]]:\r\n    if not path.exists() or path.stat().st_size == 0:\r\n        return None\r\n    try:\r\n        return pd.read_csv(path, nrows=0).columns.tolist()\r\n    except Exception as e:\r\n        st.error(f\"Couldn't read base CSV header at {path}: {e}\")\r\n        return None\r\n\r\ndef _align_to_base(df: pd.DataFrame, base_cols: List[str]) -> pd.DataFrame:\r\n    aligned = df.copy()\r\n    for c in base_cols:\r\n        if c not in aligned.columns:\r\n            aligned[c] = pd.NA\r\n    return aligned[base_cols]\r\n\r\ndef _infer_numeric(df: pd.DataFrame, columns: Optional[List[str]] = None) -> pd.DataFrame:\r\n    cols = columns or df.columns.tolist()\r\n    for c in cols:\r\n        if df[c].dtype == \"object\":\r\n            df[c] = pd.to_numeric(df[c].astype(str).str.replace(\",\", \"\", regex=False), errors=\"ignore\")\r\n    return df\r\n\r\ndef _ensure_trailing_newline(path: Path) -> None:\r\n    \"\"\"\r\n    If the file exists and the last byte isn't '\\n', append a newline.\r\n    Prevents the first appended row from merging with the last existing row.\r\n    \"\"\"\r\n    if not path.exists():\r\n        return\r\n    size = path.stat().st_size\r\n    if size == 0:\r\n        return\r\n    with path.open(\"rb\") as f:\r\n        f.seek(-1, 2)\r\n        last = f.read(1)\r\n    if last != b\"\\n\":\r\n        # append a newline safely\r\n        with path.open(\"ab\") as f:\r\n            f.write(b\"\\n\")\r\n\r\ndef _safe_append_csv(path: Path, df: pd.DataFrame) -> None:\r\n    \"\"\"Append DataFrame rows to CSV ensuring a newline boundary and consistent line endings.\"\"\"\r\n    if df.empty:\r\n        return\r\n    if path.exists() and path.stat().st_size > 0:\r\n        _ensure_trailing_newline(path)\r\n        df.to_csv(path, mode=\"a\", header=False, index=False, encoding=\"utf-8\", lineterminator=\"\\n\")\r\n    else:\r\n        # create with header\r\n        df.to_csv(path, mode=\"w\", header=True, index=False, encoding=\"utf-8\", lineterminator=\"\\n\")\r\n\r\n# -----------------------------\r\n# Sidebar\r\n# -----------------------------\r\nwith st.sidebar:\r\n    st.header(\"Upload\")\r\n    files = st.file_uploader(\"Choose one or more CSV files\", type=[\"csv\"], accept_multiple_files=True)\r\n\r\n    st.header(\"Read Options\")\r\n    encoding = st.selectbox(\"Encoding\", [\"utf-8\", \"utf-8-sig\", \"latin-1\", \"cp1252\"], index=0)\r\n    sep_choice = st.selectbox(\"Delimiter\", [\"Auto (sniff)\", \"Comma (,)\", \"Semicolon (;)\", \"Tab (\\\\t)\"], index=0)\r\n    decimal = st.selectbox(\"Decimal marker\", [\".\", \",\"], index=0)\r\n    header_row = st.checkbox(\"First row is header\", value=True)\r\n    treat_empty_as_na = st.checkbox(\"Treat empty strings as missing\", value=True)\r\n    parse_dates_auto = st.checkbox(\"Auto-parse common date/time columns\", value=True)\r\n\r\n    st.header(\"Standardize Columns\")\r\n    col_case = st.selectbox(\"Case\", [\"keep\", \"lower\", \"upper\"], index=0)\r\n    col_trim = st.checkbox(\"Trim whitespace\", value=True)\r\n    col_spaces = st.selectbox(\"Spaces\", [\"keep\", \"single\", \"underscore\"], index=0)\r\n    add_source = st.checkbox(\"Add source filename column\", value=False)\r\n    source_col_name = st.text_input(\"Source column name\", value=\"source_file\", disabled=not add_source)\r\n\r\n    st.header(\"Combine Mode\")\r\n    union_mode = st.radio(\"How to combine columns\", [\"Union by name (outer)\", \"Only common columns (inner)\"], index=0)\r\n\r\n    st.header(\"Post-processing\")\r\n    try_infer_numeric = st.checkbox(\"Try to convert numeric-looking text\", value=True)\r\n    drop_empty_cols = st.checkbox(\"Drop all-empty columns\", value=True)\r\n\r\n    st.header(\"Deduplicate (within upload)\")\r\n    dedup_mode = st.radio(\"Remove duplicates\", [\"No\", \"Across all columns\", \"Choose columns\"], index=0)\r\n\r\n    st.header(\"Cache\")\r\n    if st.button(\"Clear cache\"):\r\n        st.cache_data.clear()\r\n        st.success(\"Cache cleared.\")\r\n\r\n# -----------------------------\r\n# Step 1: Read all files\r\n# -----------------------------\r\nif not files:\r\n    st.info(\"Upload one or more CSV files to start.\")\r\n    st.stop()\r\n\r\nst.subheader(\"Step 1 — File Summary\")\r\n\r\ndfs: List[pd.DataFrame] = []\r\nmeta: List[Tuple[str, int, int]] = []\r\n\r\nprogress = st.progress(0.0)\r\nfor i, f in enumerate(files, start=1):\r\n    df_i = _read_one_csv(\r\n        content=f.getvalue(),\r\n        encoding=encoding,\r\n        sep_choice=sep_choice,\r\n        decimal=decimal,\r\n        header_row=header_row,\r\n        treat_empty_as_na=treat_empty_as_na,\r\n        parse_dates_auto=parse_dates_auto,\r\n    )\r\n    df_i.columns = _standardize_cols(df_i.columns.tolist(), case=col_case, trim=col_trim, spaces=col_spaces)\r\n    if add_source:\r\n        df_i[source_col_name] = f.name\r\n    if try_infer_numeric:\r\n        df_i = _infer_numeric(df_i)\r\n    if drop_empty_cols:\r\n        df_i = df_i.dropna(axis=1, how=\"all\")\r\n\r\n    dfs.append(df_i)\r\n    meta.append((f.name, df_i.shape[0], df_i.shape[1]))\r\n    progress.progress(i / len(files))\r\nprogress.empty()\r\n\r\nst.dataframe(pd.DataFrame(meta, columns=[\"file\", \"rows\", \"cols\"]), width=\"stretch\")\r\n\r\nwith st.expander(\"Preview first rows of each file\"):\r\n    for f, df_i in zip(files, dfs):\r\n        st.markdown(f\"**{f.name}** — {len(df_i):,} rows × {len(df_i.columns)} cols\")\r\n        st.dataframe(df_i.head(10), width=\"stretch\")\r\n\r\n# -----------------------------\r\n# Step 2: Combine uploads\r\n# -----------------------------\r\nst.subheader(\"Step 2 — Combine\")\r\njoin_how = \"outer\" if union_mode.startswith(\"Union\") else \"inner\"\r\n\r\nif join_how == \"outer\":\r\n    ordered_cols: List[str] = []\r\n    seen = set()\r\n    for df_i in dfs:\r\n        for c in df_i.columns:\r\n            if c not in seen:\r\n                seen.add(c)\r\n                ordered_cols.append(c)\r\nelse:\r\n    common = set(dfs[0].columns)\r\n    for df_i in dfs[1:]:\r\n        common &= set(df_i.columns)\r\n    ordered_cols = [c for c in dfs[0].columns if c in common]\r\n\r\nif not ordered_cols:\r\n    st.error(\"No overlapping columns to combine. Adjust standardization or use union mode.\")\r\n    st.stop()\r\n\r\ncombined = pd.concat(\r\n    [d[ordered_cols] if join_how == \"inner\" else d.reindex(columns=ordered_cols) for d in dfs],\r\n    axis=0,\r\n    ignore_index=True,\r\n)\r\n\r\n# Within-upload dedupe\r\nbefore_rows = combined.shape[0]\r\nremoved_within = 0\r\nif dedup_mode == \"Across all columns\":\r\n    combined = combined.drop_duplicates()\r\n    removed_within = before_rows - combined.shape[0]\r\nelif dedup_mode == \"Choose columns\":\r\n    chosen = st.multiselect(\"Deduplicate on columns\", options=ordered_cols, default=ordered_cols)\r\n    if chosen:\r\n        combined = combined.drop_duplicates(subset=chosen)\r\n        removed_within = before_rows - combined.shape[0]\r\nif removed_within:\r\n    st.success(f\"Removed {removed_within:,} duplicate rows within the uploaded data.\")\r\n\r\nst.markdown(\"**Combined preview**\")\r\nst.dataframe(combined.head(100), width=\"stretch\")\r\n\r\n# -----------------------------\r\n# Step 3: Append to base CSV (SAFE)\r\n# -----------------------------\r\nst.subheader(\"Step 3 — Append to Base CSV\")\r\nst.caption(f\"Base file path: {BASE_CSV_PATH}\")\r\n\r\nbase_cols = _read_base_columns(BASE_CSV_PATH)\r\n\r\nif base_cols is None:\r\n    st.warning(\"Base CSV does not exist or is empty. Appending will CREATE it using the combined upload's columns.\")\r\n    st.code(\", \".join(combined.columns), language=\"text\")\r\n    create_btn = st.button(f\"Create base file & write {len(combined):,} rows\")\r\n    if create_btn:\r\n        try:\r\n            _safe_append_csv(BASE_CSV_PATH, combined)\r\n            st.success(f\"Created {BASE_CSV_PATH} with {len(combined):,} rows.\")\r\n            st.toast(\"Base CSV created\", icon=\"✅\")\r\n            st.caption(\"If other pages still show old data, use their sidebar → Clear cache.\")\r\n        except Exception as e:\r\n            st.error(f\"Failed to write base CSV: {e}\")\r\nelse:\r\n    st.markdown(\"**Base CSV schema (in order):**\")\r\n    st.code(\", \".join(base_cols), language=\"text\")\r\n\r\n    # Align to base schema\r\n    aligned = _align_to_base(combined, base_cols)\r\n\r\n    st.markdown(\"**Preview of rows to append (aligned):**\")\r\n    st.dataframe(aligned.head(30), width=\"stretch\")\r\n\r\n    # Optional dedupe vs base\r\n    st.markdown(\"**Duplicate check vs base (optional)**\")\r\n    dedupe_vs_base_mode = st.radio(\r\n        \"Avoid adding rows that already exist in the base (match by):\",\r\n        [\"Off\", \"All base columns\", \"Choose columns\"],\r\n        index=0,\r\n        horizontal=True,\r\n    )\r\n\r\n    to_write = aligned\r\n    if dedupe_vs_base_mode != \"Off\":\r\n        if dedupe_vs_base_mode == \"All base columns\":\r\n            keys = base_cols\r\n        else:\r\n            keys = st.multiselect(\"Columns to match\", options=base_cols, default=base_cols)\r\n        if keys:\r\n            # Build a string key to compare quickly (robust to dtype differences)\r\n            try:\r\n                base_keys = pd.read_csv(BASE_CSV_PATH, usecols=keys, dtype=str).astype(str)\r\n                new_keys = to_write[keys].astype(str)\r\n                new_keys[\"_key\"] = new_keys.apply(lambda r: \"§\".join(r.values.tolist()), axis=1)\r\n                base_keys[\"_key\"] = base_keys.apply(lambda r: \"§\".join(r.values.tolist()), axis=1)\r\n                keep_mask = ~new_keys[\"_key\"].isin(base_keys[\"_key\"])\r\n                skipped = int((~keep_mask).sum())\r\n                to_write = to_write.loc[keep_mask].copy()\r\n                if skipped:\r\n                    st.success(f\"Skipped {skipped:,} rows already present in base.\")\r\n            except Exception as e:\r\n                st.warning(f\"Base dedupe skipped due to error: {e}\")\r\n\r\n    append_btn = st.button(f\"Append {len(to_write):,} rows to base CSV (safe newline)\")\r\n    if append_btn:\r\n        try:\r\n            _safe_append_csv(BASE_CSV_PATH, to_write)\r\n            st.success(f\"Appended {len(to_write):,} rows to {BASE_CSV_PATH} safely.\")\r\n            st.toast(\"Append complete\", icon=\"✅\")\r\n            st.caption(\"If other pages still show old data, use their sidebar → Clear cache.\")\r\n        except Exception as e:\r\n            st.error(f\"Failed to append to base CSV: {e}\")\r\n\r\n# -----------------------------\r\n# Optional download\r\n# -----------------------------\r\nst.subheader(\"Optional — Download Combined Upload\")\r\nst.download_button(\r\n    \"⬇️ Download combined CSV\",\r\n    data=combined.to_csv(index=False).encode(\"utf-8\"),\r\n    file_name=\"combined_upload.csv\",\r\n    mime=\"text/csv\",\r\n)\r\n</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- RUN -->\r\n    <section class=\"section-card\" id=\"run\">\r\n      <div class=\"banner\">\r\n        <small>Run</small>\r\n        <h1>Run in Codespaces</h1>\r\n        <p>Install → Run → Open Port</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>pip install -r requirements.txt\r\nstreamlit run app.py --server.address 0.0.0.0 --server.port 8000</pre>\r\n        <p>Open the forwarded port (8000). In the sidebar you'll now see <strong>\"5_Bulk_Upload_CSV\"</strong>.</p>\r\n        <p><em>Note:</em> The script writes to <span class=\"inline\">/workspaces/photos/data/weather.csv</span>. Make sure this path exists in your Codespace (it creates the folder if missing).</p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "1993f76d-acca-4ad1-be7a-eab69ec8d07b"
        },
        {
          "kind": "article",
          "order": 5,
          "title": "Helper Modules",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Streamlit Helpers • bulk_upload_utils + 5_Bulk_Upload_CSV</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1000px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 14px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\n/* === Video embed styling === */\r\n.video-container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 0;\r\n  padding-bottom: 56.25%; /* 16:9 aspect ratio */\r\n  margin: 20px 0;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n}\r\n\r\n.video-container iframe {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  border: none;\r\n}\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO EMBED -->\r\n    <section class=\"section-card\" id=\"video\">\r\n      <div class=\"banner\">\r\n        <small>Tutorial</small>\r\n        <h1>Helper Modules Overview</h1>\r\n        <p>Watch the complete walkthrough of implementing helper modules in Streamlit</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"video-container\">\r\n          <iframe src=\"https://www.youtube.com/embed/9NVlL0eH-4c\" title=\"Helper Modules\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Streamlit • Helpers</small>\r\n        <h1>Support Your Pages with a Helper Module</h1>\r\n        <p>Extract reusable CSV utilities → keep pages lean, safe, and testable</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          We're adding a dedicated helper module <span class=\"inline\">bulk_upload_utils.py</span> to encapsulate\r\n          CSV reading, schema alignment, safe appends, and diagnostics. The updated page\r\n          <span class=\"inline\">pages/5_Bulk_Upload_CSV.py</span> imports those helpers — no changes elsewhere.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- REPO LAYOUT -->\r\n    <section class=\"section-card\" id=\"repo\">\r\n      <div class=\"banner\">\r\n        <small>Structure</small>\r\n        <h1>Repository Layout (Updated)</h1>\r\n        <p>New helper + updated bulk upload page</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>.\r\n├─ app.py\r\n├─ lib_data.py\r\n├─ bulk_upload_utils.py     ← NEW (helper)\r\n└─ pages/\r\n   ├─ 1_Home.py\r\n   ├─ 2_Visualization.py\r\n   ├─ 3_Data_View.py\r\n   ├─ 4_Quick_Profile.py\r\n   └─ 5_Bulk_Upload_CSV.py  ← UPDATED (uses helper)</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- REQUIREMENTS -->\r\n    <section class=\"section-card\" id=\"reqs\">\r\n      <div class=\"banner\">\r\n        <small>Dependencies</small>\r\n        <h1>requirements.txt (no extras needed)</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>streamlit\r\npandas\r\nnumpy</pre>\r\n        <p>These pages don't require Altair. (Your Quick Profile page does.)</p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- HELPER: bulk_upload_utils.py -->\r\n    <section class=\"section-card\" id=\"helper\">\r\n      <div class=\"banner\">\r\n        <small>Code</small>\r\n        <h1>bulk_upload_utils.py</h1>\r\n        <p>Reusable utilities: normalize headers, read CSVs, align schemas, safe appends, diagnostics</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre># bulk_upload_utils.py\r\nfrom __future__ import annotations\r\n\r\nimport io\r\nfrom pathlib import Path\r\nfrom typing import Iterable, List, Optional, Tuple\r\n\r\nimport pandas as pd\r\nimport streamlit as st\r\n\r\n\r\n# ---------- Column utilities ----------\r\ndef standardize_cols(\r\n    cols: Iterable[str],\r\n    *,\r\n    case: str = \"keep\",         # keep | lower | upper\r\n    trim: bool = True,\r\n    spaces: str = \"keep\",       # keep | single | underscore\r\n) -> List[str]:\r\n    out: List[str] = []\r\n    for c in cols:\r\n        name = str(c)\r\n        if trim:\r\n            name = name.strip()\r\n        if spaces == \"single\":\r\n            name = \" \".join(name.split())\r\n        elif spaces == \"underscore\":\r\n            name = \"_\".join(name.split())\r\n        if case == \"lower\":\r\n            name = name.lower()\r\n        elif case == \"upper\":\r\n            name = name.upper()\r\n        out.append(name)\r\n    return out\r\n\r\n\r\ndef coerce_common_datetime_cols(df: pd.DataFrame) -> pd.DataFrame:\r\n    \"\"\"Coerce columns named like dates into datetime (non-fatal).\"\"\"\r\n    for col in df.columns:\r\n        name = str(col).lower()\r\n        if name in (\"date\", \"time\", \"timestamp\", \"datetime\"):\r\n            df[col] = pd.to_datetime(df[col], errors=\"coerce\")\r\n    return df\r\n\r\n\r\ndef format_datetime_cols_for_write(\r\n    df: pd.DataFrame,\r\n    *,\r\n    mode: str = \"date\",  # date | iso | keep\r\n) -> pd.DataFrame:\r\n    \"\"\"Optionally format datetime-like columns before writing to CSV.\"\"\"\r\n    if mode == \"keep\":\r\n        return df\r\n    out = df.copy()\r\n    for c in out.columns:\r\n        if pd.api.types.is_datetime64_any_dtype(out[c]):\r\n            if mode == \"date\":\r\n                out[c] = out[c].dt.date.astype(\"string\")\r\n            elif mode == \"iso\":\r\n                out[c] = out[c].dt.strftime(\"%Y-%m-%dT%H:%M:%S\").astype(\"string\")\r\n    return out\r\n\r\n\r\ndef infer_numeric(df: pd.DataFrame, columns: Optional[List[str]] = None) -> pd.DataFrame:\r\n    cols = columns or df.columns.tolist()\r\n    out = df.copy()\r\n    for c in cols:\r\n        if out[c].dtype == \"object\":\r\n            out[c] = pd.to_numeric(out[c].astype(str).str.replace(\",\", \"\", regex=False), errors=\"ignore\")\r\n    return out\r\n\r\n\r\n# ---------- Reading ----------\r\n@st.cache_data(show_spinner=False)\r\ndef read_one_csv(\r\n    content: bytes,\r\n    *,\r\n    encoding: str = \"utf-8\",\r\n    sep_choice: str = \"Auto (sniff)\",  # Auto (sniff) | Comma (,) | Semicolon (;) | Tab (\\t)\r\n    decimal: str = \".\",\r\n    header_row: bool = True,\r\n    treat_empty_as_na: bool = True,\r\n    parse_dates_auto: bool = True,\r\n) -> pd.DataFrame:\r\n    \"\"\"Read a CSV from bytes with flexible options.\"\"\"\r\n    bio = io.BytesIO(content)\r\n    if sep_choice == \"Auto (sniff)\":\r\n        sep, engine = None, \"python\"  # python engine for sep=None sniffing\r\n    elif sep_choice == \"Comma (,)\":\r\n        sep, engine = \",\", None\r\n    elif sep_choice == \"Semicolon (;)\":\r\n        sep, engine = \";\", None\r\n    else:\r\n        sep, engine = \"\\t\", None  # Tab\r\n\r\n    na_vals = None\r\n    keep_default_na = True\r\n    if treat_empty_as_na:\r\n        na_vals = [\"\", \"NA\", \"N/A\", \"na\", \"n/a\", \"NULL\", \"null\", \"None\", \"none\"]\r\n\r\n    df = pd.read_csv(\r\n        bio,\r\n        encoding=encoding,\r\n        sep=sep,\r\n        engine=engine,\r\n        header=0 if header_row else None,\r\n        decimal=decimal,\r\n        na_values=na_vals,\r\n        keep_default_na=keep_default_na,\r\n    )\r\n    if not header_row:\r\n        df.columns = [f\"col_{i+1}\" for i in range(df.shape[1])]\r\n    if parse_dates_auto:\r\n        df = coerce_common_datetime_cols(df)\r\n    return df\r\n\r\n\r\n# ---------- Base CSV schema / dedupe ----------\r\ndef read_base_columns(path: Path) -> Optional[List[str]]:\r\n    if not path.exists() or path.stat().st_size == 0:\r\n        return None\r\n    try:\r\n        return pd.read_csv(path, nrows=0).columns.tolist()\r\n    except Exception as e:\r\n        st.error(f\"Couldn't read base CSV header at {path}: {e}\")\r\n        return None\r\n\r\n\r\ndef align_to_base(df: pd.DataFrame, base_cols: List[str]) -> pd.DataFrame:\r\n    out = df.copy()\r\n    for c in base_cols:\r\n        if c not in out.columns:\r\n            out[c] = pd.NA\r\n    return out[base_cols]\r\n\r\n\r\ndef anti_join_vs_base(\r\n    new_df: pd.DataFrame,\r\n    base_path: Path,\r\n    keys: List[str],\r\n) -> Tuple[pd.DataFrame, int]:\r\n    \"\"\"Remove rows from new_df that already exist in base (by keys).\"\"\"\r\n    try:\r\n        base_subset = pd.read_csv(base_path, usecols=keys, dtype=str).astype(str)\r\n    except ValueError:\r\n        # Missing cols in base; can't compare\r\n        return new_df, 0\r\n    except Exception as e:\r\n        st.warning(f\"Could not read base for dedupe: {e}\")\r\n        return new_df, 0\r\n\r\n    left = new_df[keys].astype(str)\r\n    left[\"_k\"] = left.apply(lambda r: \"§\".join(r.values.tolist()), axis=1)\r\n    base_subset[\"_k\"] = base_subset.apply(lambda r: \"§\".join(r.values.tolist()), axis=1)\r\n    keep_mask = ~left[\"_k\"].isin(base_subset[\"_k\"])\r\n    removed = int((~keep_mask).sum())\r\n    return new_df.loc[keep_mask].copy(), removed\r\n\r\n\r\n# ---------- Safe appends ----------\r\ndef last_byte_is_newline(path: Path) -> Optional[bool]:\r\n    if not path.exists() or path.stat().st_size == 0:\r\n        return None\r\n    with path.open(\"rb\") as f:\r\n        f.seek(-1, 2)\r\n        return f.read(1) == b\"\\n\"\r\n\r\n\r\ndef ensure_trailing_newline(path: Path) -> None:\r\n    \"\"\"If file exists and doesn't end with '\\n', append one.\"\"\"\r\n    lb = last_byte_is_newline(path)\r\n    if lb is False:\r\n        with path.open(\"ab\") as f:\r\n            f.write(b\"\\n\")\r\n\r\n\r\ndef safe_append_csv(path: Path, df: pd.DataFrame) -> None:\r\n    \"\"\"Append rows ensuring newline boundary & consistent line endings.\"\"\"\r\n    if df.empty:\r\n        return\r\n    if path.exists() and path.stat().st_size > 0:\r\n        ensure_trailing_newline(path)\r\n        df.to_csv(path, mode=\"a\", header=False, index=False, encoding=\"utf-8\", lineterminator=\"\\n\")\r\n    else:\r\n        df.to_csv(path, mode=\"w\", header=True, index=False, encoding=\"utf-8\", lineterminator=\"\\n\")\r\n\r\n\r\n# ---------- File introspection ----------\r\ndef tail_lines(path: Path, n: int = 5) -> List[str]:\r\n    \"\"\"Read the last n lines of a text file safely (UTF-8 assumed).\"\"\"\r\n    if not path.exists() or path.stat().st_size == 0:\r\n        return []\r\n    with path.open(\"rb\") as f:\r\n        f.seek(0, 2)\r\n        size = f.tell()\r\n        block = 1024\r\n        data = b\"\"\r\n        while len(data.splitlines()) <= n and f.tell() > 0:\r\n            step = min(block, f.tell())\r\n            f.seek(-step, 1)\r\n            data = f.read(step) + data\r\n            f.seek(-step, 1)\r\n        lines = data.splitlines()[-n:]\r\n    return [ln.decode(\"utf-8\", errors=\"replace\") for ln in lines]\r\n\r\n\r\ndef count_rows_fast(path: Path) -> Optional[int]:\r\n    \"\"\"Count data rows quickly (excludes header).\"\"\"\r\n    if not path.exists() or path.stat().st_size == 0:\r\n        return 0\r\n    try:\r\n        with path.open(\"rb\") as f:\r\n            n = 0\r\n            for n, _ in enumerate(f, start=1):\r\n                pass\r\n        return max(0, n - 1)\r\n    except Exception:\r\n        return None\r\n</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- PAGE: 5_Bulk_Upload_CSV.py (updated) -->\r\n    <section class=\"section-card\" id=\"page\">\r\n      <div class=\"banner\">\r\n        <small>Code</small>\r\n        <h1>pages/5_Bulk_Upload_CSV.py</h1>\r\n        <p>Now imports helpers for safety, clarity, and reuse</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre># pages/5_Bulk_Upload_CSV.py\r\nfrom __future__ import annotations\r\n\r\nfrom pathlib import Path\r\nfrom typing import List, Tuple\r\n\r\nimport pandas as pd\r\nimport streamlit as st\r\n\r\nfrom bulk_upload_utils import (\r\n    align_to_base,\r\n    anti_join_vs_base,\r\n    coerce_common_datetime_cols,\r\n    count_rows_fast,\r\n    ensure_trailing_newline,\r\n    format_datetime_cols_for_write,\r\n    infer_numeric,\r\n    last_byte_is_newline,\r\n    read_base_columns,\r\n    read_one_csv,\r\n    safe_append_csv,\r\n    standardize_cols,\r\n    tail_lines,\r\n)\r\n\r\nst.title(\"📤 Bulk CSV Upload → Append to Base File (safe & helper-backed)\")\r\nst.caption(\"Combine multiple CSVs and append them to /workspaces/photos/data/weather.csv without line merges.\")\r\n\r\n# -----------------------------\r\n# Constants\r\n# -----------------------------\r\nBASE_CSV_PATH = Path(\"/workspaces/photos/data/weather.csv\")\r\nBASE_CSV_PATH.parent.mkdir(parents=True, exist_ok=True)  # ensure folder exists\r\n\r\n# -----------------------------\r\n# Sidebar\r\n# -----------------------------\r\nwith st.sidebar:\r\n    st.header(\"Upload\")\r\n    files = st.file_uploader(\"Choose one or more CSV files\", type=[\"csv\"], accept_multiple_files=True)\r\n\r\n    st.header(\"Read Options\")\r\n    encoding = st.selectbox(\"Encoding\", [\"utf-8\", \"utf-8-sig\", \"latin-1\", \"cp1252\"], index=0)\r\n    sep_choice = st.selectbox(\"Delimiter\", [\"Auto (sniff)\", \"Comma (,)\", \"Semicolon (;)\", \"Tab (\\\\t)\"], index=0)\r\n    decimal = st.selectbox(\"Decimal marker\", [\".\", \",\"], index=0)\r\n    header_row = st.checkbox(\"First row is header\", value=True)\r\n    treat_empty_as_na = st.checkbox(\"Treat empty strings as missing\", value=True)\r\n    parse_dates_auto = st.checkbox(\"Auto-parse common date/time columns\", value=True)\r\n\r\n    st.header(\"Standardize Columns\")\r\n    col_case = st.selectbox(\"Case\", [\"keep\", \"lower\", \"upper\"], index=0)\r\n    col_trim = st.checkbox(\"Trim whitespace\", value=True)\r\n    col_spaces = st.selectbox(\"Spaces\", [\"keep\", \"single\", \"underscore\"], index=0)\r\n    add_source = st.checkbox(\"Add source filename column\", value=False)\r\n    source_col_name = st.text_input(\"Source column name\", value=\"source_file\", disabled=not add_source)\r\n\r\n    st.header(\"Combine Mode\")\r\n    union_mode = st.radio(\"How to combine columns\", [\"Union by name (outer)\", \"Only common columns (inner)\"], index=0)\r\n\r\n    st.header(\"Post-processing\")\r\n    try_infer_numeric = st.checkbox(\"Try to convert numeric-looking text\", value=True)\r\n    drop_empty_cols = st.checkbox(\"Drop all-empty columns\", value=True)\r\n    dt_write_mode = st.selectbox(\"Format datetimes on write\", [\"date\", \"iso\", \"keep\"], index=0)\r\n\r\n    st.header(\"Deduplicate (within upload)\")\r\n    dedup_mode = st.radio(\"Remove duplicates\", [\"No\", \"Across all columns\", \"Choose columns\"], index=0)\r\n\r\n    st.header(\"Append Control\")\r\n    dry_run = st.checkbox(\"Dry run (preview only, don't write)\", value=False)\r\n\r\n    st.header(\"Cache\")\r\n    if st.button(\"Clear cache\"):\r\n        st.cache_data.clear()\r\n        st.success(\"Cache cleared.\")\r\n\r\n# -----------------------------\r\n# Step 1: Read all files\r\n# -----------------------------\r\nif not files:\r\n    st.info(\"Upload one or more CSV files to start.\")\r\n    st.stop()\r\n\r\nst.subheader(\"Step 1 — File Summary\")\r\n\r\ndfs: List[pd.DataFrame] = []\r\nmeta: List[Tuple[str, int, int]] = []\r\n\r\nprogress = st.progress(0.0)\r\nfor i, f in enumerate(files, start=1):\r\n    df_i = read_one_csv(\r\n        f.getvalue(),\r\n        encoding=encoding,\r\n        sep_choice=sep_choice,\r\n        decimal=decimal,\r\n        header_row=header_row,\r\n        treat_empty_as_na=treat_empty_as_na,\r\n        parse_dates_auto=parse_dates_auto,\r\n    )\r\n    df_i.columns = standardize_cols(df_i.columns, case=col_case, trim=col_trim, spaces=col_spaces)\r\n    if add_source:\r\n        df_i[source_col_name] = f.name\r\n    if try_infer_numeric:\r\n        df_i = infer_numeric(df_i)\r\n    if drop_empty_cols:\r\n        df_i = df_i.dropna(axis=1, how=\"all\")\r\n\r\n    dfs.append(df_i)\r\n    meta.append((f.name, df_i.shape[0], df_i.shape[1]))\r\n    progress.progress(i / len(files))\r\nprogress.empty()\r\n\r\nst.dataframe(pd.DataFrame(meta, columns=[\"file\", \"rows\", \"cols\"]), width=\"stretch\")\r\n\r\nwith st.expander(\"Preview first rows of each file\"):\r\n    for f, df_i in zip(files, dfs):\r\n        st.markdown(f\"**{f.name}** — {len(df_i):,} rows × {len(df_i.columns)} cols\")\r\n        st.dataframe(df_i.head(10), width=\"stretch\")\r\n\r\n# -----------------------------\r\n# Step 2: Combine uploads\r\n# -----------------------------\r\nst.subheader(\"Step 2 — Combine\")\r\njoin_how = \"outer\" if union_mode.startswith(\"Union\") else \"inner\"\r\n\r\nif join_how == \"outer\":\r\n    ordered_cols: List[str] = []\r\n    seen = set()\r\n    for df_i in dfs:\r\n        for c in df_i.columns:\r\n            if c not in seen:\r\n                seen.add(c)\r\n                ordered_cols.append(c)\r\nelse:\r\n    common = set(dfs[0].columns)\r\n    for df_i in dfs[1:]:\r\n        common &= set(df_i.columns)\r\n    ordered_cols = [c for c in dfs[0].columns if c in common]\r\n\r\nif not ordered_cols:\r\n    st.error(\"No overlapping columns to combine. Adjust standardization or use union mode.\")\r\n    st.stop()\r\n\r\ncombined = pd.concat(\r\n    [d[ordered_cols] if join_how == \"inner\" else d.reindex(columns=ordered_cols) for d in dfs],\r\n    axis=0,\r\n    ignore_index=True,\r\n)\r\n\r\n# Within-upload dedupe\r\nbefore_rows = combined.shape[0]\r\nremoved_within = 0\r\nif dedup_mode == \"Across all columns\":\r\n    combined = combined.drop_duplicates()\r\n    removed_within = before_rows - combined.shape[0]\r\nelif dedup_mode == \"Choose columns\":\r\n    chosen = st.multiselect(\"Deduplicate on columns\", options=ordered_cols, default=ordered_cols)\r\n    if chosen:\r\n        combined = combined.drop_duplicates(subset=chosen)\r\n        removed_within = before_rows - combined.shape[0]\r\nif removed_within:\r\n    st.success(f\"Removed {removed_within:,} duplicate rows within the uploaded data.\")\r\n\r\nst.markdown(\"**Combined preview**\")\r\nst.dataframe(combined.head(100), width=\"stretch\")\r\n\r\n# -----------------------------\r\n# Step 3: Append to base CSV (with helper safety)\r\n# -----------------------------\r\nst.subheader(\"Step 3 — Append to Base CSV\")\r\nst.caption(f\"Base file path: `{BASE_CSV_PATH}`\")\r\n\r\n# Base stats and tail preview\r\nbase_cols = read_base_columns(BASE_CSV_PATH)\r\nrows_in_base = count_rows_fast(BASE_CSV_PATH)\r\nlb = last_byte_is_newline(BASE_CSV_PATH)\r\ncol1, col2, col3 = st.columns(3)\r\ncol1.metric(\"Rows in base\", \"—\" if rows_in_base is None else f\"{rows_in_base:,}\")\r\ncol2.metric(\"Has trailing newline\", \"N/A\" if lb is None else (\"Yes\" if lb else \"No\"))\r\ncol3.metric(\"Base exists\", \"Yes\" if base_cols is not None else \"No (will create)\")\r\n\r\nif base_cols:\r\n    st.markdown(\"**Base CSV schema (in order):**\")\r\n    st.code(\", \".join(base_cols), language=\"text\")\r\n    with st.expander(\"Tail of base file (last 5 lines)\"):\r\n        for ln in tail_lines(BASE_CSV_PATH, 5):\r\n            st.text(ln)\r\n\r\n# Align & optional dedupe vs base\r\nif base_cols is None:\r\n    st.warning(\"Base CSV does not exist or is empty. Appending will CREATE it using the combined upload's columns.\")\r\n    to_write = format_datetime_cols_for_write(combined, mode=dt_write_mode)\r\n    st.code(\", \".join(to_write.columns), language=\"text\")\r\nelse:\r\n    aligned = align_to_base(combined, base_cols)\r\n    to_write = format_datetime_cols_for_write(aligned, mode=dt_write_mode)\r\n\r\n    st.markdown(\"**Preview of rows to append (aligned):**\")\r\n    st.dataframe(to_write.head(30), width=\"stretch\")\r\n\r\n    # Optional dedupe vs base\r\n    st.markdown(\"**Duplicate check vs base (optional)**\")\r\n    dedupe_vs_base = st.radio(\r\n        \"Avoid adding rows that already exist in the base (match by):\",\r\n        [\"Off\", \"All base columns\", \"Choose columns\"],\r\n        index=0,\r\n        horizontal=True,\r\n    )\r\n    if dedupe_vs_base != \"Off\":\r\n        if dedupe_vs_base == \"All base columns\":\r\n            keys = base_cols\r\n        else:\r\n            keys = st.multiselect(\"Columns to match\", options=base_cols, default=base_cols)\r\n        if keys:\r\n            to_write, removed_vs_base = anti_join_vs_base(to_write, BASE_CSV_PATH, keys)\r\n            if removed_vs_base:\r\n                st.success(f\"Skipped {removed_vs_base:,} rows already present in base.\")\r\n\r\n# Action buttons\r\ncolA, colB = st.columns(2)\r\nif dry_run:\r\n    colA.info(f\"Dry run active — would append {len(to_write):,} rows. No changes will be written.\")\r\nelse:\r\n    write_btn = colA.button(f\"Append {len(to_write):,} rows to base CSV\")\r\n    if write_btn:\r\n        try:\r\n            safe_append_csv(BASE_CSV_PATH, to_write)\r\n            st.success(f\"Appended {len(to_write):,} rows to `{BASE_CSV_PATH}` safely.\")\r\n            st.toast(\"Append complete\", icon=\"✅\")\r\n            st.caption(\"If other pages still show old data, use their sidebar → Clear cache.\")\r\n        except Exception as e:\r\n            st.error(f\"Failed to append to base CSV: {e}\")\r\n\r\n# Optional: manual newline fix (rarely needed now)\r\nif lb is False:\r\n    if colB.button(\"Fix trailing newline now\"):\r\n        try:\r\n            ensure_trailing_newline(BASE_CSV_PATH)\r\n            st.success(\"Added trailing newline to base file.\")\r\n        except Exception as e:\r\n            st.error(f\"Failed to add trailing newline: {e}\")\r\n\r\n# -----------------------------\r\n# Optional download\r\n# -----------------------------\r\nst.subheader(\"Optional — Download Combined Upload\")\r\nst.download_button(\r\n    \"⬇️ Download combined CSV\",\r\n    data=combined.to_csv(index=False).encode(\"utf-8\"),\r\n    file_name=\"combined_upload.csv\",\r\n    mime=\"text/csv\",\r\n)\r\n</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- RUN -->\r\n    <section class=\"section-card\" id=\"run\">\r\n      <div class=\"banner\">\r\n        <small>Run</small>\r\n        <h1>Run in Codespaces</h1>\r\n        <p>Install → Run → Open Port</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>pip install -r requirements.txt\r\nstreamlit run app.py --server.address 0.0.0.0 --server.port 8000</pre>\r\n        <p>Open the forwarded port (8000). In the sidebar you'll now see <strong>\"5_Bulk_Upload_CSV\"</strong>.</p>\r\n        <p><em>Note:</em> The script writes to <span class=\"inline\">/workspaces/photos/data/weather.csv</span>. The folder is created if missing.</p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "8ec8fced-f5ef-40f5-a2d7-1977417eda4d"
        },
        {
          "kind": "article",
          "order": 6,
          "title": "The One-Thing Improvement Loop",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Modularity Tips • The One-Thing Improvement Loop</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Grid & code === */\r\n.quick-grid { display: grid; grid-template-columns: 1fr; gap: 14px; margin-top: 12px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fafafa; }\r\n.box h3 { margin: 0 0 6px; font-size: 17px; color: #000; }\r\n.box p { margin: 0; }\r\n\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 14px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n\r\n/* Responsive */\r\n@media (min-width: 720px) { .quick-grid { grid-template-columns: repeat(2, 1fr); } }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Modularity</small>\r\n        <h1>The “One-Thing” Improvement Loop</h1>\r\n        <p>Make one change. Ship. Repeat — endlessly and safely.</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          A simple habit drives continuous improvement: ask your assistant to do **one specific upgrade** to your script,\r\n          re-write it end-to-end, and repeat. Because changes are modular and focused, quality rises without chaos.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- THE PROMPT PATTERN -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Pattern</small>\r\n        <h1>The Core Prompt</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>Start with one aspect (e.g., speed, UI, UX, reliability) and ask for a single change:</p>\r\n<pre>\"Do one thing that makes the 'speed' of my script better. Write the script from A to Z.\"</pre>\r\n        <p>Then, loop it with positive reinforcement:</p>\r\n<pre>\"Well done, do one thing that makes the 'speed' of my script better. Write it again from A to Z.\"</pre>\r\n        <p><strong>Why this works:</strong> it adds exactly one improvement each cycle, keeping scope small and momentum high.</p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- ASPECTS YOU CAN TARGET -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Aspects</small>\r\n        <h1>What You Can Improve — One at a Time</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"quick-grid\">\r\n          <div class=\"box\">\r\n            <h3>Speed / Performance</h3>\r\n            <p>Vectorized ops, caching, I/O batching, lazy loads, algorithmic tweaks.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h3>User Interface</h3>\r\n            <p>Cleaner layout, consistent spacing, better labels/placeholders, responsive cards.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h3>User Experience</h3>\r\n            <p>Safer defaults, undo/confirm flows, progress & toasts, sensible empty states.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h3>Reliability</h3>\r\n            <p>Error handling, retries with backoff, input validation, schema checks.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h3>Security</h3>\r\n            <p>Sanitize inputs, secrets handling, least privilege, dependency pins.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h3>Maintainability</h3>\r\n            <p>Split into modules, docstrings, type hints, linting, tests.</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- LOOP WORKFLOW -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Workflow</small>\r\n        <h1>How to Run the Never-Ending Loop</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <ol>\r\n          <li><strong>Pick one aspect.</strong> E.g., “speed”.</li>\r\n          <li><strong>Run the core prompt.</strong> Get a full rewritten script.</li>\r\n          <li><strong>Test locally.</strong> Run unit checks or a quick manual run (Streamlit/Codespace).</li>\r\n          <li><strong>Commit & push.</strong> One improvement = one commit.</li>\r\n          <li><strong>Repeat.</strong> Ask for the next “one thing” on the same aspect or switch to a new one.</li>\r\n        </ol>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- READY PROMPTS -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Templates</small>\r\n        <h1>Copy-Paste Prompts</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p><strong>Performance:</strong></p>\r\n<pre>\"Do one thing that makes the 'speed' of my script better. Write the script from A to Z.\"</pre>\r\n        <p><strong>User Interface:</strong></p>\r\n<pre>\"Do one thing that makes the 'user interface' clearer and more consistent. Write the script from A to Z.\"</pre>\r\n        <p><strong>User Experience:</strong></p>\r\n<pre>\"Do one thing that improves the 'user experience' and reduces friction. Write the script from A to Z.\"</pre>\r\n        <p><strong>Reliability:</strong></p>\r\n<pre>\"Do one thing that improves 'reliability' and error handling. Write the script from A to Z.\"</pre>\r\n        <p><strong>Maintainability:</strong></p>\r\n<pre>\"Do one thing that improves 'modularity and readability' without changing behavior. Write the script from A to Z.\"</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- GUARDRAILS -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Guardrails</small>\r\n        <h1>Make It Safe & Effective</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <ul>\r\n          <li><strong>One change only.</strong> If the model adds many tweaks, ask it to limit to exactly one.</li>\r\n          <li><strong>Keep behavior.</strong> For refactors, say “no behavior changes unless necessary.”</li>\r\n          <li><strong>Measure.</strong> For speed, include a quick timing or profile note to verify the win.</li>\r\n          <li><strong>Version control.</strong> Commit each improvement separately; easy rollbacks.</li>\r\n          <li><strong>Stay modular.</strong> Prefer helper modules (e.g., <span class=\"inline\">lib_data.py</span> or <span class=\"inline\">bulk_upload_utils.py</span>) for shared changes.</li>\r\n        </ul>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- WHY IT WORKS -->\r\n    <section class=\"section-card\">\r\n      <div class=\"banner\">\r\n        <small>Why</small>\r\n        <h1>Why the Never-Ending Prompt Works</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <ul>\r\n          <li><strong>Focus:</strong> One clear goal prevents scope creep.</li>\r\n          <li><strong>Momentum:</strong> Small wins stack quickly into big gains.</li>\r\n          <li><strong>Safety:</strong> Each change is easy to test and revert.</li>\r\n          <li><strong>Modularity:</strong> Encourages clean separations and helper libraries.</li>\r\n        </ul>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "e3d4a1ad-3c66-4055-bd27-f2eee2e8b24f"
        },
        {
          "kind": "article",
          "order": 7,
          "title": "Repo Analyzer Script",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Codex-Level Modularity Tips • Repo Analyzer Script</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1000px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Video container === */\r\n.video-container {\r\n  margin-bottom: 32px;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n  background: #f8f9fa;\r\n  padding: 16px;\r\n}\r\n\r\n.video-container iframe {\r\n  width: 100%;\r\n  height: auto;\r\n  aspect-ratio: 16/9;\r\n  border-radius: 8px;\r\n}\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 14px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO SECTION -->\r\n    <div class=\"video-container\">\r\n      <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/A9LEplNTmMI\" title=\"Repo Analyzer Script\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n    </div>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Codex-Level</small>\r\n        <h1>Modularity Tips + Whole-Repo Analyzer</h1>\r\n        <p>Diagnose functions, complexity, typing, imports, and anti-patterns across your codebase</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          When a project grows, modularity isn't just about splitting files — it's about **continuous diagnostics**.\r\n          Drop the analyzer below at your repo root and run it whenever you need a quick health check or refactor plan.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- WHY / WHAT IT CHECKS -->\r\n    <section class=\"section-card\" id=\"why\">\r\n      <div class=\"banner\">\r\n        <small>Why</small>\r\n        <h1>What This Analyzer Catches</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <ul>\r\n          <li><strong>Function inventory:</strong> names, args, length (LOC), missing docstrings, missing type hints.</li>\r\n          <li><strong>Complexity signals:</strong> naive cyclomatic score (ifs/loops/try/and/or/comprehensions).</li>\r\n          <li><strong>Anti-patterns:</strong> broad <span class=\"inline\">except:</span>, nested functions, very long functions.</li>\r\n          <li><strong>Imports:</strong> stdlib vs third-party vs local; quick scan for unused (best-effort).</li>\r\n          <li><strong>Hygiene:</strong> <span class=\"inline\">TODO/FIXME</span> markers, trailing whitespace, mixed tabs/spaces.</li>\r\n          <li><strong>Project view:</strong> per-file summaries + top offenders list to guide your next \"one-thing\" fix.</li>\r\n        </ul>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- REPO LAYOUT -->\r\n    <section class=\"section-card\" id=\"layout\">\r\n      <div class=\"banner\">\r\n        <small>Layout</small>\r\n        <h1>Where This Fits</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>.\r\n├─ app.py\r\n├─ lib_data.py\r\n├─ bulk_upload_utils.py\r\n├─ pages/\r\n│  ├─ 1_Home.py\r\n│  ├─ 2_Visualization.py\r\n│  ├─ 3_Data_View.py\r\n│  ├─ 4_Quick_Profile.py\r\n│  └─ 5_Bulk_Upload_CSV.py\r\n└─ analyze_repo.py   <— NEW (run from repo root)\r\n</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- SCRIPT -->\r\n    <section class=\"section-card\" id=\"script\">\r\n      <div class=\"banner\">\r\n        <small>Code</small>\r\n        <h1>analyze_repo.py (Standard-Library Only)</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre># analyze_repo.py\r\nimport ast\r\nimport json\r\nimport re\r\nimport sys\r\nfrom dataclasses import dataclass, asdict\r\nfrom pathlib import Path\r\nfrom typing import List, Dict, Optional, Tuple\r\n\r\nEXCLUDE_DIRS = {\".git\", \".venv\", \"venv\", \"__pycache__\", \".mypy_cache\", \".pytest_cache\", \".idea\", \".vscode\"}\r\nPY_EXT = {\".py\"}\r\n\r\n# --- heuristics ---\r\nLONG_FUNC_LOC = 60\r\nHIGH_COMPLEXITY = 10  # naive cyclomatic threshold\r\n\r\nBRANCH_NODES = (ast.If, ast.For, ast.While, ast.Try, ast.With, ast.BoolOp, ast.IfExp, ast.ExceptHandler, ast.comprehension)\r\n\r\n@dataclass\r\nclass FuncReport:\r\n  name: str\r\n  lineno: int\r\n  loc: int\r\n  args: List[str]\r\n  has_doc: bool\r\n  typed_args: bool\r\n  typed_ret: bool\r\n  complexity: int\r\n  nested: bool\r\n  broad_except: bool\r\n\r\n@dataclass\r\nclass FileReport:\r\n  path: str\r\n  functions: List[FuncReport]\r\n  imports: Dict[str, List[str]]  # {\"stdlib\":[], \"thirdparty\":[], \"local\":[]}\r\n  todos: int\r\n  mixed_ws: bool\r\n  trailing_ws: bool\r\n  long_funcs: int\r\n  high_complexity_funcs: int\r\n\r\ndef is_stdlib_module(mod: str) -> bool:\r\n  # Heuristic: builtins + common stdlib modules (fast, no imports)\r\n  COMMON_STDLIB = {\r\n    \"os\",\"sys\",\"re\",\"json\",\"pathlib\",\"typing\",\"dataclasses\",\"functools\",\"itertools\",\"collections\",\r\n    \"subprocess\",\"datetime\",\"time\",\"math\",\"random\",\"logging\",\"argparse\",\"shutil\",\"tempfile\",\"hashlib\",\r\n    \"http\",\"urllib\",\"unittest\",\"asyncio\",\"enum\",\"inspect\",\"traceback\",\"gzip\",\"csv\",\"io\",\"zipfile\"\r\n  }\r\n  base = (mod or \"\").split(\".\")[0]\r\n  return base in COMMON_STDLIB\r\n\r\ndef guess_import_kind(name: str, file_path: Path) -> str:\r\n  # local: relative imports or top-level package present in repo\r\n  if name.startswith(\".\"):\r\n    return \"local\"\r\n  if is_stdlib_module(name):\r\n    return \"stdlib\"\r\n  # very rough: if there's a sibling dir/file named like the import -> local\r\n  root = file_path.parent\r\n  if (root / name).exists() or (root / (name + \".py\")).exists():\r\n    return \"local\"\r\n  return \"thirdparty\"\r\n\r\ndef naive_complexity(node: ast.AST) -> int:\r\n  score = 1\r\n  for n in ast.walk(node):\r\n    if isinstance(n, BRANCH_NODES):\r\n      score += 1\r\n    if isinstance(n, ast.BoolOp):\r\n      score += max(0, len(n.values) - 1)\r\n  return score\r\n\r\ndef func_loc(src: str, node: ast.AST) -> int:\r\n  try:\r\n    # Python 3.8+ nodes often have end_lineno\r\n    end = getattr(node, \"end_lineno\", node.lineno)\r\n    return max(1, end - node.lineno + 1)\r\n  except Exception:\r\n    return 1\r\n\r\ndef has_type_hints(func: ast.FunctionDef) -> Tuple[bool,bool]:\r\n  typed_args = any(a.annotation is not None for a in func.args.args + func.args.kwonlyargs) or \\\r\n               (func.args.vararg and func.args.vararg.annotation is not None) or \\\r\n               (func.args.kwarg and func.args.kwarg.annotation is not None)\r\n  typed_ret = func.returns is not None\r\n  return typed_args, typed_ret\r\n\r\ndef scan_file(path: Path) -> Optional[FileReport]:\r\n  try:\r\n    text = path.read_text(encoding=\"utf-8\")\r\n  except Exception:\r\n    return None\r\n  try:\r\n    tree = ast.parse(text, filename=str(path))\r\n  except SyntaxError:\r\n    return None\r\n\r\n  functions: List[FuncReport] = []\r\n  imports = {\"stdlib\": [], \"thirdparty\": [], \"local\": []}\r\n  todos = len(re.findall(r\"(?i)\\\\b(TODO|FIXME|HACK)\\\\b\", text))\r\n  mixed_ws = \"\\\\t\" in text and \"  \" in text  # crude indicator\r\n  trailing_ws = bool(re.search(r\"[ \\\\t]+\\\\n\", text))\r\n\r\n  # imports\r\n  for n in ast.walk(tree):\r\n    if isinstance(n, ast.Import):\r\n      for alias in n.names:\r\n        kind = guess_import_kind(alias.name, path)\r\n        imports[kind].append(alias.name)\r\n    elif isinstance(n, ast.ImportFrom):\r\n      mod = n.module or \"\"\r\n      kind = guess_import_kind(mod if mod else \".\", path)\r\n      imports[kind].append(mod or \".\")\r\n\r\n  # functions\r\n  for n in ast.walk(tree):\r\n    if isinstance(n, (ast.FunctionDef, ast.AsyncFunctionDef)):\r\n      args = [a.arg for a in n.args.args]\r\n      has_doc = ast.get_docstring(n) is not None\r\n      t_args, t_ret = has_type_hints(n)\r\n      comp = naive_complexity(n)\r\n      loc = func_loc(text, n)\r\n      nested = any(isinstance(p, (ast.FunctionDef, ast.AsyncFunctionDef)) for p in ast.walk(n) if p is not n and hasattr(p, \"body\"))\r\n      broad = any(isinstance(e, ast.ExceptHandler) and e.type is None for e in ast.walk(n))\r\n      functions.append(FuncReport(\r\n        name=n.name, lineno=n.lineno, loc=loc, args=args, has_doc=has_doc,\r\n        typed_args=t_args, typed_ret=t_ret, complexity=comp, nested=nested, broad_except=broad\r\n      ))\r\n\r\n  long_funcs = sum(1 for f in functions if f.loc >= LONG_FUNC_LOC)\r\n  high_complexity_funcs = sum(1 for f in functions if f.complexity >= HIGH_COMPLEXITY)\r\n\r\n  return FileReport(\r\n    path=str(path.relative_to(Path.cwd())),\r\n    functions=functions, imports=imports, todos=todos,\r\n    mixed_ws=mixed_ws, trailing_ws=trailing_ws,\r\n    long_funcs=long_funcs, high_complexity_funcs=high_complexity_funcs\r\n  )\r\n\r\ndef discover_py_files(root: Path) -> List[Path]:\r\n  out = []\r\n  for p in root.rglob(\"*.py\"):\r\n    rel = p.relative_to(root)\r\n    if any(part in EXCLUDE_DIRS for part in rel.parts):\r\n      continue\r\n    out.append(p)\r\n  return out\r\n\r\ndef summarize(files: List[FileReport]) -> Dict:\r\n  total_funcs = sum(len(f.functions) for f in files)\r\n  missing_docs = sum(1 for fr in files for fn in fr.functions if not fn.has_doc)\r\n  untyped = sum(1 for fr in files for fn in fr.functions if not (fn.typed_args and fn.typed_ret))\r\n  long_funcs = sum(fr.long_funcs for fr in files)\r\n  high_comp = sum(fr.high_complexity_funcs for fr in files)\r\n  todos = sum(fr.todos for fr in files)\r\n\r\n  # top offenders by complexity/length\r\n  top_by_complex = sorted(\r\n    ((fr.path, fn.name, fn.complexity, fn.lineno) for fr in files for fn in fr.functions),\r\n    key=lambda x: x[2], reverse=True\r\n  )[:10]\r\n  top_by_length = sorted(\r\n    ((fr.path, fn.name, fn.loc, fn.lineno) for fr in files for fn in fr.functions),\r\n    key=lambda x: x[2], reverse=True\r\n  )[:10]\r\n\r\n  return {\r\n    \"files_scanned\": len(files),\r\n    \"functions_total\": total_funcs,\r\n    \"missing_docstrings\": missing_docs,\r\n    \"untyped_functions\": untyped,\r\n    \"long_functions_60+loc\": long_funcs,\r\n    \"high_complexity_10+\": high_comp,\r\n    \"todos_fixme\": todos,\r\n    \"top_complexity\": top_by_complex,\r\n    \"top_length\": top_by_length,\r\n  }\r\n\r\ndef main():\r\n  root = Path.cwd()\r\n  py_files = discover_py_files(root)\r\n  reports: List[FileReport] = []\r\n  for p in py_files:\r\n    fr = scan_file(p)\r\n    if fr:\r\n      reports.append(fr)\r\n\r\n  summary = summarize(reports)\r\n  print(\"# Repo Summary\")\r\n  for k, v in summary.items():\r\n    print(f\"- {k}: {v}\")\r\n\r\n  print(\"\\\\n# Suggestions (first pass)\")\r\n  if summary[\"missing_docstrings\"] > 0:\r\n    print(\"* Add docstrings to public functions (improves UX for readers and IDE help).\")\r\n  if summary[\"untyped_functions\"] > 0:\r\n    print(\"* Add type hints to function signatures + return types for safer refactors.\")\r\n  if summary[\"high_complexity_10+\"] > 0:\r\n    print(\"* Reduce cyclomatic complexity: split into helpers or early returns.\")\r\n  if summary[\"long_functions_60+loc\"] > 0:\r\n    print(\"* Break very long functions (≥60 LOC) into smaller units.\")\r\n\r\n  # Optional JSON dump\r\n  out = {\r\n    \"summary\": summary,\r\n    \"files\": [\r\n      {\r\n        **asdict(fr),\r\n        \"functions\": [asdict(fn) for fn in fr.functions],\r\n      }\r\n      for fr in reports\r\n    ]\r\n  }\r\n  (root / \"analysis_report.json\").write_text(json.dumps(out, indent=2), encoding=\"utf-8\")\r\n  print(\"\\\\nWrote analysis_report.json\")\r\n\r\nif __name__ == \"__main__\":\r\n  main()\r\n</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- HOW TO RUN (CODESPACES) -->\r\n    <section class=\"section-card\" id=\"run\">\r\n      <div class=\"banner\">\r\n        <small>Run</small>\r\n        <h1>Run the Analyzer (Codespaces or Local)</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>From your repository root:</p>\r\n<pre>python analyze_repo.py</pre>\r\n        <p>It prints a summary and writes a detailed <span class=\"inline\">analysis_report.json</span> you can commit or review.</p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- SAMPLE OUTPUT -->\r\n    <section class=\"section-card\" id=\"examples\">\r\n      <div class=\"banner\">\r\n        <small>Examples</small>\r\n        <h1>Sample Findings (What You'll See)</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre># Repo Summary\r\n- files_scanned: 9\r\n- functions_total: 57\r\n- missing_docstrings: 22\r\n- untyped_functions: 31\r\n- long_functions_60+loc: 4\r\n- high_complexity_10+: 5\r\n- todos_fixme: 7\r\n- top_complexity: [('pages/5_Bulk_Upload_CSV.py','_read_one_csv',15,120), ...]\r\n- top_length: [('lib_data.py','sidebar_data_source',98,40), ...]\r\n\r\n# Suggestions (first pass)\r\n* Add docstrings to public functions (improves UX for readers and IDE help).\r\n* Add type hints to function signatures + return types for safer refactors.\r\n* Reduce cyclomatic complexity: split into helpers or early returns.\r\n* Break very long functions (≥60 LOC) into smaller units.\r\n\r\nWrote analysis_report.json</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- PROMPTS TO ACT ON RESULTS -->\r\n    <section class=\"section-card\" id=\"prompts\">\r\n      <div class=\"banner\">\r\n        <small>Prompts</small>\r\n        <h1>Turn Findings Into \"One-Thing\" Fixes</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>Use your improvement loop to address top items one by one:</p>\r\n        <ul>\r\n          <li><strong>Docstrings:</strong><br>\r\n            <pre>\"Add Google-style docstrings to the 5 longest public functions in lib_data.py. Write the file from A to Z.\"</pre>\r\n          </li>\r\n          <li><strong>Typing:</strong><br>\r\n            <pre>\"Add precise type hints (args + returns) to all functions in bulk_upload_utils.py. Keep behavior identical.\"</pre>\r\n          </li>\r\n          <li><strong>Complexity:</strong><br>\r\n            <pre>\"Reduce complexity of sidebar_data_source() by extracting helpers; limit function to ≤ 40 LOC. Write lib_data.py A→Z.\"</pre>\r\n          </li>\r\n          <li><strong>Performance:</strong><br>\r\n            <pre>\"Do one thing to make read_one_csv() faster for large files (no behavior changes). Write bulk_upload_utils.py A→Z.\"</pre>\r\n          </li>\r\n          <li><strong>UX polish:</strong><br>\r\n            <pre>\"Improve error messages and toasts in pages/5_Bulk_Upload_CSV.py (clear, actionable, short). Write file A→Z.\"</pre>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- EXTRA CHECKS -->\r\n    <section class=\"section-card\" id=\"extras\">\r\n      <div class=\"banner\">\r\n        <small>Extras</small>\r\n        <h1>Optional Enhancements (If You Want)</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <ul>\r\n          <li><strong>Fail CI on regressions:</strong> run <span class=\"inline\">analyze_repo.py</span> in GitHub Actions and diff <span class=\"inline\">analysis_report.json</span>.</li>\r\n          <li><strong>JSON → dashboard:</strong> build a small Streamlit page to visualize top offenders and trends over time.</li>\r\n          <li><strong>Strict mode:</strong> raise thresholds (e.g., LONG_FUNC_LOC=40) as quality improves.</li>\r\n        </ul>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "ee1aa3ee-7827-4b8f-8b4d-0a68d18901b7"
        }
      ]
    },
    {
      "order": 4,
      "title": "Module 4: Advanced SQL and Databases",
      "lessons": [
        {
          "kind": "article",
          "order": 1,
          "title": "Data • SQL, Databases, and Storage Basics",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Data • SQL, Databases, and Storage Basics</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF;\r\n  padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Media row (cover + caption) === */\r\n.media-row { display: flex; gap: 18px; align-items: center; flex-wrap: wrap; }\r\n.media-row .media { flex: 1 1 280px; min-width: 260px; }\r\n.media-row .caption { flex: 2 1 340px; min-width: 260px; }\r\n\r\n/* === Horizontal compare row === */\r\n.compare-row { display: flex; gap: 14px; flex-wrap: wrap; }\r\n.compare-box {\r\n  flex: 1 1 340px;\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 16px; background: #fff;\r\n}\r\n.compare-box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n.compare-box ul { margin: 8px 0 0 18px; }\r\n\r\n/* === Quick grid (responsive) === */\r\n.quick-grid {\r\n  display: grid; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));\r\n  gap: 14px; margin: 18px 0 0;\r\n}\r\n.quick-grid .box {\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fff;\r\n}\r\n.quick-grid .box h3 { margin: 0 0 6px; font-size: 17px; color: #000; }\r\n\r\n/* === Code block === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #f0f0f0; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Simple SVG diagram container === */\r\n.diagram {\r\n  background: #F6F6F6; border: 1px solid #EBEBEB; border-radius: 10px; padding: 10px;\r\n}\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- HERO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Data</small>\r\n      <h1>SQL, Databases, and Storage Basics</h1>\r\n      <p>Understand how your data flows: from CSVs to databases, locally and in the cloud.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"media-row\">\r\n        <div class=\"media\">\r\n          <img src=\"https://i.imgur.com/tiU6fGG.png\" alt=\"Data cover showing charts, tables, and analytics\" />\r\n        </div>\r\n        <div class=\"caption\">\r\n          <p><strong>Goal:</strong> Pick the right tools and storage for your data work. SQL gives you reliable querying, databases give you structure and speed, and the right storage choice keeps your work scalable.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHAT IS SQL -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Foundations</small>\r\n      <h1>What is SQL?</h1>\r\n      <p>The language of relational data</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p><strong>SQL</strong> (Structured Query Language) is a standard language used to create, read, update, and delete data in relational databases. It lets you <em>declare what you want</em> (e.g., “give me the average temperature per month”) and the database figures out how to compute it efficiently.</p>\r\n\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <h3>Why we use SQL</h3>\r\n          <ul>\r\n            <li>Powerful filtering, grouping, and joining across multiple tables</li>\r\n            <li>Speed and optimization via indexes and query planners</li>\r\n            <li>Data integrity with types, constraints, and transactions</li>\r\n            <li>Standardized — your skills transfer across many systems</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>A tiny example</h3>\r\n<pre>-- Average daily temp for 2025 by month\r\nSELECT strftime('%Y-%m', Date) AS month,\r\n       AVG(TempC) AS avg_temp\r\nFROM weather\r\nWHERE Date >= '2025-01-01' AND Date < '2026-01-01'\r\nGROUP BY 1\r\nORDER BY 1;</pre>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHAT IS A DB FILE -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Format</small>\r\n      <h1>What is a <code class=\"inline\">.db</code> File?</h1>\r\n      <p>Self‑contained database (often SQLite)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>A <code class=\"inline\">.db</code> file commonly refers to a <strong>SQLite database</strong>: a single file that stores tables, indexes, and metadata together. It supports transactions, constraints, and efficient queries — all without running a separate database server.</p>\r\n\r\n      <div class=\"diagram\" aria-label=\"SQLite db file visual\">\r\n        <svg viewBox=\"0 0 880 140\" width=\"100%\" height=\"140\" role=\"img\" aria-label=\"DB file diagram\">\r\n          <rect x=\"10\" y=\"20\" width=\"180\" height=\"100\" rx=\"10\" fill=\"#EDEDED\" stroke=\"#BDBDBD\"/>\r\n          <text x=\"100\" y=\"45\" text-anchor=\"middle\" font-size=\"14\" fill=\"#333\">weather.db</text>\r\n          <rect x=\"30\" y=\"60\" width=\"140\" height=\"18\" rx=\"4\" fill=\"#CFE8FF\" stroke=\"#8BB9E8\"/>\r\n          <text x=\"100\" y=\"74\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Table: weather</text>\r\n          <rect x=\"30\" y=\"86\" width=\"140\" height=\"18\" rx=\"4\" fill=\"#FFE0B2\" stroke=\"#E0AC6A\"/>\r\n          <text x=\"100\" y=\"100\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Index: Date</text>\r\n\r\n          <text x=\"450\" y=\"75\" text-anchor=\"middle\" font-size=\"14\" fill=\"#555\">SQL Engine inside a file → fast queries, ACID, indexes</text>\r\n\r\n          <line x1=\"200\" y1=\"70\" x2=\"700\" y2=\"70\" stroke=\"#999\" stroke-width=\"2\" marker-end=\"url(#arrow)\"/>\r\n          <defs>\r\n            <marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"6\" refY=\"3\" orient=\"auto\" markerUnits=\"strokeWidth\">\r\n              <path d=\"M0,0 L0,6 L6,3 z\" fill=\"#999\"></path>\r\n            </marker>\r\n          </defs>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DB vs CSV -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Comparison</small>\r\n      <h1>Database (<code class=\"inline\">.db</code>) vs CSV</h1>\r\n      <p>Pick the right tool for the job</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"compare-row\">\r\n        <div class=\"compare-box\">\r\n          <h3>Database (.db)</h3>\r\n          <ul>\r\n            <li>Multiple tables with relationships (joins)</li>\r\n            <li>Typed columns, constraints, transactions</li>\r\n            <li>Indexes → fast queries on large data</li>\r\n            <li>Concurrent access is safer</li>\r\n            <li>Great for production apps & analytics</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"compare-box\">\r\n          <h3>CSV (Comma-Separated Values)</h3>\r\n          <ul>\r\n            <li>Simple, universal, human-readable</li>\r\n            <li>One table per file; no schema enforcement</li>\r\n            <li>No indexing → slower queries at scale</li>\r\n            <li>Easy to share but prone to format drift</li>\r\n            <li>Great for exchange and quick inspection</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div class=\"quick-grid\" style=\"margin-top:14px;\">\r\n        <div class=\"box\">\r\n          <h3>When to use a DB</h3>\r\n          <p>When you need speed, joins, data integrity, or multiple users/apps querying the same source.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>When to use CSV</h3>\r\n          <p>When sharing a simple dataset, importing/exporting between tools, or prototyping quickly.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHERE TO STORE -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Storage</small>\r\n      <h1>Where Do We Store Our DB File?</h1>\r\n      <p>Local, server, and cloud options</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <h3>Local (Laptop/Codespace)</h3>\r\n          <ul>\r\n            <li><strong>Pros:</strong> Fast dev loop, offline, easy testing</li>\r\n            <li><strong>Cons:</strong> Single-user, harder to share/backup</li>\r\n            <li><strong>Good for:</strong> Prototypes, notebooks, small apps</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Server (On‑Prem/VPS)</h3>\r\n          <ul>\r\n            <li><strong>Pros:</strong> Centralized, controlled environment</li>\r\n            <li><strong>Cons:</strong> You maintain scaling, backups, security</li>\r\n            <li><strong>Good for:</strong> Internal tools, small teams</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Cloud‑Managed DB</h3>\r\n          <ul>\r\n            <li><strong>Pros:</strong> Scalability, backups, HA built‑in</li>\r\n            <li><strong>Cons:</strong> Cost, network latency, vendor lock‑in</li>\r\n            <li><strong>Good for:</strong> Production, multi‑team analytics</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Embedded / Edge</h3>\r\n          <ul>\r\n            <li><strong>Pros:</strong> Tiny footprint, offline first</li>\r\n            <li><strong>Cons:</strong> Limited concurrency, device constraints</li>\r\n            <li><strong>Good for:</strong> Mobile, IoT, field data‑logging</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"diagram\" style=\"margin-top:16px\" aria-label=\"Data flow diagram\">\r\n        <svg viewBox=\"0 0 980 140\" width=\"100%\" height=\"140\" role=\"img\" aria-label=\"Data pipeline flow\">\r\n          <!-- Sources -->\r\n          <rect x=\"10\" y=\"32\" width=\"150\" height=\"76\" rx=\"10\" fill=\"#E6F7E6\" stroke=\"#A8D5A8\"/>\r\n          <text x=\"85\" y=\"58\" text-anchor=\"middle\" font-size=\"13\" fill=\"#333\">Sources</text>\r\n          <text x=\"85\" y=\"78\" text-anchor=\"middle\" font-size=\"12\" fill=\"#555\">CSV • APIs • Sensors</text>\r\n          <!-- Arrow -->\r\n          <line x1=\"170\" y1=\"70\" x2=\"260\" y2=\"70\" stroke=\"#999\" stroke-width=\"2\" marker-end=\"url(#arrow)\"/>\r\n          <!-- Staging -->\r\n          <rect x=\"260\" y=\"32\" width=\"160\" height=\"76\" rx=\"10\" fill=\"#FFF3CD\" stroke=\"#E0C36C\"/>\r\n          <text x=\"340\" y=\"58\" text-anchor=\"middle\" font-size=\"13\" fill=\"#333\">Staging</text>\r\n          <text x=\"340\" y=\"78\" text-anchor=\"middle\" font-size=\"12\" fill=\"#555\">Clean/Validate</text>\r\n          <!-- Arrow -->\r\n          <line x1=\"420\" y1=\"70\" x2=\"520\" y2=\"70\" stroke=\"#999\" stroke-width=\"2\" marker-end=\"url(#arrow)\"/>\r\n          <!-- DB -->\r\n          <rect x=\"520\" y=\"22\" width=\"170\" height=\"96\" rx=\"10\" fill=\"#CFE8FF\" stroke=\"#8BB9E8\"/>\r\n          <text x=\"605\" y=\"48\" text-anchor=\"middle\" font-size=\"13\" fill=\"#333\">Database</text>\r\n          <text x=\"605\" y=\"68\" text-anchor=\"middle\" font-size=\"12\" fill=\"#555\">SQLite / Postgres / MySQL</text>\r\n          <text x=\"605\" y=\"86\" text-anchor=\"middle\" font-size=\"12\" fill=\"#555\">Tables + Indexes</text>\r\n          <!-- Arrow -->\r\n          <line x1=\"690\" y1=\"70\" x2=\"780\" y2=\"70\" stroke=\"#999\" stroke-width=\"2\" marker-end=\"url(#arrow)\"/>\r\n          <!-- Apps -->\r\n          <rect x=\"780\" y=\"32\" width=\"190\" height=\"76\" rx=\"10\" fill=\"#EDE7F6\" stroke=\"#C5B6E3\"/>\r\n          <text x=\"875\" y=\"58\" text-anchor=\"middle\" font-size=\"13\" fill=\"#333\">Apps & Analytics</text>\r\n          <text x=\"875\" y=\"78\" text-anchor=\"middle\" font-size=\"12\" fill=\"#555\">Dashboards • APIs • AI</text>\r\n\r\n          <defs>\r\n            <marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"6\" refY=\"3\" orient=\"auto\" markerUnits=\"strokeWidth\">\r\n              <path d=\"M0,0 L0,6 L6,3 z\" fill=\"#999\"></path>\r\n            </marker>\r\n          </defs>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- GETTING STARTED -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Hands‑On</small>\r\n      <h1>Getting Started (SQLite)</h1>\r\n      <p>Create a DB, import a CSV, and query it</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <h3>Create a database and a table (SQL)</h3>\r\n<pre>-- From a DB client or sqlite3 shell\r\nCREATE TABLE weather (\r\n  Date      TEXT,\r\n  TempC     REAL,\r\n  Rain_mm   REAL,\r\n  Wind_kmh  REAL\r\n);\r\n\r\n-- Insert a row\r\nINSERT INTO weather (Date, TempC, Rain_mm, Wind_kmh)\r\nVALUES ('2025-01-01', 14.2, 0.8, 11);</pre>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Load a CSV with Python</h3>\r\n<pre>import sqlite3, pandas as pd\r\n\r\ncon = sqlite3.connect(\"weather.db\")\r\ndf = pd.read_csv(\"data/weather.csv\")\r\ndf.to_sql(\"weather\", con, if_exists=\"append\", index=False)\r\n\r\nq = \"SELECT COUNT(*) FROM weather\"\r\nprint(pd.read_sql(q, con))</pre>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "acc5ab35-e406-4586-82a0-6e3a08c5c658"
        },
        {
          "kind": "article",
          "order": 2,
          "title": "Numerical Data • Discrete vs Continuous",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Numerical Data • Discrete vs Continuous (with Examples)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB;\r\n  border-radius: 14px;\r\n  overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04);\r\n  margin-bottom: 24px;\r\n  background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF;\r\n  padding: 18px 20px;\r\n}\r\n.section-card .banner small {\r\n  font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF;\r\n}\r\n.section-card .banner h1 {\r\n  margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF;\r\n}\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Media row === */\r\n.media-row { display: flex; gap: 18px; align-items: center; flex-wrap: wrap; }\r\n.media-row .media { flex: 1 1 320px; min-width: 260px; }\r\n.media-row .caption { flex: 2 1 360px; min-width: 260px; }\r\n\r\n/* === Quick grid === */\r\n.quick-grid {\r\n  display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\r\n  gap: 14px; margin: 18px 0 0;\r\n}\r\n.quick-grid .box {\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fff;\r\n}\r\n.quick-grid .box h3 { margin: 0 0 6px; font-size: 17px; color: #000; }\r\n\r\n/* === Compare row === */\r\n.compare-row { display: flex; gap: 14px; flex-wrap: wrap; }\r\n.compare-box {\r\n  flex: 1 1 320px;\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 16px; background: #fff;\r\n}\r\n.compare-box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n.compare-box ul { margin: 8px 0 0 18px; }\r\n\r\n/* === Tables === */\r\n.table-wrap { overflow-x: auto; margin-top: 10px; }\r\ntable { border-collapse: collapse; width: 100%; min-width: 520px; }\r\nth, td { border: 1px solid #EBEBEB; padding: 10px 12px; text-align: left; }\r\nth { background: #F6F6F6; color: #333; font-weight: 700; }\r\ntbody tr:nth-child(odd) { background: #FAFAFA; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- HERO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Data</small>\r\n      <h1>Numerical Data: Discrete vs Continuous</h1>\r\n      <p>What it is, how it differs, and practical examples with tables</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"media-row\">\r\n        <div class=\"media\">\r\n          <!-- You can replace the cover below with any relevant image if you like -->\r\n          <img src=\"https://i.imgur.com/tiU6fGG.png\" alt=\"Cover showing charts and numeric data visuals\" />\r\n        </div>\r\n        <div class=\"caption\">\r\n          <p><strong>Numerical data</strong> (also called quantitative data) represents quantities you can count or measure. It splits into two types:</p>\r\n          <div class=\"quick-grid\">\r\n            <div class=\"box\">\r\n              <h3>Discrete</h3>\r\n              <p>Counted, whole-number values (e.g., number of items, visits, defects). No fractions between adjacent values.</p>\r\n            </div>\r\n            <div class=\"box\">\r\n              <h3>Continuous</h3>\r\n              <p>Measured values on a scale (e.g., revenue, temperature, time). Can take any value within a range, including decimals.</p>\r\n            </div>\r\n          </div>\r\n          <p style=\"margin-top:12px;\"><strong>Examples:</strong> units sold (discrete), customers per day (discrete), order value (continuous), temperature (continuous), sensor readings (continuous).</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DISCRETE DATA -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Type</small>\r\n      <h1>Discrete Data</h1>\r\n      <p>Counts: integers from counting events or items</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"media-row\" style=\"margin-bottom:10px;\">\r\n        <div class=\"media\">\r\n          <img src=\"https://i.imgur.com/BMMO4vX.png\" alt=\"Discrete data concept image with separated columns/bars\" />\r\n        </div>\r\n        <div class=\"caption\">\r\n          <p><strong>Discrete variables</strong> arise from counting. They jump between whole numbers: 0, 1, 2, 3… with no values in between.</p>\r\n          <div class=\"compare-row\">\r\n            <div class=\"compare-box\">\r\n              <h3>Common use cases</h3>\r\n              <ul>\r\n                <li>Website sign‑ups per day</li>\r\n                <li>Defects per batch</li>\r\n                <li>Support tickets per hour</li>\r\n                <li>Visits per customer</li>\r\n              </ul>\r\n            </div>\r\n            <div class=\"compare-box\">\r\n              <h3>Typical charts</h3>\r\n              <ul>\r\n                <li>Bar charts (counts per category)</li>\r\n                <li>Column charts by time period</li>\r\n                <li>Dot plots for frequency</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Discrete tables -->\r\n      <h3 style=\"margin-top:8px; color:#000;\">Table 1 — Website Sign‑ups (Daily)</h3>\r\n      <div class=\"table-wrap\">\r\n        <table aria-label=\"Website Sign-ups per day\">\r\n          <thead>\r\n            <tr><th>Date</th><th>SignUps</th><th>Marketing Channel</th></tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr><td>2025‑06‑01</td><td>42</td><td>Organic</td></tr>\r\n            <tr><td>2025‑06‑02</td><td>35</td><td>Paid Ads</td></tr>\r\n            <tr><td>2025‑06‑03</td><td>51</td><td>Referral</td></tr>\r\n            <tr><td>2025‑06‑04</td><td>47</td><td>Organic</td></tr>\r\n            <tr><td>2025‑06‑05</td><td>38</td><td>Email</td></tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <h3 style=\"margin-top:18px; color:#000;\">Table 2 — Defects per Batch (Manufacturing)</h3>\r\n      <div class=\"table-wrap\">\r\n        <table aria-label=\"Defects per batch\">\r\n          <thead>\r\n            <tr><th>BatchID</th><th>UnitsProduced</th><th>DefectCount</th><th>Line</th></tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr><td>B‑3101</td><td>1,200</td><td>7</td><td>L1</td></tr>\r\n            <tr><td>B‑3102</td><td>1,180</td><td>4</td><td>L1</td></tr>\r\n            <tr><td>B‑3103</td><td>1,260</td><td>9</td><td>L2</td></tr>\r\n            <tr><td>B‑3104</td><td>1,240</td><td>5</td><td>L2</td></tr>\r\n            <tr><td>B‑3105</td><td>1,300</td><td>6</td><td>L3</td></tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- CONTINUOUS DATA -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Type</small>\r\n      <h1>Continuous Data</h1>\r\n      <p>Measurements: values on a continuous scale, including decimals</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"media-row\" style=\"margin-bottom:10px;\">\r\n        <div class=\"media\">\r\n          <img src=\"https://i.imgur.com/OB7Cxkq.png\" alt=\"Continuous data concept image with smooth curve/line\" />\r\n        </div>\r\n        <div class=\"caption\">\r\n          <p><strong>Continuous variables</strong> come from measurement (time, temperature, revenue). They can take any value within an interval (e.g., 21.37°C, $152.49).</p>\r\n          <div class=\"compare-row\">\r\n            <div class=\"compare-box\">\r\n              <h3>Common use cases</h3>\r\n              <ul>\r\n                <li>Sales amounts and order values</li>\r\n                <li>Sensor readings (temperature, humidity, vibration)</li>\r\n                <li>Financial metrics (prices, returns)</li>\r\n                <li>Physical measurements (length, weight)</li>\r\n              </ul>\r\n            </div>\r\n            <div class=\"compare-box\">\r\n              <h3>Typical charts</h3>\r\n              <ul>\r\n                <li>Line charts over time (time series)</li>\r\n                <li>Histograms and KDE for distributions</li>\r\n                <li>Scatter plots for relationships</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Continuous tables -->\r\n      <h3 style=\"margin-top:8px; color:#000;\">Table 1 — Sales Data (Sample)</h3>\r\n      <div class=\"table-wrap\">\r\n        <table aria-label=\"Sales data table with continuous values\">\r\n          <thead>\r\n            <tr><th>Date</th><th>Product</th><th>RevenueUSD</th><th>DiscountPct</th></tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr><td>2025‑07‑01</td><td>GeoMap Pro</td><td>1,543.20</td><td>5.0</td></tr>\r\n            <tr><td>2025‑07‑02</td><td>ThermalX Suite</td><td>2,118.75</td><td>7.5</td></tr>\r\n            <tr><td>2025‑07‑03</td><td>HydroModeler</td><td>987.40</td><td>0.0</td></tr>\r\n            <tr><td>2025‑07‑04</td><td>ClimateLab</td><td>1,302.10</td><td>2.5</td></tr>\r\n            <tr><td>2025‑07‑05</td><td>Subsurface AI</td><td>3,452.95</td><td>10.0</td></tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <h3 style=\"margin-top:18px; color:#000;\">Table 2 — Sensor Data (Sample)</h3>\r\n      <div class=\"table-wrap\">\r\n        <table aria-label=\"Environmental sensor readings\">\r\n          <thead>\r\n            <tr><th>Timestamp</th><th>SensorID</th><th>TempC</th><th>HumidityPct</th><th>Vibration_g</th></tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr><td>2025‑07‑01 09:00</td><td>S‑101</td><td>21.6</td><td>44.2</td><td>0.015</td></tr>\r\n            <tr><td>2025‑07‑01 12:00</td><td>S‑101</td><td>24.1</td><td>40.8</td><td>0.018</td></tr>\r\n            <tr><td>2025‑07‑01 15:00</td><td>S‑101</td><td>25.3</td><td>38.9</td><td>0.021</td></tr>\r\n            <tr><td>2025‑07‑01 18:00</td><td>S‑101</td><td>23.4</td><td>42.7</td><td>0.016</td></tr>\r\n            <tr><td>2025‑07‑01 21:00</td><td>S‑101</td><td>20.9</td><td>47.5</td><td>0.014</td></tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- QUICK RECAP -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Recap</small>\r\n      <h1>Choosing the Right Treatment</h1>\r\n      <p>Match the analysis and charts to the data type</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <h3>Discrete</h3>\r\n          <p>Counts and integers. Use <strong>bar/column charts</strong>, frequencies, and Poisson/Binomial models.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Continuous</h3>\r\n          <p>Measured values with decimals. Use <strong>line charts, histograms, KDE</strong>, regression, time‑series models.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "9501c4bb-7612-4895-884f-6399282e4442"
        },
        {
          "kind": "article",
          "order": 3,
          "title": "Other Data Types • Geospatial, Text, Image, Synthetic",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Other Data Types • Geospatial, Text, Image, Synthetic</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF;\r\n  padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Media row === */\r\n.media-row { display: flex; gap: 18px; align-items: center; flex-wrap: wrap; }\r\n.media-row .media { flex: 1 1 340px; min-width: 280px; }\r\n.media-row .caption { flex: 2 1 420px; min-width: 280px; }\r\n\r\n/* === Quick grid === */\r\n.quick-grid {\r\n  display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\r\n  gap: 14px; margin: 18px 0 0;\r\n}\r\n.quick-grid .box {\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fff;\r\n}\r\n.quick-grid .box h3 { margin: 0 0 6px; font-size: 17px; color: #000; }\r\n\r\n/* === Compare row === */\r\n.compare-row { display: flex; gap: 14px; flex-wrap: wrap; }\r\n.compare-box {\r\n  flex: 1 1 320px;\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 16px; background: #fff;\r\n}\r\n.compare-box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n.compare-box ul { margin: 8px 0 0 18px; }\r\n\r\n/* === Tables === */\r\n.table-wrap { overflow-x: auto; margin-top: 10px; }\r\ntable { border-collapse: collapse; width: 100%; min-width: 560px; }\r\nth, td { border: 1px solid #EBEBEB; padding: 10px 12px; text-align: left; }\r\nth { background: #F6F6F6; color: #333; font-weight: 700; }\r\ntbody tr:nth-child(odd) { background: #FAFAFA; }\r\n\r\n/* === Code block === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #f0f0f0; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Simple SVG diagram container === */\r\n.diagram {\r\n  background: #F6F6F6; border: 1px solid #EBEBEB; border-radius: 10px; padding: 10px;\r\n}\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- HERO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Data</small>\r\n      <h1>Other Data Types</h1>\r\n      <p>Geospatial • Text • Image • Synthetic</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"media-row\">\r\n        <div class=\"media\">\r\n          <img src=\"https://i.imgur.com/RitiTk3.png\" alt=\"Cover collage of geospatial maps, text, and image data\" />\r\n        </div>\r\n        <div class=\"caption\">\r\n          <p>Beyond tables and CSVs, modern projects use specialized data types. Below are concise definitions, visuals, and practical examples so you can pick the right tools and workflows.</p>\r\n          <div class=\"quick-grid\">\r\n            <div class=\"box\"><h3>Geospatial</h3><p>Data tied to locations on Earth (coordinates, polygons, rasters).</p></div>\r\n            <div class=\"box\"><h3>Text</h3><p>Unstructured language (docs, chats, logs) requiring NLP/LLM tools.</p></div>\r\n            <div class=\"box\"><h3>Image</h3><p>Pixel-based data for classification, detection, segmentation.</p></div>\r\n            <div class=\"box\"><h3>Synthetic</h3><p>Artificially generated data to augment training or preserve privacy.</p></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- GEOSPATIAL DATA -->\r\n  <section class=\"section-card\" id=\"geospatial\">\r\n    <div class=\"banner\">\r\n      <small>Geospatial</small>\r\n      <h1>What is Geospatial Data?</h1>\r\n      <p>Data with a location: points, lines, polygons, rasters</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p><strong>Geospatial data</strong> describes features on Earth using coordinates and projections. It comes in two main forms:</p>\r\n      <div class=\"compare-row\">\r\n        <div class=\"compare-box\">\r\n          <h3>Vector</h3>\r\n          <ul>\r\n            <li>Points (wells, sensors), lines (roads, rivers), polygons (fields, basins)</li>\r\n            <li>Formats: GeoJSON, Shapefile, GPKG</li>\r\n            <li>Great for boundaries, networks, labeled assets</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"compare-box\">\r\n          <h3>Raster</h3>\r\n          <ul>\r\n            <li>Gridded surfaces (DEM, NDVI, temperature)</li>\r\n            <li>Formats: GeoTIFF, NetCDF, Cloud‑Optimized GeoTIFF</li>\r\n            <li>Great for continuous phenomena over space</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"diagram\" style=\"margin-top:14px\" aria-label=\"Geospatial layers diagram\">\r\n        <svg viewBox=\"0 0 980 160\" width=\"100%\" height=\"160\" role=\"img\">\r\n          <rect x=\"20\" y=\"20\" width=\"220\" height=\"120\" rx=\"10\" fill=\"#E6F7E6\" stroke=\"#A8D5A8\"/>\r\n          <text x=\"130\" y=\"50\" text-anchor=\"middle\" font-size=\"13\" fill=\"#333\">Layers</text>\r\n          <rect x=\"40\" y=\"70\" width=\"180\" height=\"20\" rx=\"4\" fill=\"#CFE8FF\" stroke=\"#8BB9E8\"/>\r\n          <text x=\"130\" y=\"85\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Polygons (fields)</text>\r\n          <rect x=\"40\" y=\"100\" width=\"180\" height=\"20\" rx=\"4\" fill=\"#FFE0B2\" stroke=\"#E0AC6A\"/>\r\n          <text x=\"130\" y=\"115\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Raster (NDVI)</text>\r\n\r\n          <line x1=\"260\" y1=\"80\" x2=\"460\" y2=\"80\" stroke=\"#999\" stroke-width=\"2\" marker-end=\"url(#arrow)\"/>\r\n          <rect x=\"460\" y=\"40\" width=\"220\" height=\"80\" rx=\"10\" fill=\"#EDE7F6\" stroke=\"#C5B6E3\"/>\r\n          <text x=\"570\" y=\"70\" text-anchor=\"middle\" font-size=\"13\" fill=\"#333\">Spatial Join / Analysis</text>\r\n\r\n          <line x1=\"680\" y1=\"80\" x2=\"940\" y2=\"80\" stroke=\"#999\" stroke-width=\"2\" marker-end=\"url(#arrow)\"/>\r\n          <rect x=\"820\" y=\"30\" width=\"140\" height=\"100\" rx=\"10\" fill=\"#FFF3CD\" stroke=\"#E0C36C\"/>\r\n          <text x=\"890\" y=\"60\" text-anchor=\"middle\" font-size=\"13\" fill=\"#333\">Map</text>\r\n          <text x=\"890\" y=\"90\" text-anchor=\"middle\" font-size=\"12\" fill=\"#555\">Dashboard/Report</text>\r\n\r\n          <defs>\r\n            <marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"6\" refY=\"3\" orient=\"auto\" markerUnits=\"strokeWidth\">\r\n              <path d=\"M0,0 L0,6 L6,3 z\" fill=\"#999\"></path>\r\n            </marker>\r\n          </defs>\r\n        </svg>\r\n      </div>\r\n\r\n      <div class=\"quick-grid\" style=\"margin-top:16px;\">\r\n        <div class=\"box\">\r\n          <h3>Google Earth Engine</h3>\r\n          <p><strong>GEE</strong> is a cloud platform for planetary‑scale analysis of satellite imagery and geospatial datasets. It hosts catalogs like Landsat and Sentinel and provides JavaScript and Python APIs for time‑series processing, classification, and visualization — without downloading massive rasters.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Typical Tools</h3>\r\n          <p>GIS (QGIS/ArcGIS), Python (GeoPandas, rasterio, shapely, GDAL), web maps (Leaflet).</p>\r\n        </div>\r\n      </div>\r\n\r\n<pre># Example: quick vector load and summary (Python)\r\nimport geopandas as gpd\r\nv = gpd.read_file(\"data/fields.geojson\")  # polygons\r\nprint(v.crs, len(v), v.head(2))</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- TEXT DATA -->\r\n  <section class=\"section-card\" id=\"text\">\r\n    <div class=\"banner\">\r\n      <small>Text</small>\r\n      <h1>What is Text Data?</h1>\r\n      <p>Unstructured language from documents, chats, logs</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p><strong>Text data</strong> consists of words, sentences, and paragraphs — rich in meaning but unstructured. To analyze it, we apply <strong>NLP</strong> (tokenization, embeddings, classification, extraction).</p>\r\n\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <h3>Labeling in Text</h3>\r\n          <p><em>Labeling</em> (annotation) assigns tags to spans or documents: topic, sentiment, intent, or entities (names, places, chemicals). Labeled sets train or evaluate models.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Generative AI APIs</h3>\r\n          <p>LLM‑based APIs help summarize, classify, extract entities, and answer questions. They accelerate prototyping and can work zero/few‑shot — still pair with guardrails, evals, and human review.</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"compare-row\" style=\"margin-top:10px;\">\r\n        <div class=\"compare-box\">\r\n          <h3>Applications</h3>\r\n          <ul>\r\n            <li>Chatbots & assistants (support, analytics)</li>\r\n            <li>Summarization of reports, emails, tickets</li>\r\n            <li>Semantic search & RAG over internal documents</li>\r\n            <li>Compliance screening & entity extraction</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"compare-box\">\r\n          <h3>Data Formats</h3>\r\n          <ul>\r\n            <li>CSV/JSONL (one text per row)</li>\r\n            <li>Markdown/HTML/PDF (convert to text)</li>\r\n            <li>Embeddings stored in DB/vector stores</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n<pre># Example: tiny labeling schema (JSONL)\r\n{\"text\":\"Pump #7 down for 3 hours\",\"labels\":{\"intent\":\"incident\",\"severity\":\"medium\"}}\r\n{\"text\":\"Need ERT monitoring report by Friday\",\"labels\":{\"intent\":\"request\",\"deadline\":\"Friday\"}}</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- IMAGE DATA -->\r\n  <section class=\"section-card\" id=\"image\">\r\n    <div class=\"banner\">\r\n      <small>Image</small>\r\n      <h1>What is Image Data?</h1>\r\n      <p>Grids of pixels (RGB/Multispectral) used for vision tasks</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p><strong>Image data</strong> is pixel‑based: 2D arrays (grayscale), 3‑channel RGB, or multispectral bands. Common tasks include:</p>\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\"><h3>Classification</h3><p>What is in the image? (e.g., rock sample type)</p></div>\r\n        <div class=\"box\"><h3>Detection</h3><p>Where are the objects? (bounding boxes)</p></div>\r\n        <div class=\"box\"><h3>Segmentation</h3><p>Pixel‑level regions (faults, lithologies, defects)</p></div>\r\n        <div class=\"box\"><h3>Enhancement</h3><p>Denoising, super‑resolution, contrast correction</p></div>\r\n      </div>\r\n\r\n<pre># Example: read & inspect with OpenCV (Python)\r\nimport cv2\r\nimg = cv2.imread(\"data/core_sample.png\")   # HxWxC\r\nh, w = img.shape[:2]\r\nprint(\"Resolution:\", w, \"x\", h)</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- SYNTHETIC DATA -->\r\n  <section class=\"section-card\" id=\"synthetic\">\r\n    <div class=\"banner\">\r\n      <small>Synthetic</small>\r\n      <h1>What is Synthetic (Synthesized) Data?</h1>\r\n      <p>Artificially generated data to augment training or protect privacy</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p><strong>Synthetic data</strong> is generated rather than collected from the real world. It can resemble the statistical properties of real data while controlling privacy and class balance.</p>\r\n\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <h3>Why use it?</h3>\r\n          <ul>\r\n            <li><strong>Privacy:</strong> avoid exposing sensitive records</li>\r\n            <li><strong>Balance:</strong> create rare/edge cases for robust models</li>\r\n            <li><strong>Coverage:</strong> simulate conditions hard to capture</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>How it’s made</h3>\r\n          <ul>\r\n            <li>Rule‑based simulators (physics, process models)</li>\r\n            <li>Data augmentation (rotate, crop, noise for images)</li>\r\n            <li>Generative models (e.g., diffusion/GAN‑style) for text/images</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Quality checks</h3>\r\n          <ul>\r\n            <li>Preserve key distributions and correlations</li>\r\n            <li>Protect against leakage of real records</li>\r\n            <li>Evaluate on real‑world validation sets</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n<pre># Example: simple tabular synthesizer (concept)\r\nimport numpy as np, pandas as pd\r\nreal = pd.read_csv(\"data/sales.csv\")[[\"RevenueUSD\",\"DiscountPct\"]]\r\nmu, Sigma = real.mean(), real.cov()\r\nsyn = pd.DataFrame(np.random.multivariate_normal(mu, Sigma, size=500),\r\n                   columns=real.columns)\r\nsyn.clip(lower=0, inplace=True)</pre>\r\n      <p style=\"margin-top:10px;\">Synthetic text and images can be created with generative APIs or local models to expand training corpora (e.g., paraphrases, rare defect images). Always validate downstream performance and ethics.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- CHEAT SHEET -->\r\n  <section class=\"section-card\" id=\"cheatsheet\">\r\n    <div class=\"banner\">\r\n      <small>Cheat Sheet</small>\r\n      <h1>Formats & Tooling at a Glance</h1>\r\n      <p>Pick the right file type and library</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"table-wrap\">\r\n        <table aria-label=\"Formats and tools for different data types\">\r\n          <thead>\r\n            <tr>\r\n              <th>Type</th>\r\n              <th>Common Formats</th>\r\n              <th>Typical Tools</th>\r\n              <th>Typical Uses</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>Geospatial</td>\r\n              <td>GeoJSON, Shapefile, GeoTIFF, NetCDF</td>\r\n              <td>QGIS/ArcGIS, GeoPandas, rasterio, GDAL, Google Earth Engine</td>\r\n              <td>Mapping, land cover, site selection, environmental change</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Text</td>\r\n              <td>TXT, CSV, JSONL, PDF→text</td>\r\n              <td>spaCy, NLTK, Transformers/LLMs, vector DBs</td>\r\n              <td>Chatbots, summarization, search, extraction, compliance</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Image</td>\r\n              <td>PNG, JPEG, TIFF (multi‑band)</td>\r\n              <td>OpenCV, PIL, scikit‑image, vision models</td>\r\n              <td>Classification, detection, segmentation, QA/inspection</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Synthetic</td>\r\n              <td>Same as target domain (tabular/image/text)</td>\r\n              <td>Augmentation libs, simulators, generative models</td>\r\n              <td>Class balance, privacy, rare scenarios, stress tests</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "1395b378-8b7e-4ef3-9cca-7a624801ab20"
        },
        {
          "kind": "article",
          "order": 4,
          "title": "Employee Attendance DB",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Employee Attendance DB • Scenario & Model</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF;\r\n  padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Layout helpers === */\r\n.row { display: flex; gap: 18px; flex-wrap: wrap; align-items: flex-start; }\r\n.col { flex: 1 1 340px; min-width: 280px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Diagram === */\r\n.diagram {\r\n  background: #F6F6F6; border: 1px solid #EBEBEB; border-radius: 10px; padding: 10px;\r\n}\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- HERO / SCENARIO -->\r\n  <section class=\"section-card\" id=\"scenario\">\r\n    <div class=\"banner\">\r\n      <small>Scenario</small>\r\n      <h1>Office Attendance: Check-In / Check-Out Tracking</h1>\r\n      <p>Design a database to record availability and daily attendance</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <img src=\"https://i.imgur.com/abqXEfO.png\" alt=\"Cover showing employees checking in and out system\" style=\"margin-bottom:16px; border-radius:10px;\" />\r\n      <p>\r\n        We have several employees in an office. A system records their <strong>check in</strong> and <strong>check out</strong>.\r\n        Our goal: build a small relational database that securely tracks <em>who</em> checked in/out and <em>when</em>,\r\n        and supports reporting (late arrivals, hours worked, who’s currently in the office, etc.).\r\n      </p>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col box\">\r\n          <h3>Table 1 — employees</h3>\r\n          <ul>\r\n            <li><code class=\"inline\">employee_id</code> (unique code, PK)</li>\r\n            <li><code class=\"inline\">first_name</code>, <code class=\"inline\">last_name</code></li>\r\n            <li><code class=\"inline\">date_of_birth</code>, <code class=\"inline\">gender</code></li>\r\n            <li><code class=\"inline\">phone_number</code>, <code class=\"inline\">email</code></li>\r\n            <li><code class=\"inline\">address</code>, <code class=\"inline\">city</code>, <code class=\"inline\">state / region</code></li>\r\n            <li><code class=\"inline\">department</code>, <code class=\"inline\">job_title</code></li>\r\n            <li><code class=\"inline\">hire_date</code>, <code class=\"inline\">salary</code></li>\r\n            <li><code class=\"inline\">status</code> (active / inactive)</li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div class=\"col box\">\r\n          <h3>Table 2 — attendance_log</h3>\r\n          <ul>\r\n            <li><code class=\"inline\">log_id</code> (PK, unique row ID)</li>\r\n            <li><code class=\"inline\">employee_id</code> (FK → employees.employee_id)</li>\r\n            <li><code class=\"inline\">date</code> (work day, e.g. 2025-09-12)</li>\r\n            <li><code class=\"inline\">check_in_time</code> (timestamp)</li>\r\n            <li><code class=\"inline\">check_out_time</code> (timestamp, nullable)</li>\r\n            <li><code class=\"inline\">status</code> (optional: Present, Absent, Late, On Leave)</li>\r\n            <li><code class=\"inline\">notes</code> (optional)</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:12px;\">\r\n        The common key tying both tables is <strong><code class=\"inline\">employee_id</code></strong>.\r\n        Each attendance row belongs to exactly one employee (1 → many).\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- ER DIAGRAM -->\r\n  <section class=\"section-card\" id=\"diagram\">\r\n    <div class=\"banner\">\r\n      <small>Model</small>\r\n      <h1>Entity-Relationship Overview</h1>\r\n      <p>One employee → many attendance logs</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"diagram\" aria-label=\"ER diagram employees to attendance_log\">\r\n        <svg viewBox=\"0 0 980 240\" width=\"100%\" height=\"240\" role=\"img\">\r\n          <!-- Employees box -->\r\n          <rect x=\"40\" y=\"40\" width=\"360\" height=\"160\" rx=\"10\" fill=\"#EDEDED\" stroke=\"#BDBDBD\"/>\r\n          <text x=\"220\" y=\"65\" text-anchor=\"middle\" font-size=\"16\" fill=\"#333\" font-weight=\"700\">employees</text>\r\n          <text x=\"60\" y=\"95\" font-size=\"13\" fill=\"#333\">employee_id (PK)</text>\r\n          <text x=\"60\" y=\"115\" font-size=\"13\" fill=\"#333\">first_name, last_name, email</text>\r\n          <text x=\"60\" y=\"135\" font-size=\"13\" fill=\"#333\">department, job_title</text>\r\n          <text x=\"60\" y=\"155\" font-size=\"13\" fill=\"#333\">hire_date, status</text>\r\n\r\n          <!-- Attendance box -->\r\n          <rect x=\"580\" y=\"40\" width=\"360\" height=\"160\" rx=\"10\" fill=\"#EDE7F6\" stroke=\"#C5B6E3\"/>\r\n          <text x=\"760\" y=\"65\" text-anchor=\"middle\" font-size=\"16\" fill=\"#333\" font-weight=\"700\">attendance_log</text>\r\n          <text x=\"600\" y=\"95\" font-size=\"13\" fill=\"#333\">log_id (PK)</text>\r\n          <text x=\"600\" y=\"115\" font-size=\"13\" fill=\"#333\">employee_id (FK)</text>\r\n          <text x=\"600\" y=\"135\" font-size=\"13\" fill=\"#333\">date, check_in_time, check_out_time</text>\r\n          <text x=\"600\" y=\"155\" font-size=\"13\" fill=\"#333\">status, notes</text>\r\n\r\n          <!-- Relationship line -->\r\n          <line x1=\"400\" y1=\"120\" x2=\"580\" y2=\"120\" stroke=\"#999\" stroke-width=\"2\" marker-end=\"url(#arrow)\"/>\r\n          <text x=\"490\" y=\"110\" text-anchor=\"middle\" font-size=\"12\" fill=\"#555\">1  →  many</text>\r\n\r\n          <defs>\r\n            <marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"6\" refY=\"3\" orient=\"auto\" markerUnits=\"strokeWidth\">\r\n              <path d=\"M0,0 L0,6 L6,3 z\" fill=\"#999\"></path>\r\n            </marker>\r\n          </defs>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "52199887-2c12-4f34-93e0-b09624bc5ddf"
        },
        {
          "kind": "article",
          "order": 5,
          "title": "Create a DB File",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Create a DB File • Employees & Attendance (SQLite)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1000px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #f0f0f0; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Grid === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fff; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n\r\n/* === Video embed styling === */\r\n.video-container {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n  text-align: center; padding: 20px;\r\n}\r\n\r\n.video-container h2 {\r\n  margin: 0 0 16px; color: #333; font-size: 20px; font-weight: 600;\r\n}\r\n\r\n.video-embed {\r\n  width: 100%; max-width: 1047px; height: auto; aspect-ratio: 1047/473;\r\n  border-radius: 8px; overflow: hidden; margin: 0 auto; display: block;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- VIDEO TUTORIAL -->\r\n  <section class=\"video-container\">\r\n    <h2>Video Tutorial: Create a DB File & View Your SQLite DB</h2>\r\n    <iframe class=\"video-embed\" src=\"https://www.youtube.com/embed/5AtSSKOKsP0\" title=\"Create a DB File & View Your SQLite DB\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n  </section>\r\n\r\n  <!-- PROMPT -->\r\n  <section class=\"section-card\" id=\"prompt\">\r\n    <div class=\"banner\">\r\n      <small>Prompt</small>\r\n      <h1>Create a Database File (SQLite)</h1>\r\n      <p>Use this exact prompt to generate a Python script and save the DB to a specific path</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre>'write a python script to create a db of two tables like below and save it here: /workspaces/portalaiforimpact/db_based\r\n\r\nTable 1 — employees\r\nemployee_id (unique code, PK)\r\nfirst_name, last_name\r\ndate_of_birth, gender\r\nphone_number, email\r\naddress, city, state / region\r\ndepartment, job_title\r\nhire_date, salary\r\nstatus (active / inactive)\r\n\r\nTable 2 — attendance_log\r\nlog_id (PK, unique row ID)\r\nemployee_id (FK → employees.employee_id)\r\ndate (work day, e.g. 2025-09-12)\r\ncheck_in_time (timestamp)\r\ncheck_out_time (timestamp, nullable)\r\nstatus (optional: Present, Absent, Late, On Leave)\r\nnotes (optional)'</pre>\r\n      <p><strong>Why two parts?</strong> The first line specifies the <em>save path</em> inside your Codespace. The table specs are the <em>brainstormed outcome</em> (the schema) you want implemented. Together they produce a runnable script that builds your database file.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- PATH IN CODESPACES -->\r\n  <section class=\"section-card\" id=\"path\">\r\n    <div class=\"banner\">\r\n      <small>Path</small>\r\n      <h1>Where is the DB saved?</h1>\r\n      <p>Working inside GitHub Codespaces</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Folder you created</h3>\r\n          <p>You made a folder in your Codespace and copied its absolute path:\r\n            <code class=\"inline\">/workspaces/portalaiforimpact/db_based</code></p>\r\n          <p>The script will ensure the folder exists and then save the DB file inside it.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Resulting file</h3>\r\n          <p>The SQLite database file will be created as:\r\n            <code class=\"inline\">/workspaces/portalaiforimpact/db_based/employees.db</code></p>\r\n          <p>After running, you can browse it in the VS Code Explorer or via SQLite extensions.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- PYTHON SCRIPT -->\r\n  <section class=\"section-card\" id=\"script\">\r\n    <div class=\"banner\">\r\n      <small>Script</small>\r\n      <h1>Python: Create DB & Two Tables</h1>\r\n      <p>Focus on the SQL logic; minor implementation differences are fine</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre>import os\r\nimport sqlite3\r\n\r\n# Target folder and DB file path (Codespaces)\r\nDB_DIR  = \"/workspaces/portalaiforimpact/db_based\"\r\nDB_FILE = os.path.join(DB_DIR, \"employees.db\")\r\n\r\n# Ensure the folder exists\r\nos.makedirs(DB_DIR, exist_ok=True)\r\n\r\n# Connect (creates file if not exists)\r\nconn = sqlite3.connect(DB_FILE)\r\ncur = conn.cursor()\r\n\r\n# employees table\r\ncur.execute(\"\"\"\r\nCREATE TABLE IF NOT EXISTS employees (\r\n    employee_id      TEXT PRIMARY KEY,\r\n    first_name       TEXT NOT NULL,\r\n    last_name        TEXT NOT NULL,\r\n    date_of_birth    DATE,\r\n    gender           TEXT CHECK (gender IN ('Male','Female','Other')),\r\n    phone_number     TEXT,\r\n    email            TEXT UNIQUE,\r\n    address          TEXT,\r\n    city             TEXT,\r\n    state_region     TEXT,\r\n    department       TEXT,\r\n    job_title        TEXT,\r\n    hire_date        DATE,\r\n    salary           NUMERIC,\r\n    status           TEXT NOT NULL DEFAULT 'active'\r\n                     CHECK (status IN ('active','inactive'))\r\n);\r\n\"\"\")\r\n\r\n# attendance_log table\r\ncur.execute(\"\"\"\r\nCREATE TABLE IF NOT EXISTS attendance_log (\r\n    log_id           INTEGER PRIMARY KEY AUTOINCREMENT,\r\n    employee_id      TEXT NOT NULL,\r\n    date             DATE NOT NULL,\r\n    check_in_time    TIMESTAMP NOT NULL,\r\n    check_out_time   TIMESTAMP,\r\n    status           TEXT CHECK (status IN ('Present','Absent','Late','On Leave')),\r\n    notes            TEXT,\r\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\r\n);\r\n\"\"\")\r\n\r\nconn.commit()\r\nconn.close()\r\nprint(f\"Database created at: {DB_FILE}\")</pre>\r\n      <p><strong>Run it:</strong></p>\r\n<pre>python create_db.py</pre>\r\n      <p>If the script runs without errors, your <code class=\"inline\">employees.db</code> is created at the specified path.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- TABLE SPECS (REFERENCE) -->\r\n  <section class=\"section-card\" id=\"schema\">\r\n    <div class=\"banner\">\r\n      <small>Schema</small>\r\n      <h1>Table Reference (What You Asked For)</h1>\r\n      <p>Kept here for clarity during implementation & review</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Table 1 — employees</h3>\r\n          <ul>\r\n            <li>employee_id (PK, unique code)</li>\r\n            <li>first_name, last_name</li>\r\n            <li>date_of_birth, gender</li>\r\n            <li>phone_number, email</li>\r\n            <li>address, city, state_region</li>\r\n            <li>department, job_title</li>\r\n            <li>hire_date, salary</li>\r\n            <li>status (active/inactive)</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Table 2 — attendance_log</h3>\r\n          <ul>\r\n            <li>log_id (PK, unique row ID, AUTOINCREMENT)</li>\r\n            <li>employee_id (FK → employees.employee_id)</li>\r\n            <li>date (work day, e.g., 2025-09-12)</li>\r\n            <li>check_in_time (timestamp), check_out_time (timestamp, nullable)</li>\r\n            <li>status (Present, Absent, Late, On Leave)</li>\r\n            <li>notes (optional)</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:10px;\"><strong>SQL logic is the key:</strong> the exact Python structure can vary, but these constraints and relationships must be preserved.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "d610e442-b0ac-4b1c-975a-c5f5ef5a533a"
        },
        {
          "kind": "article",
          "order": 6,
          "title": "View Your SQLite DB",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>View Your SQLite DB • Online Viewer or Streamlit (Codespaces)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1000px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #f0f0f0; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Grid === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fff; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Database</small>\r\n      <h1>Two Easy Ways to View Your DB</h1>\r\n      <p>Online viewer or Streamlit inside your Codespace</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>Your SQLite database is generated on disk, so you won’t “see” it unless you open it with a viewer. Here are two simple options:</p>\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Option 1 — Online Viewer</h3>\r\n          <p>Use a browser tool such as <a href=\"https://sqliteviewer.app/\" target=\"_blank\" rel=\"noopener\">sqliteviewer.app</a> and drag-and-drop your <code class=\"inline\">.db</code> file.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Option 2 — Streamlit (Codespaces)</h3>\r\n          <p>Run a tiny Streamlit app that reads the DB file and shows each table interactively from your code space.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- OPTION 1: ONLINE VIEWER -->\r\n  <section class=\"section-card\" id=\"online\">\r\n    <div class=\"banner\">\r\n      <small>Option 1</small>\r\n      <h1>View Online (sqliteviewer.app)</h1>\r\n      <p>Drag and drop your file to inspect tables</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li>In VS Code (left Explorer) right-click your DB file and choose <em>Reveal in Finder/Explorer</em> (or <em>Download</em> from Codespaces).</li>\r\n        <li>Open <a href=\"https://sqliteviewer.app/\" target=\"_blank\" rel=\"noopener\">sqliteviewer.app</a>.</li>\r\n        <li>Drag <code class=\"inline\">employees.db</code> into the page and browse the tables (<code class=\"inline\">employees</code>, <code class=\"inline\">attendance_log</code>).</li>\r\n      </ol>\r\n      <p><strong>Note:</strong> For sensitive data, prefer local tools or your own Streamlit viewer.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- OPTION 2: STREAMLIT VIEWER -->\r\n  <section class=\"section-card\" id=\"streamlit\">\r\n    <div class=\"banner\">\r\n      <small>Option 2</small>\r\n      <h1>View in Streamlit (Inside Codespaces)</h1>\r\n      <p>Prompt → App → Run → Open Port</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"box\" style=\"margin-bottom:12px;\">\r\n        <h3>The prompt I used</h3>\r\n<pre>'write a streamlit that shows the db content'</pre>\r\n        <p>This is the follow-up prompt after creating the DB. It’s short on purpose — and produced the app below.</p>\r\n      </div>\r\n\r\n      <div class=\"box\">\r\n        <h3>Streamlit viewer script</h3>\r\n<pre>import streamlit as st\r\nimport sqlite3\r\nimport pandas as pd\r\nimport os\r\n\r\n# Path to your database\r\nDB_FILE = \"/workspaces/portalaiforimpact/db_based/employees.db\"\r\n\r\nst.set_page_config(page_title=\"Employee Database Viewer\", layout=\"wide\")\r\nst.title(\"📊 Employee Database Viewer\")\r\n\r\n# Check if DB exists\r\nif not os.path.exists(DB_FILE):\r\n    st.error(f\"Database not found at {DB_FILE}\")\r\nelse:\r\n    # Connect to DB\r\n    conn = sqlite3.connect(DB_FILE)\r\n\r\n    # Sidebar for table selection\r\n    table = st.sidebar.selectbox(\"Select Table\", [\"employees\", \"attendance_log\"])\r\n\r\n    def load_data(table_name: str) -> pd.DataFrame:\r\n        query = f\"SELECT * FROM {table_name}\"\r\n        return pd.read_sql_query(query, conn)\r\n\r\n    # Load and display\r\n    df = load_data(table)\r\n    st.subheader(f\"Contents of `{table}`\")\r\n    st.dataframe(df, use_container_width=True)\r\n\r\n    # Show row count\r\n    st.caption(f\"Total rows: {len(df)}\")\r\n\r\n    # Option to refresh\r\n    if st.button(\"🔄 Refresh Data\"):\r\n        st.experimental_rerun()\r\n\r\n    conn.close()</pre>\r\n      </div>\r\n\r\n      <div class=\"grid\" style=\"margin-top:12px;\">\r\n        <div class=\"box\">\r\n          <h3>Run it in Codespaces</h3>\r\n<pre>pip install streamlit pandas\r\nstreamlit run viewer.py --server.address 0.0.0.0 --server.port 8000</pre>\r\n          <ul>\r\n            <li>Codespaces will offer to open the forwarded port (e.g., <strong>8000</strong>).</li>\r\n            <li>If not, click the <strong>Ports</strong> panel → globe icon next to port 8000.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>DB path reminder</h3>\r\n          <p>Your DB file path (created earlier):</p>\r\n          <p><code class=\"inline\">/workspaces/portalaiforimpact/db_based/employees.db</code></p>\r\n          <p>Put <code class=\"inline\">viewer.py</code> anywhere; just ensure <code class=\"inline\">DB_FILE</code> points to this absolute path.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- RESULT SCREENSHOT -->\r\n  <section class=\"section-card\" id=\"screenshot\">\r\n    <div class=\"banner\">\r\n      <small>Result</small>\r\n      <h1>What You’ll See</h1>\r\n      <p>Interactive table view with table switcher</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <img src=\"https://i.imgur.com/X1n9vxK.png\" alt=\"Streamlit viewer showing employees table content\" />\r\n      <p>The sidebar lets you toggle between <code class=\"inline\">employees</code> and <code class=\"inline\">attendance_log</code>. Use the Refresh button after making changes to the DB.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- TROUBLESHOOTING -->\r\n  <section class=\"section-card\" id=\"troubleshoot\">\r\n    <div class=\"banner\">\r\n      <small>Tips</small>\r\n      <h1>Troubleshooting & Notes</h1>\r\n      <p>Common fixes if the page looks empty</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>“Database not found”:</strong> Verify the path in <code class=\"inline\">DB_FILE</code> matches your Codespace folder.</li>\r\n        <li><strong>No rows:</strong> Did you insert any data yet? Run your seed or add rows manually.</li>\r\n        <li><strong>Locked DB:</strong> Ensure no other process is writing while reading; reconnect if needed.</li>\r\n        <li><strong>Port not opening:</strong> Use the <strong>Ports</strong> panel to open or make the port public if you want to share.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "741a9a82-7d29-416f-ad85-43b3f463b0c9"
        },
        {
          "kind": "article",
          "order": 7,
          "title": "What’s Next?",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>What’s Next? • Add Data Pages & New Tables (with Prompts)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1000px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Code / prompt blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #f0f0f0; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Grid === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fff; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Next Steps</small>\r\n      <h1>What’s Next? Add Data Pages & Extend Your DB</h1>\r\n      <p>From viewing → to entering data → to expanding tables (with a shared key)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>Your database is created and you can view it. Now make it useful for daily operations:</p>\r\n      <ul>\r\n        <li><strong>Add data pages in Streamlit</strong> — a form to insert individual rows, and a bulk CSV uploader.</li>\r\n        <li><strong>Add new tables</strong> — keep a <em>common key</em> (e.g., <code class=\"inline\">employee_id</code>) to relate new data to employees.</li>\r\n      </ul>\r\n      <p>Below are <strong>executive prompt templates</strong> you can paste into your assistant to generate production-ready pages quickly.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STREAMLIT: ADD DATA PAGES -->\r\n  <section class=\"section-card\" id=\"add-data\">\r\n    <div class=\"banner\">\r\n      <small>Streamlit</small>\r\n      <h1>Add Data Pages (Individual & Bulk)</h1>\r\n      <p>Create forms for one-by-one entries and a bulk CSV uploader</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Prompt — Individual Row (employees)</h3>\r\n<pre>Write a Streamlit page called \"Add Employee\" that inserts one row into the SQLite DB at:\r\n/workspaces/portalaiforimpact/db_based/employees.db\r\n\r\nTable: employees(employee_id PK, first_name, last_name, date_of_birth, gender, phone_number, email UNIQUE, address, city, state_region, department, job_title, hire_date, salary, status CHECK in ('active','inactive'))\r\n\r\nRequirements:\r\n- Use a form with validation (required: employee_id, first_name, last_name, hire_date, status).\r\n- Enforce email uniqueness (show a friendly error if duplicate).\r\n- On success: insert row, show a toast, and display the last inserted row.\r\n- Use parameterized SQL (no string concatenation) and handle exceptions.</pre>\r\n        </div>\r\n\r\n        <div class=\"box\">\r\n          <h3>Prompt — Individual Row (attendance)</h3>\r\n<pre>Write a Streamlit page \"Check In / Check Out\" that writes to attendance_log in:\r\n/workspaces/portalaiforimpact/db_based/employees.db\r\n\r\nTable: attendance_log(log_id PK autoinc, employee_id FK, date, check_in_time, check_out_time, status, notes)\r\n\r\nRequirements:\r\n- \"Check in\" button: insert employee_id, today's date, and current timestamp as check_in_time (check check-out is NULL).\r\n- \"Check out\" button: set current timestamp in check_out_time for today's open record.\r\n- Prevent multiple open shifts per employee per date (unique (employee_id, date)).\r\n- Show today's table for the selected employee.</pre>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"grid\" style=\"margin-top:14px;\">\r\n        <div class=\"box\">\r\n          <h3>Prompt — Bulk Upload (employees)</h3>\r\n<pre>Create a Streamlit page \"Bulk Upload Employees\" that uploads a CSV and inserts rows to employees in:\r\n/workspaces/portalaiforimpact/db_based/employees.db\r\n\r\nCSV columns: employee_id, first_name, last_name, email, department, job_title, hire_date, status (others optional).\r\nRequirements:\r\n- Preview first 100 rows with a mapping step (allow selecting which CSV column maps to each DB column).\r\n- Validate required fields; skip invalid rows and report counts (inserted / skipped).\r\n- Upsert mode: if employee_id exists, update selected fields; else insert.\r\n- Use transactions and parameterized SQL. Show a summary at the end.</pre>\r\n        </div>\r\n\r\n        <div class=\"box\">\r\n          <h3>Prompt — Bulk Upload (attendance)</h3>\r\n<pre>Create a Streamlit page \"Bulk Upload Attendance\" for attendance_log in:\r\n/workspaces/portalaiforimpact/db_based/employees.db\r\n\r\nRequirements:\r\n- CSV must contain: employee_id, date, check_in_time; optional: check_out_time, status, notes.\r\n- Prevent duplicates via unique(employee_id, date): update if an existing row is found.\r\n- Show a merged preview before writing, then commit with a single transaction.\r\n- Report inserted / updated / skipped with reasons.</pre>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- EXTEND DB: NEW TABLES WITH COMMON KEY -->\r\n  <section class=\"section-card\" id=\"extend\">\r\n    <div class=\"banner\">\r\n      <small>Schema</small>\r\n      <h1>Add New Tables to Your DB</h1>\r\n      <p>The golden rule: share a common key (e.g., employee_id)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>Your DB currently has <code class=\"inline\">employees</code> and <code class=\"inline\">attendance_log</code>. You can safely add more tables if they <strong>reference</strong> <code class=\"inline\">employees.employee_id</code>. This preserves relationships and enables powerful joins.</p>\r\n\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Idea 1 — departments</h3>\r\n          <ul>\r\n            <li><code class=\"inline\">department_id (PK)</code>, <code class=\"inline\">name</code>, <code class=\"inline\">location</code></li>\r\n            <li><code class=\"inline\">employees.department</code> references this table (or add <code class=\"inline\">department_id</code> in employees).</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Idea 2 — leave_requests</h3>\r\n          <ul>\r\n            <li><code class=\"inline\">leave_id (PK)</code>, <code class=\"inline\">employee_id (FK)</code></li>\r\n            <li><code class=\"inline\">start_date</code>, <code class=\"inline\">end_date</code>, <code class=\"inline\">type</code>, <code class=\"inline\">status</code>, <code class=\"inline\">notes</code></li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Idea 3 — shifts</h3>\r\n          <ul>\r\n            <li><code class=\"inline\">shift_id (PK)</code>, <code class=\"inline\">employee_id (FK)</code>, <code class=\"inline\">date</code></li>\r\n            <li><code class=\"inline\">start_time</code>, <code class=\"inline\">end_time</code>, <code class=\"inline\">location</code></li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Idea 4 — salaries_history</h3>\r\n          <ul>\r\n            <li><code class=\"inline\">entry_id (PK)</code>, <code class=\"inline\">employee_id (FK)</code>, <code class=\"inline\">effective_date</code>, <code class=\"inline\">amount</code>, <code class=\"inline\">reason</code></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <h3 style=\"margin-top:16px;\">Executive prompt — Create a new table (leave_requests)</h3>\r\n<pre>Write a Python migration script (sqlite3) that adds a table leave_requests to:\r\n/workspaces/portalaiforimpact/db_based/employees.db\r\n\r\nSchema:\r\n- leave_id INTEGER PRIMARY KEY AUTOINCREMENT\r\n- employee_id TEXT NOT NULL REFERENCES employees(employee_id) ON UPDATE CASCADE ON DELETE RESTRICT\r\n- start_date DATE NOT NULL\r\n- end_date   DATE NOT NULL\r\n- type TEXT CHECK (type IN ('Annual','Sick','Unpaid','Other')) NOT NULL\r\n- status TEXT CHECK (status IN ('Pending','Approved','Rejected')) NOT NULL DEFAULT 'Pending'\r\n- notes TEXT\r\nConstraints:\r\n- CHECK (start_date <= end_date)\r\n- Index on (employee_id, start_date)\r\nUse transactions and print a success message when done.</pre>\r\n\r\n      <h3 style=\"margin-top:16px;\">Executive prompt — Streamlit CRUD for leave_requests</h3>\r\n<pre>Create a Streamlit page \"Leave Requests\" for the DB at:\r\n/workspaces/portalaiforimpact/db_based/employees.db\r\n\r\nFeatures:\r\n- Create: form to add a leave request (employee_id select from employees, validated dates)\r\n- Read: filterable table (by employee_id, date range, status)\r\n- Update: approve/reject with buttons; edit notes\r\n- Delete: allow deletion with confirmation dialog\r\n- All SQL parameterized; wrap writes in transactions; show toasts and row counts.</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- BEST PRACTICES -->\r\n  <section class=\"section-card\" id=\"tips\">\r\n    <div class=\"banner\">\r\n      <small>Principles</small>\r\n      <h1>Best Practices When Extending</h1>\r\n      <p>Keep data consistent and performant</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>Common key:</strong> new tables should include <code class=\"inline\">employee_id</code> (or another stable shared key) as an FK.</li>\r\n        <li><strong>Constraints:</strong> use <code class=\"inline\">NOT NULL</code>, <code class=\"inline\">CHECK</code>, <code class=\"inline\">UNIQUE</code>, and <code class=\"inline\">FOREIGN KEY</code> rules to prevent bad data.</li>\r\n        <li><strong>Indexes:</strong> add indexes for frequent filters (e.g., <code class=\"inline\">(employee_id, date)</code>).</li>\r\n        <li><strong>Transactions:</strong> group writes with <code class=\"inline\">BEGIN</code>/<code class=\"inline\">COMMIT</code> to avoid partial updates.</li>\r\n        <li><strong>Idempotent scripts:</strong> use <code class=\"inline\">IF NOT EXISTS</code> in migrations so repeated runs are safe.</li>\r\n        <li><strong>UI flow:</strong> in Streamlit, confirm destructive actions and show success/failure toasts.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "9c06094e-9a1e-4ad3-ad50-cee74f74b344"
        }
      ]
    },
    {
      "order": 5,
      "title": "Module 5: Deploy APP with Server",
      "lessons": [
        {
          "kind": "article",
          "order": 1,
          "title": "From a Local DB to an Online SQL Database",
          "content": {
            "body_md": "<section class=\"section-card\" id=\"preface-sql-online\">\r\n  <div class=\"banner\">\r\n    <small>Preface</small>\r\n    <h1>From a Local DB to an Online SQL Database</h1>\r\n    <p>Why deployed apps need a cloud database that’s available 24/7</p>\r\n  </div>\r\n  <div class=\"body\">\r\n    <p>You’ve already created a database locally on your own computer. That’s perfect for learning, prototyping, and quick experiments. \r\n    But the moment you deploy an app for teammates or customers, your data must be reachable <strong>anytime, from anywhere</strong>. \r\n    That’s where an <strong>online SQL database</strong> comes in: a managed, network‑accessible relational database with security, backups, and scaling built in.</p>\r\n\r\n    <h3>What is an SQL database?</h3>\r\n    <p>An SQL database stores information in <em>tables</em> (rows and columns) and enforces relationships through keys and constraints. \r\n    You use <strong>SQL</strong> (Structured Query Language) to read and modify data—JOIN tables, filter with WHERE, aggregate with GROUP BY, and keep integrity with PRIMARY/FOREIGN keys and CHECK/UNIQUE constraints.</p>\r\n\r\n    <h3>Local vs. Online — what changes?</h3>\r\n    <div class=\"grid\">\r\n      <div class=\"box\">\r\n        <h3>Local (on your PC)</h3>\r\n        <ul>\r\n          <li>Zero setup, fast iteration, no internet required.</li>\r\n          <li>Great for one‑person development and testing.</li>\r\n          <li>Limits: data lives on one machine; hard to share; manual backups; no true multi‑user concurrency across devices.</li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"box\">\r\n        <h3>Online (cloud/hosted)</h3>\r\n        <ul>\r\n          <li>Accessible to your app and users from anywhere, 24/7.</li>\r\n          <li>Multi‑user concurrency, roles/permissions, automated backups, high availability.</li>\r\n          <li>Considerations: network/SSL, secret management, cost, and latency (choose a close region).</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n\r\n    <h3>Why your deployed app needs an online DB</h3>\r\n    <ul>\r\n      <li><strong>Always on:</strong> the database isn’t tied to your laptop being open.</li>\r\n      <li><strong>Shared state:</strong> all users see the same up‑to‑date data.</li>\r\n      <li><strong>Reliability:</strong> backups, point‑in‑time recovery, and failover options.</li>\r\n      <li><strong>Security:</strong> encrypted connections (SSL), passwords/roles, auditability.</li>\r\n      <li><strong>Scale:</strong> handle traffic spikes with pooling and right‑sized compute.</li>\r\n    </ul>\r\n\r\n    <h3>What changes in your app code?</h3>\r\n    <ul>\r\n      <li><strong>Connection string in secrets:</strong> store credentials in environment variables or a secrets file, not in code (e.g., <code class=\"inline\">postgresql://user:pass@host/db?sslmode=require</code>).</li>\r\n      <li><strong>Use SSL and pooling:</strong> production databases require SSL; web apps benefit from connection pooling.</li>\r\n      <li><strong>Migrations:</strong> apply schema changes via SQL scripts or a tool (e.g., Alembic). Prefer idempotent DDL (<code class=\"inline\">IF NOT EXISTS</code>).</li>\r\n      <li><strong>Environments:</strong> separate <em>dev / staging / prod</em> databases or branches to test safely.</li>\r\n      <li><strong>Resilience:</strong> add timeouts/retries for transient errors; keep writes transactional and idempotent where possible.</li>\r\n      <li><strong>Monitoring:</strong> log slow queries, watch error rates, and set health checks.</li>\r\n    </ul>\r\n\r\n    <h3>When to stay local vs go online</h3>\r\n    <ul>\r\n      <li><strong>Stay local</strong> for solo prototypes, classroom exercises, or offline demos.</li>\r\n      <li><strong>Go online</strong> before sharing with others, embedding in a public site, or relying on data that must be durable and always available.</li>\r\n    </ul>\r\n\r\n    <p><strong>Up next:</strong> we’ll provision a serverless Postgres database online (e.g., Neon), create at least one table, and connect your Streamlit app to it—so your data is live, durable, and accessible around the clock.</p>\r\n  </div>\r\n</section>"
          },
          "lesson_uid": "71ee2658-61c3-4896-887a-9d11959726b9"
        },
        {
          "kind": "article",
          "order": 2,
          "title": "Neon (Serverless Postgres) +Create Project & Table",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Neon • Setup: Create Project, Table, and Connection String (with Photos)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Video container === */\r\n.video-container {\r\n  background: #ffffff;\r\n  border: 1px solid #EBEBEB;\r\n  border-radius: 14px;\r\n  overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04);\r\n  margin-bottom: 24px;\r\n  padding: 20px;\r\n}\r\n\r\n.video-container h2 {\r\n  margin: 0 0 16px;\r\n  font-size: 20px;\r\n  color: #000;\r\n  text-align: center;\r\n}\r\n\r\n.video-wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 0;\r\n  padding-bottom: 45.2%; /* 473/1047 aspect ratio */\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n}\r\n\r\n.video-wrapper iframe {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Layout helpers === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #f0f0f0; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- Video Tutorial -->\r\n  <div class=\"video-container\">\r\n    <h2>Video Tutorial: Neon Setup Walkthrough</h2>\r\n    <div class=\"video-wrapper\">\r\n      <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/1N3v7-DhgEI\" title=\"Neon (Serverless Postgres) +Create Project & Table\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Overview / Sign up -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Neon Setup</small>\r\n      <h1>Set up Neon: account, project, table, and connection string</h1>\r\n      <p>We'll create a Neon project, build a table in the SQL Editor, and copy the pooled connection string</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        <strong>Neon</strong> is a serverless PostgreSQL platform that provides fast startup, autoscaling, and a pooled\r\n        connection endpoint ideal for web apps. This page walks you through the initial setup.\r\n      </p>\r\n      <ul>\r\n        <li><strong>Official site:</strong> <a href=\"https://neon.tech\" target=\"_blank\" rel=\"noopener\">https://neon.tech</a></li>\r\n        <li><strong>Documentation:</strong> <a href=\"https://neon.tech/docs\" target=\"_blank\" rel=\"noopener\">https://neon.tech/docs</a></li>\r\n        <li><strong>Console (sign up / sign in):</strong> <a href=\"https://console.neon.tech\" target=\"_blank\" rel=\"noopener\">https://console.neon.tech</a></li>\r\n      </ul>\r\n      <p>\r\n        <strong>How to sign up:</strong> open the Neon Console and create an account (email or common OAuth providers). After verifying your\r\n        account, you'll land in the dashboard where you can create your first project.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- Step 1 -->\r\n  <section class=\"section-card\" id=\"step1\">\r\n    <div class=\"banner\">\r\n      <small>Step 1</small>\r\n      <h1>Create a Neon project</h1>\r\n      <p>Choose name, PostgreSQL version 17, cloud provider, and closest region</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li>In the Neon console, click <strong>Create project</strong>.</li>\r\n        <li>Set the following:\r\n          <ul>\r\n            <li><strong>Project name</strong>: any name (e.g., <em>attendance-demo</em>)</li>\r\n            <li><strong>PostgreSQL version</strong>: <strong>17</strong></li>\r\n            <li><strong>Cloud</strong>: <strong>AWS</strong></li>\r\n            <li><strong>Region</strong>: select the closest to your users</li>\r\n          </ul>\r\n        </li>\r\n        <li>Click <strong>Create</strong> to finish.</li>\r\n      </ol>\r\n\r\n      <!-- Create project screenshot -->\r\n      <a href=\"https://i.imgur.com/XqTD87X.png\" target=\"_blank\" rel=\"noopener\"\r\n         title=\"Open full-size • Create Neon project (name, Postgres 17, AWS, region)\">\r\n        <img src=\"https://i.imgur.com/XqTD87X.png\" alt=\"Create Neon project dialog with project name, PostgreSQL 17, AWS, region selection\" />\r\n      </a>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- Step 2 -->\r\n  <section class=\"section-card\" id=\"step2\">\r\n    <div class=\"banner\">\r\n      <small>Step 2</small>\r\n      <h1>Create a table in Neon (SQL Editor)</h1>\r\n      <p>Run DDL and seed rows so your app has data to show</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>Open <strong>SQL Editor</strong> → select your branch & database → paste and <strong>Run</strong> the following:</p>\r\n<pre>-- Optional: app schema\r\nCREATE SCHEMA IF NOT EXISTS app;\r\n\r\n-- Employees table\r\nCREATE TABLE IF NOT EXISTS app.employees (\r\n  employee_id TEXT PRIMARY KEY,\r\n  first_name  TEXT NOT NULL,\r\n  last_name   TEXT NOT NULL,\r\n  email       TEXT UNIQUE,\r\n  department  TEXT,\r\n  job_title   TEXT,\r\n  hire_date   DATE NOT NULL DEFAULT CURRENT_DATE,\r\n  status      TEXT NOT NULL CHECK (status IN ('active','inactive')),\r\n  created_at  TIMESTAMPTZ NOT NULL DEFAULT now()\r\n);\r\n\r\n-- Seed rows (safe to re-run)\r\nINSERT INTO app.employees (employee_id, first_name, last_name, email, department, job_title, status)\r\nVALUES\r\n  ('E1001','Mary','Kareem','[email protected]','Sales','Rep','active'),\r\n  ('E1002','John','Ali','[email protected]','Ops','Assistant','active')\r\nON CONFLICT (employee_id) DO NOTHING;</pre>\r\n\r\n      <!-- SQL Editor screenshot -->\r\n      <a href=\"https://i.imgur.com/2ITMuSe.png\" target=\"_blank\" rel=\"noopener\"\r\n         title=\"Open full-size • Run SQL in Neon SQL Editor\">\r\n        <img src=\"https://i.imgur.com/2ITMuSe.png\" alt=\"Neon SQL Editor showing CREATE TABLE and INSERT statements\" />\r\n      </a>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- Step 3 -->\r\n  <section class=\"section-card\" id=\"step3\">\r\n    <div class=\"banner\">\r\n      <small>Step 3</small>\r\n      <h1>Get your pooled connection string</h1>\r\n      <p>Use Overview → Connect and copy the URL with <code class=\"inline\">-pooler</code> in the hostname</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li>From your project, go to <strong>Overview → Connect</strong>.</li>\r\n        <li>Toggle <strong>Connection pooling</strong> ON (if not already), then copy the pooled connection string\r\n            (hostname contains <code class=\"inline\">-pooler</code>).</li>\r\n        <li>Keep all query parameters (e.g., <code class=\"inline\">sslmode=require</code>); Neon enforces SSL.</li>\r\n      </ol>\r\n\r\n      <!-- Overview / Connect / Connection String screenshot -->\r\n      <a href=\"https://i.imgur.com/vhHZGTz.png\" target=\"_blank\" rel=\"noopener\"\r\n         title=\"Open full-size • Overview → Connect → pooled connection string\">\r\n        <img src=\"https://i.imgur.com/vhHZGTz.png\" alt=\"Neon Overview/Connect page showing pooled connection string to copy\" />\r\n      </a>\r\n\r\n      <p style=\"margin-top:10px;\">\r\n        <strong>Why the pooled URL?</strong> Web UIs like Streamlit open many short‑lived connections. The pooled endpoint (PgBouncer)\r\n        absorbs this load and keeps your app responsive.\r\n      </p>\r\n      <p><strong>Next:</strong> proceed to the Streamlit page to add secrets, install dependencies, and build a simple app that reads and writes to <code class=\"inline\">app.employees</code>.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(undefined, {year:'numeric', month:'short', day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "1d052f9f-2fc2-44ed-aad3-589e82eaaa24"
        },
        {
          "kind": "article",
          "order": 3,
          "title": "Neon + Streamlit: Secrets, App, Run & Deploy",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Streamlit + Neon • Build & Run in GitHub Codespaces</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Video container === */\r\n.video-container {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  border-radius: 14px;\r\n  padding: 24px;\r\n  margin-bottom: 32px;\r\n  text-align: center;\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n}\r\n\r\n.video-container h2 {\r\n  color: #ffffff;\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n  margin: 0 0 16px 0;\r\n  text-shadow: 0 1px 2px rgba(0,0,0,0.2);\r\n}\r\n\r\n.video-wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 1047px;\r\n  margin: 0 auto;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  box-shadow: 0 8px 24px rgba(0,0,0,0.2);\r\n}\r\n\r\n.video-wrapper iframe {\r\n  width: 100%;\r\n  height: 473px;\r\n  border: none;\r\n  display: block;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .video-wrapper iframe {\r\n    height: 280px;\r\n  }\r\n}\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- VIDEO SECTION -->\r\n  <div class=\"video-container\">\r\n    <div class=\"video-wrapper\">\r\n      <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/hT6fCAgSE08\" title=\"Neon + Streamlit: Secrets, App, Run & Deploy\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Streamlit Setup</small>\r\n      <h1>Build & Run Your Streamlit App (in GitHub Codespaces)</h1>\r\n      <p>Connect to Neon (serverless Postgres), show data, and insert rows</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>This page is self‑contained and starts from <strong>Step 1</strong>. You'll run Streamlit from a <strong>GitHub Codespace</strong>, connect to your Neon Postgres using a pooled connection string, and render a working UI.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 1 -->\r\n  <section class=\"section-card\" id=\"step1\">\r\n    <div class=\"banner\">\r\n      <small>Step 1</small>\r\n      <h1>Open Your GitHub Codespace</h1>\r\n      <p>We run Streamlit inside Codespaces so it can forward a web port</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li>Go to your GitHub repo → click <strong>Code</strong> → <strong>Codespaces</strong> → <strong>Create codespace</strong> (or open an existing one).</li>\r\n        <li>In the Codespace VS Code window, confirm you see your project files in the Explorer.</li>\r\n        <li>Ports will be auto‑forwarded when you run Streamlit; you'll open the forwarded URL in a browser.</li>\r\n      </ol>\r\n      <p><em>Tip:</em> The workspace path typically looks like <code class=\"inline\">/workspaces/<repo-name></code>.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 2 -->\r\n  <section class=\"section-card\" id=\"step2\">\r\n    <div class=\"banner\">\r\n      <small>Step 2</small>\r\n      <h1>Add Secrets (Neon Pooled Connection)</h1>\r\n      <p>Create <code class=\"inline\">.streamlit/secrets.toml</code> with your pooled URL</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li>In the Codespace, create a folder <code class=\"inline\">.streamlit</code> at the project root.</li>\r\n        <li>Create a file <code class=\"inline\">.streamlit/secrets.toml</code> and paste your Neon <strong>pooled</strong> SQLAlchemy URL (host contains <code class=\"inline\">-pooler</code>):</li>\r\n      </ol>\r\n<pre># .streamlit/secrets.toml\r\n[connections.neon]\r\n# Use your NEON pooled endpoint; keep sslmode=require\r\nurl = \"postgresql+psycopg2://USER:PASSWORD@ep-xxxx-pooler.REGION.neon.tech/DB?sslmode=require\"</pre>\r\n      <p><strong>Why pooled?</strong> PgBouncer handles many short‑lived web connections efficiently.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 3 -->\r\n  <section class=\"section-card\" id=\"step3\">\r\n    <div class=\"banner\">\r\n      <small>Step 3</small>\r\n      <h1>Install Dependencies</h1>\r\n      <p>Minimal requirements for Streamlit + Postgres</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li>Create <code class=\"inline\">requirements.txt</code> with:</li>\r\n      </ol>\r\n<pre>streamlit\r\nsqlalchemy\r\npsycopg2-binary</pre>\r\n      <ol start=\"2\">\r\n        <li>Install them:</li>\r\n      </ol>\r\n<pre>pip install -r requirements.txt</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 4 -->\r\n  <section class=\"section-card\" id=\"step4\">\r\n    <div class=\"banner\">\r\n      <small>Step 4</small>\r\n      <h1>Create the Streamlit App</h1>\r\n      <p>Copy/paste into <code class=\"inline\">streamlit_app.py</code></p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre>import streamlit as st\r\nfrom sqlalchemy import text\r\n\r\nst.set_page_config(page_title=\"Neon + Streamlit\", page_icon=\"🟢\", layout=\"centered\")\r\nst.title(\"Neon + Streamlit (Postgres)\")\r\nst.caption(\"Serverless Postgres on Neon, UI with Streamlit\")\r\n\r\n# 1) Connect via secrets (.streamlit/secrets.toml)\r\nconn = st.connection(\"neon\", type=\"sql\")\r\n\r\n# 2) Optional bootstrap — create schema/table if missing\r\n#    Safe to run behind a pooled connection for simple IF NOT EXISTS DDL\r\nwith conn.session as s:\r\n    s.execute(text(\"CREATE SCHEMA IF NOT EXISTS app\"))\r\n    s.execute(text(\"\"\"\r\n        CREATE TABLE IF NOT EXISTS app.employees (\r\n            employee_id TEXT PRIMARY KEY,\r\n            first_name  TEXT NOT NULL,\r\n            last_name   TEXT NOT NULL,\r\n            email       TEXT UNIQUE,\r\n            department  TEXT,\r\n            job_title   TEXT,\r\n            hire_date   DATE NOT NULL DEFAULT CURRENT_DATE,\r\n            status      TEXT NOT NULL CHECK (status IN ('active','inactive')),\r\n            created_at  TIMESTAMPTZ NOT NULL DEFAULT now()\r\n        )\r\n    \"\"\"))\r\n    s.commit()\r\n\r\n# 3) Insert form\r\nwith st.form(\"add_employee\"):\r\n    st.subheader(\"Add employee\")\r\n    eid   = st.text_input(\"Employee ID\", placeholder=\"E1003\")\r\n    first = st.text_input(\"First name\")\r\n    last  = st.text_input(\"Last name\")\r\n    email = st.text_input(\"Email (optional)\")\r\n    dept  = st.text_input(\"Department (optional)\")\r\n    title = st.text_input(\"Job title (optional)\")\r\n    status = st.selectbox(\"Status\", [\"active\", \"inactive\"], index=0)\r\n    if st.form_submit_button(\"Insert row\"):\r\n        if not (eid and first and last):\r\n            st.error(\"Employee ID, first name, and last name are required.\")\r\n        else:\r\n            try:\r\n                with conn.session as s:\r\n                    s.execute(\r\n                        text(\"\"\"INSERT INTO app.employees\r\n                                (employee_id, first_name, last_name, email, department, job_title, status)\r\n                                VALUES (:eid, :fn, :ln, :em, :dp, :jt, :st)\"\"\"),\r\n                        dict(eid=eid, fn=first, ln=last, em=email or None,\r\n                             dp=dept or None, jt=title or None, st=status)\r\n                    )\r\n                    s.commit()\r\n                st.success(f\"Inserted employee {eid}\")\r\n            except Exception as e:\r\n                st.error(f\"Insert failed: {e}\")\r\n\r\n# 4) Table view (cached)\r\nst.subheader(\"Employees\")\r\ndf = conn.query(\r\n    \"SELECT employee_id, first_name, last_name, email, department, job_title, status, created_at \"\r\n    \"FROM app.employees ORDER BY created_at DESC\",\r\n    ttl=\"5m\"\r\n)\r\nst.dataframe(df, use_container_width=True)\r\n\r\n# 5) Health check\r\nst.caption(\"DB time (server):\")\r\nst.write(conn.query(\"SELECT now() AS server_time\").iloc[0][\"server_time\"])</pre>\r\n      <p>The app connects via <code class=\"inline\">st.connection(\"neon\", type=\"sql\")</code>, bootstraps the table if missing, lets you insert a row, and shows the dataset.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 5 -->\r\n  <section class=\"section-card\" id=\"step5\">\r\n    <div class=\"banner\">\r\n      <small>Step 5</small>\r\n      <h1>Run Streamlit in Codespaces</h1>\r\n      <p>Forward a port and open in your browser</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li>From the Codespace terminal, run:</li>\r\n      </ol>\r\n<pre>streamlit run streamlit_app.py --server.address 0.0.0.0 --server.port 8000</pre>\r\n      <ol start=\"2\">\r\n        <li>Open the <strong>Ports</strong> panel in Codespaces (bottom or left), find port <strong>8000</strong>, and click the globe icon to open it in your browser.</li>\r\n      </ol>\r\n      <p><em>If prompted</em>, set the port to <strong>Public</strong> to share the link; otherwise keep it private.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- RESULT -->\r\n  <section class=\"section-card\" id=\"result\">\r\n    <div class=\"banner\">\r\n      <small>Result</small>\r\n      <h1>What You Should See</h1>\r\n      <p>Form to add an employee + live table view</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <a href=\"https://i.imgur.com/F93FuRl.png\" target=\"_blank\" rel=\"noopener\"\r\n         title=\"Open full-size • Streamlit app result\">\r\n        <img src=\"https://i.imgur.com/F93FuRl.png\" alt=\"Streamlit app showing insert form and employees table\" />\r\n      </a>\r\n      <p>Use the form to add a new employee, then confirm the row appears at the top of the table. The server time confirms your database connection is live.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- TROUBLESHOOTING -->\r\n  <section class=\"section-card\" id=\"tips\">\r\n    <div class=\"banner\">\r\n      <small>Help</small>\r\n      <h1>Troubleshooting & Tips</h1>\r\n      <p>Most issues are secrets, pooling, or ports</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>\"secrets not found\":</strong> Ensure the file is <code class=\"inline\">.streamlit/secrets.toml</code> (correct path) and the key is <code class=\"inline\">[connections.neon]</code> with a valid <code class=\"inline\">url</code>.</li>\r\n        <li><strong>\"connection refused/SSL\":</strong> Use the <strong>pooled</strong> Neon URL (host has <code class=\"inline\">-pooler</code>) and include <code class=\"inline\">sslmode=require</code>.</li>\r\n        <li><strong>Port not opening:</strong> Use the exact command above with <code class=\"inline\">--server.address 0.0.0.0</code> and check the <strong>Ports</strong> panel to open <strong>8000</strong>.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "8f472c68-88b6-47e2-8063-ee9226a9b0ac"
        },
        {
          "kind": "article",
          "order": 4,
          "title": "Add New Tables",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Neon + Streamlit • Add New Tables</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Code blocks (white on dark grey) === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- VIDEO EMBED -->\r\n  <section class=\"section-card\" id=\"video\">\r\n    <div class=\"body\" style=\"padding:0;\">\r\n      <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/6CR3rcTLwKw\" title=\"Extend Your App: Attendance Log (Neon + Streamlit)\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Add-On</small>\r\n      <h1>Extend Your App: Attendance Log (Neon + Streamlit)</h1>\r\n      <p>Assumes <code class=\"inline\">app.employees</code> already exists — we’ll only add and use <code class=\"inline\">app.attendance_log</code></p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        Got it. Here’s the <strong>clean add-on</strong> that keeps your existing employees table untouched. You’ll:\r\n      </p>\r\n      <ul>\r\n        <li><strong>Create</strong> a new table <code class=\"inline\">app.attendance_log</code> in Neon (with FK → <code class=\"inline\">app.employees</code>).</li>\r\n        <li><strong>Update</strong> your Streamlit app to read/write attendance (check-in/out, status/notes) without re-defining employees.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- 1) CREATE TABLE IN NEON -->\r\n  <section class=\"section-card\" id=\"neon\">\r\n    <div class=\"banner\">\r\n      <small>Step 1</small>\r\n      <h1>Create the new table in Neon (no employees duplication)</h1>\r\n      <p>Run in Neon → SQL Editor (or via <code class=\"inline\">psql</code>)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>Use <strong>Neon → SQL Editor</strong> and run <em>only</em> this DDL/DML:</p>\r\n<pre>-- New table: attendance_log (references existing app.employees)\r\nCREATE TABLE IF NOT EXISTS app.attendance_log (\r\n  log_id         BIGSERIAL PRIMARY KEY,\r\n  employee_id    TEXT NOT NULL REFERENCES app.employees(employee_id)\r\n                   ON UPDATE CASCADE ON DELETE RESTRICT,\r\n  date           DATE NOT NULL,\r\n  check_in_time  TIMESTAMPTZ,\r\n  check_out_time TIMESTAMPTZ,\r\n  status         TEXT,   -- e.g., 'Present','Sick','Leave'\r\n  notes          TEXT,\r\n  CONSTRAINT attendance_unique_per_day UNIQUE (employee_id, date)\r\n);\r\n\r\n-- Helpful index for common filters\r\nCREATE INDEX IF NOT EXISTS idx_attendance_employee_date\r\n  ON app.attendance_log (employee_id, date);\r\n\r\n-- Optional: seed attendance for *today* for all current employees (safe to re-run)\r\nINSERT INTO app.attendance_log (employee_id, date, check_in_time, status)\r\nSELECT employee_id, CURRENT_DATE, now(), 'Present'\r\nFROM app.employees\r\nON CONFLICT (employee_id, date) DO NOTHING;</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- 2) UPDATE STREAMLIT APP -->\r\n  <section class=\"section-card\" id=\"app\">\r\n    <div class=\"banner\">\r\n      <small>Step 2</small>\r\n      <h1>Update your Streamlit app to use the new table</h1>\r\n      <p>No secrets change • No employees DDL repetition • Attendance only</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>No changes</strong> to your <code class=\"inline\">.streamlit/secrets.toml</code>.</li>\r\n        <li>The code below ensures <code class=\"inline\">app.attendance_log</code> exists and uses it; it <em>does not</em> recreate <code class=\"inline\">app.employees</code>.</li>\r\n      </ul>\r\n      <p><strong>Replace / extend</strong> your <code class=\"inline\">streamlit_app.py</code> with the section below (or add it as a new page if you’re using multipage apps):</p>\r\n      <!-- streamlit code here (unchanged) -->\r\n      ... (content unchanged for brevity) ...\r\n    </div>\r\n  </section>\r\n\r\n  <!-- 3) REUSABLE PATTERN -->\r\n  <section class=\"section-card\" id=\"pattern\">\r\n    <div class=\"banner\">\r\n      <small>Step 3</small>\r\n      <h1>Pattern you’ll reuse for more tables</h1>\r\n      <p>Scale your schema safely, one feature at a time</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li><strong>DDL in Neon:</strong> <code class=\"inline\">CREATE TABLE IF NOT EXISTS app.<new_table>(…)</code> with FKs to core keys (e.g., <code class=\"inline\">employee_id</code>) and indexes for your filters.</li>\r\n        <li><strong>Optional app bootstrap:</strong> repeat only the new table’s <code class=\"inline\">CREATE TABLE IF NOT EXISTS</code> in your app so fresh environments don’t break.</li>\r\n        <li><strong>Read/Write in Streamlit:</strong> <code class=\"inline\">conn.query(\"SELECT …\")</code> for reads; transactional writes via\r\n          <code class=\"inline\">with conn.session as s: s.execute(text(...), params); s.commit()</code>.</li>\r\n      </ol>\r\n      <p>This keeps your schema growing without touching the parts that already work.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "46942c75-e7c6-4429-9b26-49ed228fc161"
        },
        {
          "kind": "article",
          "order": 5,
          "title": "Deploying Streamlit • Make It a Public App",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Deploying Streamlit • Make It a Public App</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Code blocks (white on dark grey) === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Grid / boxes === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- VIDEO EMBED -->\r\n  <section class=\"section-card\" id=\"video\" style=\"margin-bottom:24px;\">\r\n    <div class=\"body\" style=\"padding:0;\">\r\n      <iframe width=\"100%\" height=\"473\" src=\"https://www.youtube.com/embed/PZkSaPGL-h8\" title=\"Deploying Streamlit • Make It a Public App\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Deploy</small>\r\n      <h1>Deploying Streamlit & Making It Public</h1>\r\n      <p>Codespaces → GitHub → Streamlit Community Cloud</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>This guide takes your working Streamlit app and puts it online as a public app. You’ll keep secrets out of Git, push to GitHub, and deploy on Streamlit Community Cloud — then add the same secrets in the cloud UI.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 0: PREFLIGHT -->\r\n  <section class=\"section-card\" id=\"preflight\">\r\n    <div class=\"banner\">\r\n      <small>0)</small>\r\n      <h1>Preflight (in your Codespace)</h1>\r\n      <p>Keep secrets out of Git!</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>Make sure you have a local secrets file and it’s ignored:</p>\r\n<pre>mkdir -p .streamlit\r\nprintf \"[connections.neon]\\nurl = \\\"postgresql+psycopg2://USER:PASSWORD@ep-xxxx-pooler.REGION.neon.tech/DB?sslmode=require\\\"\\n\" > .streamlit/secrets.toml\r\necho \".streamlit/secrets.toml\" >> .gitignore</pre>\r\n      <p>You’ll paste the same block into Streamlit Cloud’s <strong>Secrets</strong> UI later. Streamlit recommends using <code class=\"inline\">secrets.toml</code> and never committing secrets.</p>\r\n\r\n      <div class=\"grid\" style=\"margin-top:12px;\">\r\n        <div class=\"box\">\r\n          <h3>requirements.txt (example)</h3>\r\n<pre>streamlit\r\nsqlalchemy\r\npsycopg2-binary</pre>\r\n          <p>If you already have a <code class=\"inline\">requirements.txt</code>, just ensure these are listed.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Repo layout (example)</h3>\r\n<pre>learningexamples/\r\n├─ app.py                 # your Streamlit entry point\r\n├─ requirements.txt       # streamlit, sqlalchemy, psycopg2-binary\r\n├─ .gitignore             # must include .streamlit/secrets.toml\r\n└─ (other files as needed)</pre>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 1: PUSH TO GITHUB -->\r\n  <section class=\"section-card\" id=\"push\">\r\n    <div class=\"banner\">\r\n      <small>1)</small>\r\n      <h1>Push to GitHub (from your Codespace terminal)</h1>\r\n      <p>Stage → Commit → Push → Verify</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre># From the repo root in Codespaces\r\ngit status\r\n\r\n# Stage new files + deletions\r\ngit add -A\r\n\r\n# Commit\r\ngit commit -m \"Streamlit app: add app.py + requirements; remove old main.py\"\r\n\r\n# Push\r\ngit push origin main\r\n\r\n# Verify\r\ngit status\r\ngit log --oneline -n 1</pre>\r\n      <p>After pushing, confirm your repo shows <code class=\"inline\">app.py</code>, <code class=\"inline\">requirements.txt</code>, and <code class=\"inline\">.gitignore</code> on GitHub. Your local <code class=\"inline\">.streamlit/secrets.toml</code> should NOT be in Git.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP E: DEPLOY ON STREAMLIT CLOUD -->\r\n  <section class=\"section-card\" id=\"deploy\">\r\n    <div class=\"banner\">\r\n      <small>E)</small>\r\n      <h1>Deploy on Streamlit Community Cloud</h1>\r\n      <p>Create app → Add secrets → Restart → Verify</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li><strong>Create app</strong>\r\n          <ul>\r\n            <li>Go to Streamlit Community Cloud → <strong>Create app</strong></li>\r\n            <li><strong>Select repo:</strong> <code class=\"inline\">AIforimpact22/learningexamples</code> (example)</li>\r\n            <li><strong>Branch:</strong> <code class=\"inline\">main</code></li>\r\n            <li><strong>Main file path:</strong> <code class=\"inline\">app.py</code></li>\r\n            <li>Click <strong>Deploy</strong></li>\r\n          </ul>\r\n        </li>\r\n        <li style=\"margin-top:8px;\"><strong>Add Secrets (required)</strong>\r\n          <ul>\r\n            <li>App page → <strong>⋯</strong> → <strong>Edit secrets</strong> → paste:</li>\r\n          </ul>\r\n<pre>[connections.neon]\r\nurl = \"postgresql+psycopg2://USER:PASSWORD@ep-xxxx-pooler.REGION.neon.tech/DB?sslmode=require\"</pre>\r\n          <ul>\r\n            <li><strong>Save</strong> and <strong>Restart</strong> the app.</li>\r\n          </ul>\r\n        </li>\r\n        <li style=\"margin-top:8px;\"><strong>Verify</strong>\r\n          <ul>\r\n            <li>Open the deployed URL.</li>\r\n            <li>The app should connect to Neon and show your pages.</li>\r\n          </ul>\r\n        </li>\r\n      </ol>\r\n\r\n      <div class=\"box\" style=\"margin-top:12px;\">\r\n        <h3>If something fails</h3>\r\n        <ul>\r\n          <li>Check <strong>View logs</strong> from the app menu.</li>\r\n          <li>Confirm the connection string is correct, includes <code class=\"inline\">sslmode=require</code>, and uses the pooled host (contains <code class=\"inline\">-pooler</code>).</li>\r\n          <li>Ensure your database objects are created (e.g., schema/table exist in Neon).</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "afef2680-4630-45ab-b140-5553d0ddb5f0"
        },
        {
          "kind": "article",
          "order": 6,
          "title": "Streamlit Access Gate • Password for Security",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Streamlit Access Gate • Password or Token via st.secrets</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Code blocks (white on dark grey) === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n/* Inline code chip — per your preference */\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n\r\n/* === Video embed === */\r\n.video-embed { margin: 20px 0 30px; border-radius: 12px; overflow: hidden; box-shadow: 0 2px 6px rgba(0,0,0,.15); }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- VIDEO EMBED -->\r\n  <div class=\"video-embed\">\r\n    <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/WuA0Dt33g3I\" title=\"Streamlit Access Gate • Password for Security\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n  </div>\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Security • Minimal</small>\r\n      <h1>Simple Access Gate for Streamlit (No External Auth)</h1>\r\n      <p>Password or private token via <code class=\"inline\">st.secrets</code> — quick protection for your app</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        Add a lightweight gate so only users with a shared password or a private tokenized link can open your app.\r\n        No OAuth/SSO or external providers — just Streamlit and <code class=\"inline\">.streamlit/secrets.toml</code>.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- 1) SECRETS -->\r\n  <section class=\"section-card\" id=\"secrets\">\r\n    <div class=\"banner\">\r\n      <small>Step 1</small>\r\n      <h1>Add minimal auth secrets (don’t commit these)</h1>\r\n      <p>Put secrets locally, then paste the same into Streamlit Cloud → <em>Edit secrets</em></p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>In your local <code class=\"inline\">.streamlit/secrets.toml</code> (and later in Streamlit Cloud’s Secrets), add <strong>one</strong> of these:</p>\r\n\r\n      <p><strong>Option A — Single password (easiest)</strong></p>\r\n<pre>[auth]\r\npassword = \"Set-A-Strong-Password-Here\"</pre>\r\n\r\n      <p><strong>Option B — Hashed password (no plaintext)</strong></p>\r\n<pre>[auth]\r\npassword_sha256 = \"PUT_SHA256_HEX_OF_YOUR_PASSWORD_HERE\"</pre>\r\n\r\n      <p>Generate the SHA-256 hash locally:</p>\r\n<pre>python - <<'PY'\r\nimport hashlib\r\nprint(hashlib.sha256(b\"Set-A-Strong-Password-Here\").hexdigest())\r\nPY</pre>\r\n\r\n      <p><strong>Optional — Private link tokens (for “magic links”)</strong></p>\r\n<pre>[auth]\r\ntokens = [\"my-very-secret-link-token-1\", \"another-token\"]</pre>\r\n\r\n      <p>Anyone who opens your app with <code class=\"inline\">?token=my-very-secret-link-token-1</code> is auto-signed-in.</p>\r\n\r\n      <p><strong>Keep secrets out of Git:</strong></p>\r\n<pre>echo \".streamlit/secrets.toml\" >> .gitignore</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- 2) APP CODE -->\r\n  <section class=\"section-card\" id=\"app\">\r\n    <div class=\"banner\">\r\n      <small>Step 2</small>\r\n      <h1>Drop-in secure version of your <code class=\"inline\">app.py</code></h1>\r\n      <p>Tiny login gate: query-token or password → session → show app</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        Paste this over your current file (it keeps your attendance logic intact). The gate runs first; if the user is not\r\n        authenticated, they’ll see a sidebar login. On success, we store a flag in <code class=\"inline\">st.session_state</code>.\r\n      </p>\r\n<pre>import streamlit as st\r\nfrom sqlalchemy import text\r\nimport hashlib, hmac\r\n\r\nst.set_page_config(page_title=\"Neon + Streamlit • Attendance\", page_icon=\"🗄️\", layout=\"centered\")\r\n\r\n# ---------- Simple Access Gate (password or token) ----------\r\ndef _sha256(s: str) -> str:\r\n    return hashlib.sha256(s.encode(\"utf-8\")).hexdigest()\r\n\r\ndef _get_query_param(name: str):\r\n    # Works on both new & older Streamlit versions\r\n    try:\r\n        # Newer: st.query_params (Mapping)\r\n        qp = st.query_params  # may raise on older versions\r\n        val = qp.get(name, None)\r\n        if isinstance(val, list):  # just in case\r\n            return val[0] if val else None\r\n        return val\r\n    except Exception:\r\n        # Older: experimental_get_query_params()\r\n        val = st.experimental_get_query_params().get(name, [None])\r\n        return val[0] if isinstance(val, list) else val\r\n\r\ndef require_login() -> bool:\r\n    if st.session_state.get(\"_authed\"):\r\n        with st.sidebar:\r\n            st.success(\"Signed in\")\r\n            if st.button(\"Sign out\"):\r\n                st.session_state.clear()\r\n                st.rerun()\r\n        return True\r\n\r\n    secrets_auth = st.secrets.get(\"auth\", {})\r\n    # 1) Token via URL (?token=...)\r\n    token = _get_query_param(\"token\")\r\n    allowed_tokens = set()\r\n    if \"tokens\" in secrets_auth:\r\n        allowed_tokens = {str(x) for x in secrets_auth[\"tokens\"]}\r\n    elif \"token\" in secrets_auth:\r\n        allowed_tokens = {str(secrets_auth[\"token\"])}\r\n\r\n    if token and token in allowed_tokens:\r\n        st.session_state[\"_authed\"] = True\r\n        st.session_state[\"_method\"] = \"token\"\r\n        st.rerun()\r\n\r\n    # 2) Password in sidebar\r\n    with st.sidebar:\r\n        st.markdown(\"### Sign in\")\r\n        pw_input = st.text_input(\"Access password\", type=\"password\")\r\n        if st.button(\"Sign in\", use_container_width=True):\r\n            ok = False\r\n            if \"password_sha256\" in secrets_auth:\r\n                ok = hmac.compare_digest(_sha256(pw_input), secrets_auth[\"password_sha256\"])\r\n            elif \"password\" in secrets_auth:\r\n                ok = hmac.compare_digest(pw_input, secrets_auth[\"password\"])\r\n            if ok:\r\n                st.session_state[\"_authed\"] = True\r\n                st.session_state[\"_method\"] = \"password\"\r\n                st.toast(\"Signed in\")\r\n                st.rerun()\r\n            else:\r\n                st.error(\"Invalid password\")\r\n    st.info(\"Enter the access password to continue.\")\r\n    return False\r\n\r\n# Gate everything below\r\nif not require_login():\r\n    st.stop()\r\n\r\n# ---------- App content (unchanged except moved below the gate) ----------\r\nst.title(\"Employees + Attendance\")\r\nst.caption(\"Neon (Postgres) backend • Streamlit frontend\")\r\n\r\n# 1) Connect via secrets (you already set [connections.neon].url in secrets.toml)\r\nconn = st.connection(\"neon\", type=\"sql\")\r\n\r\n# 2) Bootstrap ONLY the new table (safe to run; does not touch app.employees)\r\nwith conn.session as s:\r\n    s.execute(text(\"\"\"\r\n        CREATE TABLE IF NOT EXISTS app.attendance_log (\r\n            log_id BIGSERIAL PRIMARY KEY,\r\n            employee_id TEXT NOT NULL REFERENCES app.employees(employee_id)\r\n                ON UPDATE CASCADE ON DELETE RESTRICT,\r\n            date DATE NOT NULL,\r\n            check_in_time TIMESTAMPTZ,\r\n            check_out_time TIMESTAMPTZ,\r\n            status TEXT,\r\n            notes TEXT,\r\n            CONSTRAINT attendance_unique_per_day UNIQUE (employee_id, date)\r\n        )\r\n    \"\"\"))\r\n    s.execute(text(\"\"\"\r\n        CREATE INDEX IF NOT EXISTS idx_attendance_employee_date\r\n        ON app.attendance_log (employee_id, date)\r\n    \"\"\"))\r\n    s.commit()\r\n\r\n# 3) Employees list (for UI selection) — reads existing table, no DDL\r\nemployees_df = conn.query(\"\"\"\r\n    SELECT employee_id, first_name, last_name\r\n    FROM app.employees\r\n    ORDER BY first_name, last_name\r\n\"\"\", ttl=\"2m\")\r\n\r\nst.subheader(\"Attendance (Today)\")\r\nif employees_df.empty:\r\n    st.info(\"No employees found. Add employees first, then return to this page.\")\r\nelse:\r\n    options = employees_df.apply(\r\n        lambda r: f\"{r['first_name']} {r['last_name']} ({r['employee_id']})\", axis=1\r\n    ).tolist()\r\n    choice = st.selectbox(\"Select employee\", options)\r\n    eid = employees_df.iloc[options.index(choice)][\"employee_id\"]\r\n\r\n    c1, c2, c3 = st.columns(3)\r\n\r\n    with c1:\r\n        if st.button(\"Check In\"):\r\n            try:\r\n                with conn.session as s:\r\n                    s.execute(text(\"\"\"\r\n                        INSERT INTO app.attendance_log (employee_id, date, check_in_time, status)\r\n                        VALUES (:eid, CURRENT_DATE, now(), 'Present')\r\n                        ON CONFLICT (employee_id, date)\r\n                        DO UPDATE SET check_in_time = COALESCE(app.attendance_log.check_in_time, EXCLUDED.check_in_time)\r\n                    \"\"\"), {\"eid\": eid})\r\n                    s.commit()\r\n                st.success(f\"{eid} checked in.\")\r\n            except Exception as e:\r\n                st.error(f\"Check-in failed: {e}\")\r\n\r\n    with c2:\r\n        if st.button(\"Check Out\"):\r\n            try:\r\n                with conn.session as s:\r\n                    res = s.execute(text(\"\"\"\r\n                        UPDATE app.attendance_log\r\n                           SET check_out_time = now()\r\n                         WHERE employee_id = :eid\r\n                           AND date = CURRENT_DATE\r\n                           AND check_out_time IS NULL\r\n                    \"\"\"), {\"eid\": eid})\r\n                    s.commit()\r\n                st.success(f\"{eid} checked out.\") if res.rowcount else st.warning(\"No open check-in for today.\")\r\n            except Exception as e:\r\n                st.error(f\"Check-out failed: {e}\")\r\n\r\n    with c3:\r\n        status_note = st.text_input(\"Optional status/notes (e.g., Sick, Leave)\")\r\n        if st.button(\"Set Status/Note\"):\r\n            try:\r\n                with conn.session as s:\r\n                    s.execute(text(\"\"\"\r\n                        INSERT INTO app.attendance_log (employee_id, date)\r\n                        VALUES (:eid, CURRENT_DATE)\r\n                        ON CONFLICT (employee_id, date) DO NOTHING\r\n                    \"\"\"), {\"eid\": eid})\r\n                    s.execute(text(\"\"\"\r\n                        UPDATE app.attendance_log\r\n                           SET status = :st, notes = :nt\r\n                         WHERE employee_id = :eid AND date = CURRENT_DATE\r\n                    \"\"\"), {\"st\": status_note or None, \"nt\": status_note or None, \"eid\": eid})\r\n                    s.commit()\r\n                st.success(\"Status/notes updated.\")\r\n            except Exception as e:\r\n                st.error(f\"Update failed: {e}\")\r\n\r\n# 4) Views\r\nst.subheader(\"Today’s attendance\")\r\ntoday_df = conn.query(\"\"\"\r\n    SELECT\r\n      al.date,\r\n      e.employee_id,\r\n      e.first_name,\r\n      e.last_name,\r\n      al.check_in_time,\r\n      al.check_out_time,\r\n      al.status,\r\n      al.notes\r\n    FROM app.attendance_log al\r\n    JOIN app.employees e ON e.employee_id = al.employee_id\r\n    WHERE al.date = CURRENT_DATE\r\n    ORDER BY e.first_name, e.last_name\r\n\"\"\", ttl=\"30s\")\r\nst.dataframe(today_df, use_container_width=True)\r\n\r\nst.subheader(\"Recent attendance (last 30 days)\")\r\nrecent_df = conn.query(\"\"\"\r\n    SELECT\r\n      al.date,\r\n      e.employee_id,\r\n      e.first_name,\r\n      e.last_name,\r\n      al.check_in_time,\r\n      al.check_out_time,\r\n      al.status\r\n    FROM app.attendance_log al\r\n    JOIN app.employees e ON e.employee_id = al.employee_id\r\n    WHERE al.date >= CURRENT_DATE - INTERVAL '30 days'\r\n    ORDER BY al.date DESC, e.first_name, e.last_name\r\n\"\"\", ttl=\"2m\")\r\nst.dataframe(recent_df, use_container_width=True)\r\n\r\n# 5) Health check\r\nst.caption(\"DB server time:\")\r\nst.write(conn.query(\"SELECT now() AS server_time;\").iloc[0][\"server_time\"])</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- 3) HOW TO USE -->\r\n  <section class=\"section-card\" id=\"howto\">\r\n    <div class=\"banner\">\r\n      <small>Step 3</small>\r\n      <h1>How to use it</h1>\r\n      <p>Password sign-in, magic links, and sign out</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>Password sign-in:</strong> open your app, enter the password in the sidebar, click <em>Sign in</em>.</li>\r\n        <li><strong>Magic link sign-in:</strong> share <code class=\"inline\">https://your-app.streamlit.app/?token=THE_TOKEN</code> with trusted users (when <code class=\"inline\">tokens=[...]</code> is set in secrets).</li>\r\n        <li><strong>Sign out:</strong> use the sidebar button.</li>\r\n      </ul>\r\n      <p>This approach is <strong>simple</strong> (no OAuth/SSO), <strong>private</strong> (secrets live in Streamlit Cloud’s Secrets), <strong>stateless</strong> (per-session), and <strong>flexible</strong> (password or token links). You can later upgrade to SSO as needed.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "4a87b8ea-89f3-4ddd-bfdc-6d1005384dcd"
        },
        {
          "kind": "article",
          "order": 7,
          "title": "Full CRUD Operation",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Employees (CRUD) + Attendance • Streamlit + Neon</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Video container === */\r\n.video-container {\r\n  margin-bottom: 24px;\r\n  background: #f8f9fa;\r\n  border: 1px solid #e9ecef;\r\n  border-radius: 14px;\r\n  padding: 20px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,.06);\r\n}\r\n\r\n.video-container h2 {\r\n  margin: 0 0 16px 0;\r\n  font-size: 24px;\r\n  color: #333;\r\n  text-align: center;\r\n  font-weight: 600;\r\n}\r\n\r\n.video-wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 0;\r\n  padding-bottom: 56.25%; /* 16:9 aspect ratio */\r\n  overflow: hidden;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 12px rgba(0,0,0,.15);\r\n}\r\n\r\n.video-wrapper iframe {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  border: none;\r\n}\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Code blocks (white on dark grey) === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n/* Inline code chip — per your preference */\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n\r\n/* === Responsive video === */\r\n@media (max-width: 768px) {\r\n  .video-container {\r\n    padding: 15px;\r\n  }\r\n  .video-container h2 {\r\n    font-size: 20px;\r\n  }\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- VIDEO TUTORIAL SECTION -->\r\n  <div class=\"video-container\">\r\n    <div class=\"video-wrapper\">\r\n      <iframe src=\"https://www.youtube.com/embed/BFrKOEiwtMs\" title=\"Full CRUD Operation\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- INTRO + CRUD DEFINITION -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Employees Management</small>\r\n      <h1>Simple CRUD for <code class=\"inline\">app.employees</code> (with Attendance)</h1>\r\n      <p>Secure Streamlit UI • Parameterized SQL • No schema duplication</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <h3 style=\"margin-top:0;\">What is CRUD?</h3>\r\n      <ul>\r\n        <li><strong>Create</strong> — add a new employee row to the database.</li>\r\n        <li><strong>Read</strong> — search and list employees (by ID, name, email).</li>\r\n        <li><strong>Update</strong> — edit fields for a selected employee.</li>\r\n        <li><strong>Delete</strong> — remove an employee (guarded by FK; fails if attendance exists).</li>\r\n      </ul>\r\n\r\n      <h3>What you'll get</h3>\r\n      <ul>\r\n        <li><strong>Attendance</strong> page (as you have).</li>\r\n        <li><strong>Employees (CRUD)</strong> page with Create · Search/List · Edit · Delete.</li>\r\n      </ul>\r\n\r\n      <h3>How to apply</h3>\r\n      <ol>\r\n        <li><strong>Replace</strong> your current <code class=\"inline\">app.py</code> with the code below.</li>\r\n        <li>Keep your existing <strong>secrets</strong> (Neon URL & simple auth) exactly as set earlier.</li>\r\n        <li>Run locally or push to GitHub → Streamlit Cloud redeploys, or click <em>Rerun</em> in the app.</li>\r\n      </ol>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- THE APP CODE -->\r\n  <section class=\"section-card\" id=\"code\">\r\n    <div class=\"banner\">\r\n      <small>Copy & Run</small>\r\n      <h1>Updated <code class=\"inline\">app.py</code> (Secured + Employees CRUD + Attendance)</h1>\r\n      <p>Safe, parameterized SQL • Minimal UX • Reuses your existing schema</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre>import streamlit as st\r\nfrom sqlalchemy import text\r\nimport hashlib, hmac\r\nfrom datetime import date, datetime\r\n\r\n# -------------------- App & Security --------------------\r\nst.set_page_config(page_title=\"Neon + Streamlit • Employees & Attendance\", page_icon=\"🗄️\", layout=\"centered\")\r\n\r\ndef _sha256(s: str) -> str:\r\n    return hashlib.sha256(s.encode(\"utf-8\")).hexdigest()\r\n\r\ndef _get_query_param(name: str):\r\n    try:\r\n        qp = st.query_params\r\n        val = qp.get(name, None)\r\n        if isinstance(val, list):\r\n            return val[0] if val else None\r\n        return val\r\n    except Exception:\r\n        val = st.experimental_get_query_params().get(name, [None])\r\n        return val[0] if isinstance(val, list) else val\r\n\r\ndef require_login() -> bool:\r\n    if st.session_state.get(\"_authed\"):\r\n        with st.sidebar:\r\n            st.success(f\"Signed in ({st.session_state.get('_method','')})\")\r\n            if st.button(\"Sign out\", use_container_width=True):\r\n                st.session_state.clear()\r\n                st.rerun()\r\n        return True\r\n\r\n    secrets_auth = st.secrets.get(\"auth\", {})\r\n    # URL token (magic link): ?token=XXXX\r\n    token = _get_query_param(\"token\")\r\n    allowed_tokens = set()\r\n    if \"tokens\" in secrets_auth:\r\n        allowed_tokens = {str(x) for x in secrets_auth[\"tokens\"]}\r\n    elif \"token\" in secrets_auth:\r\n        allowed_tokens = {str(secrets_auth[\"token\"])}\r\n\r\n    if token and token in allowed_tokens:\r\n        st.session_state[\"_authed\"] = True\r\n        st.session_state[\"_method\"] = \"token\"\r\n        st.rerun()\r\n\r\n    with st.sidebar:\r\n        st.markdown(\"### Sign in\")\r\n        pw_input = st.text_input(\"Access password\", type=\"password\")\r\n        if st.button(\"Sign in\", use_container_width=True):\r\n            ok = False\r\n            if \"password_sha256\" in secrets_auth:\r\n                ok = hmac.compare_digest(_sha256(pw_input), secrets_auth[\"password_sha256\"])\r\n            elif \"password\" in secrets_auth:\r\n                ok = hmac.compare_digest(pw_input, secrets_auth[\"password\"])\r\n            if ok:\r\n                st.session_state[\"_authed\"] = True\r\n                st.session_state[\"_method\"] = \"password\"\r\n                st.toast(\"Signed in\")\r\n                st.rerun()\r\n            else:\r\n                st.error(\"Invalid password\")\r\n    st.info(\"Enter the access password to continue.\")\r\n    return False\r\n\r\nif not require_login():\r\n    st.stop()\r\n\r\nst.title(\"Employees + Attendance\")\r\nst.caption(\"Neon (Postgres) backend • Streamlit frontend\")\r\n\r\n# -------------------- DB Connection --------------------\r\n# Requires: .streamlit/secrets.toml with [connections.neon].url\r\nconn = st.connection(\"neon\", type=\"sql\")\r\n\r\n# Ensure ONLY the attendance table exists (we assume app.employees already exists)\r\nwith conn.session as s:\r\n    s.execute(text(\"\"\"\r\n        CREATE TABLE IF NOT EXISTS app.attendance_log (\r\n            log_id BIGSERIAL PRIMARY KEY,\r\n            employee_id TEXT NOT NULL REFERENCES app.employees(employee_id)\r\n                ON UPDATE CASCADE ON DELETE RESTRICT,\r\n            date DATE NOT NULL,\r\n            check_in_time TIMESTAMPTZ,\r\n            check_out_time TIMESTAMPTZ,\r\n            status TEXT,\r\n            notes TEXT,\r\n            CONSTRAINT attendance_unique_per_day UNIQUE (employee_id, date)\r\n        )\r\n    \"\"\"))\r\n    s.execute(text(\"\"\"\r\n        CREATE INDEX IF NOT EXISTS idx_attendance_employee_date\r\n        ON app.attendance_log (employee_id, date)\r\n    \"\"\"))\r\n    s.commit()\r\n\r\n# -------------------- Page Navigation --------------------\r\nwith st.sidebar:\r\n    page = st.radio(\"Pages\", [\"Attendance\", \"Employees (CRUD)\"], index=0)\r\n\r\n# -------------------- Employees: helpers --------------------\r\ndef list_employees(search: str | None):\r\n    q = \"\"\"\r\n        SELECT employee_id, first_name, last_name, email, department, job_title,\r\n               status, hire_date, created_at\r\n        FROM app.employees\r\n        {where}\r\n        ORDER BY created_at DESC\r\n        LIMIT 500\r\n    \"\"\"\r\n    if search:\r\n        like = f\"%{search.strip()}%\"\r\n        return conn.query(\r\n            q.format(where=\"WHERE employee_id ILIKE :q OR first_name ILIKE :q OR last_name ILIKE :q OR email ILIKE :q\"),\r\n            params={\"q\": like}, ttl=\"10s\"\r\n        )\r\n    else:\r\n        return conn.query(q.format(where=\"\"), ttl=\"10s\")\r\n\r\ndef get_employee(eid: str):\r\n    df = conn.query(\"\"\"\r\n        SELECT employee_id, first_name, last_name, email, department, job_title,\r\n               status, hire_date\r\n        FROM app.employees\r\n        WHERE employee_id = :eid\r\n        LIMIT 1\r\n    \"\"\", params={\"eid\": eid}, ttl=0)\r\n    return None if df.empty else df.iloc[0].to_dict()\r\n\r\ndef insert_employee(payload: dict):\r\n    with conn.session as s:\r\n        s.execute(text(\"\"\"\r\n            INSERT INTO app.employees (employee_id, first_name, last_name, email,\r\n                                       department, job_title, status, hire_date)\r\n            VALUES (:employee_id, :first_name, :last_name, :email,\r\n                    :department, :job_title, :status, :hire_date)\r\n        \"\"\"), payload)\r\n        s.commit()\r\n\r\ndef update_employee(eid: str, payload: dict):\r\n    with conn.session as s:\r\n        s.execute(text(\"\"\"\r\n            UPDATE app.employees\r\n               SET first_name = :first_name,\r\n                   last_name  = :last_name,\r\n                   email      = :email,\r\n                   department = :department,\r\n                   job_title  = :job_title,\r\n                   status     = :status,\r\n                   hire_date  = :hire_date\r\n             WHERE employee_id = :employee_id\r\n        \"\"\"), {**payload, \"employee_id\": eid})\r\n        s.commit()\r\n\r\ndef delete_employee(eid: str):\r\n    with conn.session as s:\r\n        s.execute(text(\"DELETE FROM app.employees WHERE employee_id = :eid\"), {\"eid\": eid})\r\n        s.commit()\r\n\r\ndef _to_date(val):\r\n    if isinstance(val, date):\r\n        return val\r\n    if isinstance(val, datetime):\r\n        return val.date()\r\n    if isinstance(val, str):\r\n        try:\r\n            return date.fromisoformat(val)\r\n        except Exception:\r\n            return date.today()\r\n    return date.today()\r\n\r\n# -------------------- Attendance Page --------------------\r\nif page == \"Attendance\":\r\n    # Load employees to drive attendance UI\r\n    employees_df = conn.query(\"\"\"\r\n        SELECT employee_id, first_name, last_name\r\n        FROM app.employees\r\n        ORDER BY first_name, last_name\r\n    \"\"\", ttl=\"2m\")\r\n\r\n    st.subheader(\"Attendance (Today)\")\r\n    if employees_df.empty:\r\n        st.info(\"No employees found. Add employees first, then return to this page.\")\r\n    else:\r\n        options = employees_df.apply(\r\n            lambda r: f\"{r['first_name']} {r['last_name']} ({r['employee_id']})\", axis=1\r\n        ).tolist()\r\n        choice = st.selectbox(\"Select employee\", options)\r\n        eid = employees_df.iloc[options.index(choice)][\"employee_id\"]\r\n\r\n        c1, c2, c3, c4 = st.columns(4)\r\n\r\n        with c1:\r\n            if st.button(\"Check In\", use_container_width=True):\r\n                try:\r\n                    with conn.session as s:\r\n                        s.execute(text(\"\"\"\r\n                            INSERT INTO app.attendance_log (employee_id, date, check_in_time, status)\r\n                            VALUES (:eid, CURRENT_DATE, now(), 'Present')\r\n                            ON CONFLICT (employee_id, date)\r\n                            DO UPDATE SET check_in_time = COALESCE(app.attendance_log.check_in_time, EXCLUDED.check_in_time)\r\n                        \"\"\"), {\"eid\": eid})\r\n                        s.commit()\r\n                    st.success(f\"{eid} checked in.\")\r\n                except Exception as e:\r\n                    st.error(f\"Check-in failed: {e}\")\r\n\r\n        with c2:\r\n            if st.button(\"Check Out\", use_container_width=True):\r\n                try:\r\n                    with conn.session as s:\r\n                        res = s.execute(text(\"\"\"\r\n                            UPDATE app.attendance_log\r\n                               SET check_out_time = now()\r\n                             WHERE employee_id = :eid\r\n                               AND date = CURRENT_DATE\r\n                               AND check_out_time IS NULL\r\n                        \"\"\"), {\"eid\": eid})\r\n                        s.commit()\r\n                    st.success(f\"{eid} checked out.\") if res.rowcount else st.warning(\"No open check-in for today.\")\r\n                except Exception as e:\r\n                    st.error(f\"Check-out failed: {e}\")\r\n\r\n        with c3:\r\n            status_note = st.text_input(\"Optional status/notes (e.g., Sick, Leave)\")\r\n            if st.button(\"Set Status/Note\", use_container_width=True):\r\n                try:\r\n                    with conn.session as s:\r\n                        s.execute(text(\"\"\"\r\n                            INSERT INTO app.attendance_log (employee_id, date)\r\n                            VALUES (:eid, CURRENT_DATE)\r\n                            ON CONFLICT (employee_id, date) DO NOTHING\r\n                        \"\"\"), {\"eid\": eid})\r\n                        s.execute(text(\"\"\"\r\n                            UPDATE app.attendance_log\r\n                               SET status = :st, notes = :nt\r\n                             WHERE employee_id = :eid AND date = CURRENT_DATE\r\n                        \"\"\"), {\"st\": status_note or None, \"nt\": status_note or None, \"eid\": eid})\r\n                        s.commit()\r\n                    st.success(\"Status/notes updated.\")\r\n                except Exception as e:\r\n                    st.error(f\"Update failed: {e}\")\r\n\r\n        with c4:\r\n            if st.button(\"Delete today's row\", use_container_width=True):\r\n                try:\r\n                    with conn.session as s:\r\n                        res = s.execute(text(\"\"\"\r\n                            DELETE FROM app.attendance_log\r\n                             WHERE employee_id = :eid AND date = CURRENT_DATE\r\n                        \"\"\"), {\"eid\": eid})\r\n                        s.commit()\r\n                    st.success(\"Deleted.\") if res.rowcount else st.info(\"No row to delete.\")\r\n                except Exception as e:\r\n                    st.error(f\"Delete failed: {e}\")\r\n\r\n    st.subheader(\"Today's attendance\")\r\n    today_df = conn.query(\"\"\"\r\n        SELECT\r\n          al.date,\r\n          e.employee_id,\r\n          e.first_name,\r\n          e.last_name,\r\n          al.check_in_time,\r\n          al.check_out_time,\r\n          al.status,\r\n          al.notes\r\n        FROM app.attendance_log al\r\n        JOIN app.employees e ON e.employee_id = al.employee_id\r\n        WHERE al.date = CURRENT_DATE\r\n        ORDER BY e.first_name, e.last_name\r\n    \"\"\", ttl=\"30s\")\r\n    st.dataframe(today_df, use_container_width=True)\r\n\r\n    st.subheader(\"Recent attendance (last 30 days)\")\r\n    recent_df = conn.query(\"\"\"\r\n        SELECT\r\n          al.date,\r\n          e.employee_id,\r\n          e.first_name,\r\n          e.last_name,\r\n          al.check_in_time,\r\n          al.check_out_time,\r\n          al.status\r\n        FROM app.attendance_log al\r\n        JOIN app.employees e ON e.employee_id = al.employee_id\r\n        WHERE al.date >= CURRENT_DATE - INTERVAL '30 days'\r\n        ORDER BY al.date DESC, e.first_name, e.last_name\r\n    \"\"\", ttl=\"2m\")\r\n    st.dataframe(recent_df, use_container_width=True)\r\n\r\n    st.caption(\"DB server time:\")\r\n    st.write(conn.query(\"SELECT now() AS server_time;\").iloc[0][\"server_time\"])\r\n\r\n# -------------------- Employees (CRUD) Page --------------------\r\nelse:\r\n    st.subheader(\"Employees (CRUD)\")\r\n\r\n    # -------- Create --------\r\n    with st.expander(\"➕ Create new employee\", expanded=False):\r\n        with st.form(\"create_emp\"):\r\n            col1, col2 = st.columns(2)\r\n            employee_id = col1.text_input(\"Employee ID\", placeholder=\"E1003\")\r\n            first_name  = col1.text_input(\"First name\")\r\n            last_name   = col2.text_input(\"Last name\")\r\n            email       = col2.text_input(\"Email (optional)\")\r\n            department  = col1.text_input(\"Department (optional)\")\r\n            job_title   = col2.text_input(\"Job title (optional)\")\r\n            status      = st.selectbox(\"Status\", [\"active\", \"inactive\"], index=0)\r\n            hire_dt     = st.date_input(\"Hire date\", value=date.today())\r\n            submit_new  = st.form_submit_button(\"Create employee\", use_container_width=True)\r\n\r\n            if submit_new:\r\n                if not (employee_id and first_name and last_name):\r\n                    st.error(\"Employee ID, First name, and Last name are required.\")\r\n                else:\r\n                    try:\r\n                        payload = dict(\r\n                            employee_id=employee_id,\r\n                            first_name=first_name,\r\n                            last_name=last_name,\r\n                            email=email or None,\r\n                            department=department or None,\r\n                            job_title=job_title or None,\r\n                            status=status,\r\n                            hire_date=hire_dt.isoformat()\r\n                        )\r\n                        insert_employee(payload)\r\n                        st.success(f\"Created {employee_id}\")\r\n                    except Exception as e:\r\n                        st.error(f\"Create failed: {e}\")\r\n\r\n    # -------- Read (search & list) --------\r\n    st.markdown(\"#### Search employees\")\r\n    q = st.text_input(\"Search by ID, name, or email\", placeholder=\"e.g., E1001 or Mary or mary@example.com\")\r\n    emp_list_df = list_employees(q)\r\n    st.dataframe(emp_list_df, use_container_width=True, height=300)\r\n\r\n    # -------- Update/Delete --------\r\n    st.markdown(\"#### Edit / Delete\")\r\n    if emp_list_df.empty:\r\n        st.info(\"No employees to edit. Adjust search or create a new employee above.\")\r\n    else:\r\n        opts = [f\"{r.employee_id} — {r.first_name} {r.last_name}\" for r in emp_list_df.itertuples(index=False)]\r\n        select = st.selectbox(\"Select employee to edit\", opts)\r\n        selected_id = select.split(\" — \", 1)[0]\r\n\r\n        rec = get_employee(selected_id)\r\n        if not rec:\r\n            st.warning(\"Selected employee not found. Refresh list.\")\r\n        else:\r\n            with st.form(\"edit_emp\"):\r\n                c1, c2 = st.columns(2)\r\n                first_name = c1.text_input(\"First name\", value=rec[\"first_name\"])\r\n                last_name  = c2.text_input(\"Last name\",  value=rec[\"last_name\"])\r\n                email      = c2.text_input(\"Email (optional)\", value=rec.get(\"email\") or \"\")\r\n                department = c1.text_input(\"Department (optional)\", value=rec.get(\"department\") or \"\")\r\n                job_title  = c2.text_input(\"Job title (optional)\", value=rec.get(\"job_title\") or \"\")\r\n                status     = st.selectbox(\"Status\", [\"active\", \"inactive\"], index=0 if rec[\"status\"]==\"active\" else 1)\r\n                hire_dt    = st.date_input(\"Hire date\", value=_to_date(rec.get(\"hire_date\")))\r\n                colu, cold = st.columns(2)\r\n                update_btn = colu.form_submit_button(\"💾 Update\", use_container_width=True)\r\n                delete_btn = cold.form_submit_button(\"🗑️ Delete\", use_container_width=True)\r\n\r\n                if update_btn:\r\n                    try:\r\n                        payload = dict(\r\n                            first_name=first_name,\r\n                            last_name=last_name,\r\n                            email=email or None,\r\n                            department=department or None,\r\n                            job_title=job_title or None,\r\n                            status=status,\r\n                            hire_date=hire_dt.isoformat()\r\n                        )\r\n                        update_employee(selected_id, payload)\r\n                        st.success(\"Updated successfully.\")\r\n                    except Exception as e:\r\n                        st.error(f\"Update failed: {e}\")\r\n\r\n                if delete_btn:\r\n                    st.warning(\"You are about to delete this employee. This will fail if attendance rows exist.\", icon=\"⚠️\")\r\n                    if st.checkbox(\"Yes, delete this employee permanently\"):\r\n                        try:\r\n                            delete_employee(selected_id)\r\n                            st.success(\"Deleted.\")\r\n                        except Exception as e:\r\n                            st.error(f\"Delete failed: {e}\")</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- HOW TO USE -->\r\n  <section class=\"section-card\" id=\"howto\">\r\n    <div class=\"banner\">\r\n      <small>Run it</small>\r\n      <h1>How to use the CRUD</h1>\r\n      <p>One place to manage employees safely</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li>Open <strong>Employees (CRUD)</strong> from the sidebar.</li>\r\n        <li><strong>Create</strong>: expand \"➕ Create new employee\", fill the form, click <em>Create employee</em>.</li>\r\n        <li><strong>Read</strong>: use the search box (ID, name, email). Results appear in a table.</li>\r\n        <li><strong>Update</strong>: pick a row under \"Edit / Delete\", modify fields, click <em>Update</em>.</li>\r\n        <li><strong>Delete</strong>: choose the employee → <em>Delete</em> → confirm checkbox → delete.\r\n          <br/><em>Note:</em> If the employee has attendance rows, the DB will <strong>reject</strong> the delete (<code class=\"inline\">ON DELETE RESTRICT</code>) — this protects your data.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- NOTES -->\r\n  <section class=\"section-card\" id=\"notes\">\r\n    <div class=\"banner\">\r\n      <small>Notes</small>\r\n      <h1>Implementation details</h1>\r\n      <p>Safe SQL • No schema duplication • Easy to extend</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li>All writes use <strong>parameterized SQL</strong> within transactions.</li>\r\n        <li>We <strong>do not</strong> recreate <code class=\"inline\">app.employees</code>; we only ensure <code class=\"inline\">app.attendance_log</code> exists.</li>\r\n        <li>Extend the pattern for new tables: add simple helpers (<em>list/get/insert/update/delete</em>) and forms.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(undefined, {year:'numeric', month:'short', day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "a23f75e0-7767-48b0-ab8c-360014242420"
        }
      ]
    },
    {
      "order": 6,
      "title": "Module 6: Data Visualization & Real‑Time",
      "lessons": [
        {
          "kind": "article",
          "order": 1,
          "title": "Introduction",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Module • Data Visualization & Real‑Time (Data‑Driven)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Grids (horizontal boxes) === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n/* Inline code chip — requested color */\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>New Module</small>\r\n      <h1>Data Visualization — Data‑Driven & Real‑Time</h1>\r\n      <p>Move beyond tables: dynamic charts, live KPIs, and interactive insights</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        After you’ve learned to <strong>build UI</strong> and <strong>deploy your app</strong>, it’s time to make your data\r\n        <em>come alive</em>. This module introduces data‑driven visualization and real‑time techniques so you can explore,\r\n        monitor, and explain your datasets with clarity — not just rows and columns.\r\n      </p>\r\n\r\n      <div class=\"grid\" style=\"margin-top:12px;\">\r\n        <div class=\"box\">\r\n          <h3>Why visualizations?</h3>\r\n          <ul>\r\n            <li>See patterns, trends, and anomalies quickly.</li>\r\n            <li>Tell compelling, decision‑ready stories.</li>\r\n            <li>Support ops with live KPIs and alerts.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>What you’ll build</h3>\r\n          <ul>\r\n            <li>Interactive dashboards (time series, bars, scatter).</li>\r\n            <li>Live charts that auto‑refresh from your database.</li>\r\n            <li>Cross‑filters and lightweight drill‑downs.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Where it fits</h3>\r\n          <ul>\r\n            <li>After deployment & basic UI are in place.</li>\r\n            <li>When stakeholders need <em>up‑to‑date</em> views.</li>\r\n            <li>When tables aren’t enough for insight.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- TOOLING LANDSCAPE -->\r\n  <section class=\"section-card\" id=\"tools\">\r\n    <div class=\"banner\">\r\n      <small>Choices</small>\r\n      <h1>Visualization Options (Pick the Right Tool)</h1>\r\n      <p>From Streamlit built‑ins to D3.js — trade‑offs and use‑cases</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Streamlit (built‑ins)</h3>\r\n          <ul>\r\n            <li><code class=\"inline\">st.line_chart</code>, <code class=\"inline\">st.area_chart</code>, <code class=\"inline\">st.bar_chart</code>.</li>\r\n            <li>Fastest path for internal dashboards.</li>\r\n            <li>Great for time series & KPIs with minimal code.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Altair / Vega‑Lite</h3>\r\n          <ul>\r\n            <li>Declarative charts, interactions, linked selections.</li>\r\n            <li>Readable JSON grammar; integrates in Streamlit.</li>\r\n            <li>Balanced power/complexity for analytics apps.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Plotly</h3>\r\n          <ul>\r\n            <li>Rich interactivity (hover, zoom, facets).</li>\r\n            <li>Good for exploratory dashboards and notebooks.</li>\r\n            <li>Streamlit support via <code class=\"inline\">st.plotly_chart</code>.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>D3.js (Data‑Driven Documents)</h3>\r\n          <ul>\r\n            <li>Web‑native, bespoke visuals (fine control).</li>\r\n            <li>Higher effort; best for product‑grade UI.</li>\r\n            <li>Great for custom interactions/animations.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:12px;\">\r\n        Start with Streamlit’s built‑ins for speed. Reach for Altair/Plotly when you need richer interactions. Use D3.js when you\r\n        need complete control in a web app (e.g., custom charts embedded in a product).\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- REAL-TIME PATTERNS -->\r\n  <section class=\"section-card\" id=\"realtime\">\r\n    <div class=\"banner\">\r\n      <small>Live Data</small>\r\n      <h1>Real‑Time Patterns</h1>\r\n      <p>Make graphs update as your data changes</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>1) Smart Polling</h3>\r\n          <ul>\r\n            <li>Periodic queries with caching (e.g., <code class=\"inline\">ttl</code> on DB calls).</li>\r\n            <li>Filter by time window or <code class=\"inline\">updated_at</code> to fetch only changes.</li>\r\n            <li>Simple, reliable — ideal for Streamlit.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>2) Push (WebSockets)</h3>\r\n          <ul>\r\n            <li>Server pushes new points to clients instantly.</li>\r\n            <li>Requires a small backend (e.g., FastAPI + <code class=\"inline\">websockets</code>).</li>\r\n            <li>Best for high‑frequency telemetry.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>3) DB Notifications</h3>\r\n          <ul>\r\n            <li>Database triggers & NOTIFY/LISTEN to signal updates.</li>\r\n            <li>Use a worker to relay events to your app.</li>\r\n            <li>Great for event‑driven pipelines.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:12px;\">\r\n        For Streamlit, start with <strong>smart polling</strong>. It’s one line to add a cache TTL and friendly on pooled DB connections.\r\n        Upgrade to push when you need sub‑second reactions.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- QUICK START SNIPPET -->\r\n  <section class=\"section-card\" id=\"quickstart\">\r\n    <div class=\"banner\">\r\n      <small>Quick Start</small>\r\n      <h1>Hello, Live Chart (Streamlit + SQL Connection)</h1>\r\n      <p>Minimal code to plot a 7‑day time series with auto‑refresh</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p><strong>Prereqs:</strong> you already have <code class=\"inline\">[connections.neon].url</code> in <code class=\"inline\">.streamlit/secrets.toml</code>.</p>\r\n<pre>import streamlit as st\r\n\r\nst.set_page_config(page_title=\"Live KPI\", page_icon=\"📈\", layout=\"centered\")\r\nst.title(\"📈 Live KPI — Attendance (last 7 days)\")\r\n\r\nconn = st.connection(\"neon\", type=\"sql\")\r\n\r\n# Auto-refresh every 15s via query TTL (smart polling)\r\ndf = conn.query(\r\n    \"\"\"\r\n    SELECT date AS day, COUNT(*) AS checkins\r\n    FROM app.attendance_log\r\n    WHERE date >= CURRENT_DATE - INTERVAL '7 days'\r\n    GROUP BY day\r\n    ORDER BY day\r\n    \"\"\",\r\n    ttl=\"15s\"\r\n)\r\n\r\nst.line_chart(df.set_index(\"day\")[\"checkins\"])</pre>\r\n      <p>This pattern scales to many charts: keep each query focused and cached, and prefer small windows (e.g., 7–30 days)\r\n         for fast render and a responsive feel.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- UX & PERFORMANCE -->\r\n  <section class=\"section-card\" id=\"ux\">\r\n    <div class=\"banner\">\r\n      <small>Guidelines</small>\r\n      <h1>UX & Performance Tips</h1>\r\n      <p>Keep visuals fast, legible, and decision‑ready</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>Window and downsample:</strong> show recent data; use daily/weekly resampling for long horizons.</li>\r\n        <li><strong>Cache wisely:</strong> add <code class=\"inline\">ttl</code> to DB queries (e.g., 15–60s) to reduce load and jitter.</li>\r\n        <li><strong>Readable axes & units:</strong> date formats, thousands separators, consistent colors/labels.</li>\r\n        <li><strong>Link filters:</strong> time range + metric selector for self‑serve exploration.</li>\r\n        <li><strong>Non‑blocking updates:</strong> avoid tight loops; let Streamlit rerun on interaction and cache in between.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHAT'S NEXT -->\r\n  <section class=\"section-card\" id=\"next\">\r\n    <div class=\"banner\">\r\n      <small>Next</small>\r\n      <h1>Where we go from here</h1>\r\n      <p>From MVP charts to interactive, real‑time dashboards</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li>Add metric pickers and date filters (sidebar).</li>\r\n        <li>Build a multi‑chart dashboard with shared range controls.</li>\r\n        <li>Introduce alerts (e.g., threshold breaches) and badges.</li>\r\n        <li>Consider a push channel (WebSockets) for high‑frequency feeds.</li>\r\n        <li>For production UI, evaluate a D3.js front‑end for custom visual stories.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "4d057535-ef6d-402c-88d3-66c312a0a730"
        },
        {
          "kind": "article",
          "order": 2,
          "title": "D3.js Visual Gallery",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Module • D3.js Visual Gallery (Time‑Series, Maps, Hierarchies)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg, iframe { max-width: 100%; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Grid (horizontal info boxes) === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Figure (full-width demo) === */\r\n.figure { margin: 10px 0 0; }\r\n.figure .caption { font-size: 14px; color: #6b6b6b; margin-top: 8px; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n/* Inline code chip — your requested color */\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>D3.js • Gallery</small>\r\n      <h1>Most‑Used D3 Visuals for Real‑World Data</h1>\r\n      <p>Pick the right pattern for time‑series, maps, hierarchies, and dense temporal data</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        D3.js (Data‑Driven Documents) gives you low‑level control to draw exactly the chart you need in the browser.\r\n        Below are hand‑picked, working examples (via Observable) you can embed directly with an <code class=\"inline\"><iframe></code>.\r\n        Each demo notes when to use it and what questions it answers.\r\n      </p>\r\n      <div class=\"grid\" style=\"margin-top:12px;\">\r\n        <div class=\"box\">\r\n          <h3>When to use D3?</h3>\r\n          <ul>\r\n            <li>You need bespoke interactions or complex layouts.</li>\r\n            <li>Built‑ins (Streamlit charts) aren’t expressive enough.</li>\r\n            <li>You want production‑grade, branded visuals.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Embed approach</h3>\r\n          <ul>\r\n            <li>Fastest path: Observable <code class=\"inline\"><iframe></code> embeds.</li>\r\n            <li>Advanced: host your own JS bundle and mount in app.</li>\r\n            <li>Streamlit: serve via <code class=\"inline\">components.v1.iframe</code> or <code class=\"inline\">st.html</code> (if available).</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Design tips</h3>\r\n          <ul>\r\n            <li>Limit series per view; prefer filters.</li>\r\n            <li>Use clear units and legends.</li>\r\n            <li>Make time windows adjustable.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- LIVE GALLERY -->\r\n  <section class=\"section-card\" id=\"gallery\">\r\n    <div class=\"banner\">\r\n      <small>Examples</small>\r\n      <h1>Interactive D3 Examples (Embeds)</h1>\r\n      <p>Each embed is live — scroll and interact</p>\r\n    </div>\r\n    <div class=\"body\">\r\n\r\n      <!-- 1. Bar chart race -->\r\n      <div class=\"figure\">\r\n        <h3 style=\"margin:0 0 8px;\">1) Bar Chart Race — changing totals over time (categories)</h3>\r\n        <p class=\"caption\">Use when you have a time‑series of category totals (e.g., product sales share by month) and you want to emphasize <em>rank changes</em> over time.</p>\r\n        <iframe width=\"100%\" height=\"682\" frameborder=\"0\" loading=\"lazy\"\r\n          src=\"https://observablehq.com/embed/@d3/bar-chart-race?cells=chart\"></iframe>\r\n      </div>\r\n\r\n      <!-- 2. World tour -->\r\n      <div class=\"figure\">\r\n        <h3 style=\"margin:18px 0 8px;\">2) World Tour — step through locations globally</h3>\r\n        <p class=\"caption\">Ideal for sequences of geolocated events (e.g., shipments, sensor deployments) where you want to tour locations one by one.</p>\r\n        <iframe width=\"100%\" height=\"796\" frameborder=\"0\" loading=\"lazy\"\r\n          src=\"https://observablehq.com/embed/@d3/world-tour?cells=canvas\"></iframe>\r\n      </div>\r\n\r\n      <!-- 3. Seamless map zoom -->\r\n      <div class=\"figure\">\r\n        <h3 style=\"margin:18px 0 8px;\">3) Seamless Zoomable Map (Tiles)</h3>\r\n        <p class=\"caption\">Use when you need smooth pan/zoom map navigation and plan to overlay custom data later (markers, heatmaps).</p>\r\n        <iframe width=\"100%\" height=\"684\" frameborder=\"0\" loading=\"lazy\"\r\n          src=\"https://observablehq.com/embed/@d3/seamless-zoomable-map-tiles?cells=map\"></iframe>\r\n      </div>\r\n\r\n      <!-- 4. Hierarchical edge bundling -->\r\n      <div class=\"figure\">\r\n        <h3 style=\"margin:18px 0 8px;\">4) Hierarchical Edge Bundling — workflows & methodologies</h3>\r\n        <p class=\"caption\">Great for showing relationships across a hierarchy (e.g., teams, pipelines, modules) without creating a hairball of lines.</p>\r\n        <iframe width=\"100%\" height=\"1038\" frameborder=\"0\" loading=\"lazy\"\r\n          src=\"https://observablehq.com/embed/@d3/hierarchical-edge-bundling/2@latest?cells=chart\"></iframe>\r\n      </div>\r\n\r\n      <!-- 5. Calendar heatmap -->\r\n      <div class=\"figure\">\r\n        <h3 style=\"margin:18px 0 8px;\">5) Calendar Heatmap — daily values across a year</h3>\r\n        <p class=\"caption\">Perfect for daily metrics like commits, energy usage, sales, or attendance — quickly spot seasonality and streaks.</p>\r\n        <iframe width=\"100%\" height=\"2436\" frameborder=\"0\" loading=\"lazy\"\r\n          src=\"https://observablehq.com/embed/@d3/calendar/2?cells=chart\"></iframe>\r\n      </div>\r\n\r\n      <!-- 6. Hourly monitoring -->\r\n      <div class=\"figure\">\r\n        <h3 style=\"margin:18px 0 8px;\">6) Hourly Monitoring — dense intraday time‑series</h3>\r\n        <p class=\"caption\">For high‑resolution telemetry (e.g., electricity usage, sensors). Shows daily/weekly rhythms and anomalies.</p>\r\n        <iframe width=\"100%\" height=\"4576\" frameborder=\"0\" loading=\"lazy\"\r\n          src=\"https://observablehq.com/embed/@mbostock/electric-usage-2019?cells=chart\"></iframe>\r\n      </div>\r\n\r\n      <!-- 7. Candlestick -->\r\n      <div class=\"figure\">\r\n        <h3 style=\"margin:18px 0 8px;\">7) Candlestick — revenue/expense or price‑like series</h3>\r\n        <p class=\"caption\">Good when you have open/high/low/close style aggregates (financials, bid/ask ranges, or summarized operational metrics).</p>\r\n        <iframe width=\"100%\" height=\"829\" frameborder=\"0\" loading=\"lazy\"\r\n          src=\"https://observablehq.com/embed/@d3/candlestick-chart/2?cells=chart\"></iframe>\r\n      </div>\r\n\r\n      <!-- 8. Multi‑line -->\r\n      <div class=\"figure\">\r\n        <h3 style=\"margin:18px 0 8px;\">8) Multi‑Line — compare several items over time</h3>\r\n        <p class=\"caption\">Use when multiple related series need to be compared (e.g., KPIs by product/region). Consider small multiples if lines overlap too much.</p>\r\n        <iframe width=\"100%\" height=\"684\" frameborder=\"0\" loading=\"lazy\"\r\n          src=\"https://observablehq.com/embed/@d3/multi-line-chart/2?cells=chart\"></iframe>\r\n      </div>\r\n\r\n      <!-- Optional: copy-paste embed tip -->\r\n      <div class=\"box\" style=\"margin-top:18px;\">\r\n        <h3>Copy/paste embed tip</h3>\r\n        <p>Use an <code class=\"inline\"><iframe></code> in your page or a Streamlit HTML component. Example:</p>\r\n<pre><iframe width=\"100%\" height=\"682\" frameborder=\"0\"\r\n  src=\"https://observablehq.com/embed/@d3/bar-chart-race?cells=chart\"></iframe></pre>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "1b45a892-abf1-4f15-a2f4-a38a4bcfd4a1"
        },
        {
          "kind": "article",
          "order": 3,
          "title": "Data‑Driven Calendar • Bank Visits",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Data‑Driven Calendar • Bank Visits (Red→White→Green)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Grid boxes (horizontal info) === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; margin-top: 10px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Visualization • Calendar Heatmap</small>\r\n      <h1>Daily Bank Visits (1 Year) — Red→White→Green Calendar</h1>\r\n      <p>See low (red) to high (green) traffic by day, laid out like real monthly calendars</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        This example builds a <strong>data‑driven calendar heatmap</strong> for a full year of daily customer visits.\r\n        Each month appears as a classic <em>Sun→Sat</em> calendar grid; color encodes visit volume using a\r\n        <strong>Red → White → Green</strong> gradient (low → median → high). You can tweak the <em>white pivot percentile</em>,\r\n        cell size, labels, and borders from the sidebar.\r\n      </p>\r\n\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Data (CSV)</h3>\r\n          <p>Place a CSV at <code class=\"inline\">/workspaces/learningexamples/bank_visits_2024.csv</code> (or update in the sidebar).</p>\r\n          <p><strong>Columns (case‑insensitive):</strong></p>\r\n          <ul>\r\n            <li><code class=\"inline\">date</code> — e.g., <code class=\"inline\">2024-03-15</code></li>\r\n            <li>visits — any of: <code class=\"inline\">total_visit</code>, <code class=\"inline\">total_visits</code>, <code class=\"inline\">visits</code>, <code class=\"inline\">visit</code>, <code class=\"inline\">count</code>, <code class=\"inline\">value</code></li>\r\n          </ul>\r\n          <p><a href=\"https://github.com/AIforimpact22/learningexamples/blob/main/bank_visits_2024.csv\" target=\"_blank\" rel=\"noopener\">View example CSV on GitHub</a></p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Run (Codespaces or local)</h3>\r\n          <pre>pip install streamlit altair pandas numpy\r\nstreamlit run app.py</pre>\r\n          <p>Then open the app URL shown in the terminal.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>What you’ll see</h3>\r\n          <p>12 faceted calendars (3×4). Hover any day for exact value and date. Grey cells belong to adjacent months.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- PREVIEW IMAGE -->\r\n  <section class=\"section-card\" id=\"preview\">\r\n    <div class=\"banner\">\r\n      <small>Preview</small>\r\n      <h1>Expected Outcome</h1>\r\n      <p>Monthly calendar heatmaps with tooltips & legend</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <img src=\"https://i.imgur.com/jCEz4BK.png\" alt=\"Calendar heatmap preview of bank visits (red to green)\" />\r\n    </div>\r\n  </section>\r\n\r\n  <!-- APP CODE -->\r\n  <section class=\"section-card\" id=\"code\">\r\n    <div class=\"banner\">\r\n      <small>Copy & Run</small>\r\n      <h1>app.py — Monthly Calendar Heatmaps (Altair + Streamlit)</h1>\r\n      <p>Paste the code below into <code class=\"inline\">app.py</code> and run</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre># app.py\r\n# Monthly calendar heatmaps (each month separately) with a RED–WHITE–GREEN gradient.\r\n# Reads: /workspaces/learningexamples/bank_visits_2024.csv\r\n#\r\n# Expected columns (case-insensitive):\r\n#   - date (YYYY-MM-DD)\r\n#   - total_visit (or: total_visits, visits, visit, count, value)\r\n\r\nimport streamlit as st\r\nimport pandas as pd\r\nimport numpy as np\r\nimport altair as alt\r\n\r\nst.set_page_config(page_title=\"Bank Visits — Monthly Calendars\", layout=\"wide\")\r\nst.title(\"Bank Visits — Monthly Calendar Heatmaps\")\r\n\r\nDEFAULT_PATH = \"/workspaces/learningexamples/bank_visits_2024.csv\"\r\n\r\n# ---------------- Sidebar controls ----------------\r\nst.sidebar.header(\"Settings\")\r\ncsv_path = st.sidebar.text_input(\"CSV path\", DEFAULT_PATH)\r\npivot_pct = st.sidebar.slider(\r\n    \"White pivot (percentile)\", 0.0, 1.0, 0.50, 0.01,\r\n    help=\"Which percentile maps to white (default 0.50 = median).\"\r\n)\r\nmissing_color = st.sidebar.color_picker(\"Outside-month cell color\", \"#f0f0f0\")\r\ncell_border = st.sidebar.checkbox(\"Show cell borders\", value=True)\r\nmonth_label_style = st.sidebar.selectbox(\"Month label\", [\"Full (January)\", \"Short (Jan)\"], index=0)\r\n\r\n# Chart sizing (per month)\r\ncell_size = st.sidebar.slider(\"Cell size (px)\", 16, 36, 24)\r\ncalendar_width = 7 * cell_size + 30  # per-month chart width\r\ncalendar_height = 6 * cell_size + 20 # per-month chart height\r\n\r\n\r\n@st.cache_data\r\ndef load_data(path: str) -> pd.DataFrame:\r\n    df = pd.read_csv(path)\r\n    # tolerant column detection\r\n    cols = {c.lower().strip(): c for c in df.columns}\r\n    date_col = next((cols[c] for c in [\"date\", \"day\"] if c in cols), None)\r\n    val_col  = next((cols[c] for c in [\"total_visit\", \"total_visits\", \"visits\", \"visit\", \"count\", \"value\"] if c in cols), None)\r\n    if not date_col or not val_col:\r\n        raise ValueError(f\"CSV must have 'date' and a visits column (e.g., 'total_visit'). Found: {list(df.columns)}\")\r\n    df = df[[date_col, val_col]].rename(columns={date_col: \"date\", val_col: \"visits\"})\r\n    df[\"date\"] = pd.to_datetime(df[\"date\"], errors=\"coerce\")\r\n    df[\"visits\"] = pd.to_numeric(df[\"visits\"], errors=\"coerce\")\r\n    df = df.dropna(subset=[\"date\"]).sort_values(\"date\").reset_index(drop=True)\r\n    return df\r\n\r\n\r\ndef build_year_calendar(raw: pd.DataFrame, year: int) -> pd.DataFrame:\r\n    \"\"\"\r\n    Build a 6x7 grid for each month (like a wall calendar), aligned to Sunday-start weeks.\r\n    Returns one DataFrame with 12*42 rows (one row per cell).\r\n    \"\"\"\r\n    # Restrict to the selected year (for merging visits)\r\n    year_data = raw[(raw[\"date\"].dt.year == year)][[\"date\", \"visits\"]]\r\n\r\n    frames = []\r\n    for month in range(1, 13):\r\n        first = pd.Timestamp(year, month, 1)\r\n        last  = (first + pd.offsets.MonthEnd(1))\r\n        # Find the Sunday on or before the 1st\r\n        start_sun = first - pd.Timedelta(days=(first.weekday() + 1) % 7)\r\n        # 6 weeks x 7 days = 42 cells\r\n        grid_dates = pd.date_range(start_sun, periods=42, freq=\"D\")\r\n\r\n        dfm = pd.DataFrame({\"date\": grid_dates})\r\n        dfm[\"year\"] = year\r\n        dfm[\"month_num\"] = month\r\n        dfm[\"in_month\"] = dfm[\"date\"].dt.month.eq(month)\r\n        # day-of-week (Sun=0 ... Sat=6)\r\n        dfm[\"dow\"] = ((dfm[\"date\"].dt.weekday + 1) % 7).astype(int)\r\n        # week index within the calendar grid (0..5)\r\n        dfm[\"wom\"] = ((dfm[\"date\"] - start_sun).dt.days // 7).astype(int)\r\n        # day label\r\n        dfm[\"day\"] = dfm[\"date\"].dt.day.where(dfm[\"in_month\"], other=None)\r\n\r\n        # month labels\r\n        if month_label_style.startswith(\"Full\"):\r\n            dfm[\"month_name\"] = first.strftime(\"%B\")\r\n        else:\r\n            dfm[\"month_name\"] = first.strftime(\"%b\")\r\n\r\n        # Merge visits for actual dates (outside-month cells remain NaN)\r\n        dfm = dfm.merge(year_data, on=\"date\", how=\"left\")\r\n        frames.append(dfm)\r\n\r\n    cal = pd.concat(frames, ignore_index=True)\r\n\r\n    # Nice labels\r\n    dow_names = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\r\n    cal[\"dow_name\"] = cal[\"dow\"].map({i:n for i, n in enumerate(dow_names)})\r\n\r\n    return cal\r\n\r\n\r\n# ------- Load & prepare data -------\r\ntry:\r\n    raw = load_data(csv_path)\r\nexcept Exception as e:\r\n    st.error(f\"Failed to read CSV: {e}\")\r\n    st.stop()\r\n\r\nyears = sorted(raw[\"date\"].dt.year.unique().tolist())\r\nyear = st.sidebar.selectbox(\"Year\", years, index=(0 if len(years) == 1 else len(years)-1))\r\n\r\ncal = build_year_calendar(raw, year)\r\n\r\n# Compute gradient stops from this year's *available* visit values\r\nvals = cal.loc[cal[\"in_month\"] & cal[\"visits\"].notna(), \"visits\"].to_numpy()\r\nif vals.size == 0:\r\n    st.warning(f\"No visit data for {year}.\")\r\n    st.stop()\r\n\r\nvmin = float(np.nanmin(vals))\r\nvmax = float(np.nanmax(vals))\r\nvpivot = float(np.quantile(vals, pivot_pct))\r\n\r\n# Color scale: LOW → MID → HIGH  =>  Red → White → Green\r\ncolor_scale = alt.Scale(\r\n    domain=[vmin, vpivot, vmax],\r\n    range=[\"#d73027\", \"#ffffff\", \"#1a9850\"],\r\n    clamp=True,\r\n)\r\n\r\n# Axis domains (keep consistent across facets)\r\ndow_order = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\r\nwom_order = [0, 1, 2, 3, 4, 5]\r\nmonth_order_full  = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\r\nmonth_order_short = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\r\nfacet_order = month_order_full if month_label_style.startswith(\"Full\") else month_order_short\r\n\r\n# Base layer: background cells (outside-month shaded; inside-month white)\r\nbase = (\r\n    alt.Chart(cal)\r\n    .mark_rect(stroke=\"#E0E0E0\" if cell_border else None, strokeWidth=0.5)\r\n    .encode(\r\n        x=alt.X(\"dow_name:N\",\r\n                sort=dow_order,\r\n                axis=alt.Axis(title=None, labelAngle=0, labelPadding=6)),\r\n        y=alt.Y(\"wom:O\",\r\n                sort=wom_order,\r\n                axis=alt.Axis(title=None, ticks=False, labels=False)),\r\n        color=alt.condition(\r\n            \"datum.in_month\",\r\n            alt.value(\"#FFFFFF\"),\r\n            alt.value(missing_color),\r\n        ),\r\n    )\r\n    .properties(width=calendar_width, height=calendar_height)\r\n)\r\n\r\n# Visits layer: color only the in-month cells with data\r\nvisits_layer = (\r\n    alt.Chart(cal)\r\n    .transform_filter(\"datum.in_month && isValid(datum.visits)\")\r\n    .mark_rect(stroke=\"#E0E0E0\" if cell_border else None, strokeWidth=0.5)\r\n    .encode(\r\n        x=alt.X(\"dow_name:N\", sort=dow_order, axis=None),\r\n        y=alt.Y(\"wom:O\", sort=wom_order, axis=None),\r\n        color=alt.Color(\"visits:Q\", scale=color_scale,\r\n                        legend=alt.Legend(title=\"Visits\", gradientLength=120)),\r\n        tooltip=[\r\n            alt.Tooltip(\"date:T\", title=\"Date\"),\r\n            alt.Tooltip(\"visits:Q\", title=\"Visits\", format=\",.0f\"),\r\n        ],\r\n    )\r\n    .properties(width=calendar_width, height=calendar_height)\r\n)\r\n\r\n# Day numbers\r\nday_text = (\r\n    alt.Chart(cal)\r\n    .mark_text(baseline=\"middle\", align=\"center\", dy=0, fontSize=11)\r\n    .encode(\r\n        x=alt.X(\"dow_name:N\", sort=dow_order, axis=None),\r\n        y=alt.Y(\"wom:O\", sort=wom_order, axis=None),\r\n        text=alt.condition(\"datum.in_month\", \"day:Q\", alt.value(\"\")),\r\n        color=alt.condition(\"datum.in_month\", alt.value(\"#333333\"), alt.value(\"#999999\")),\r\n    )\r\n    .properties(width=calendar_width, height=calendar_height)\r\n)\r\n\r\n# Compose per-month charts and facet (3 columns x 4 rows)\r\ncal_chart = alt.layer(base, visits_layer, day_text).facet(\r\n    facet=alt.Facet(\"month_name:N\", sort=facet_order, title=None),\r\n    columns=3,\r\n)\r\n\r\n# ---------------- Layout ----------------\r\nleft, right = st.columns([4, 1], gap=\"large\")\r\n\r\nwith left:\r\n    st.subheader(f\"Calendars — {year}\")\r\n    st.altair_chart(cal_chart, use_container_width=True)\r\n\r\nwith right:\r\n    st.subheader(\"Scale\")\r\n    st.markdown(\r\n        f\"\"\"\r\n**Gradient:**\r\n- **Red** = min (≈ **{vmin:,.0f}**)\r\n- **White** = {pivot_pct:.0%} percentile (≈ **{vpivot:,.0f}**)\r\n- **Green** = max (≈ **{vmax:,.0f}**)\r\n\r\n**Notes**\r\n- Each panel is a true month calendar (Sun–Sat columns, up to 6 weeks).\r\n- Grey cells belong to adjacent months.\r\n        \"\"\"\r\n    )\r\n\r\nst.divider()\r\nwith st.expander(\"Show underlying calendar data (this year)\"):\r\n    st.dataframe(\r\n        cal[[\"date\", \"month_name\", \"in_month\", \"day\", \"visits\"]]\r\n        .sort_values([\"date\"]),\r\n        use_container_width=True,\r\n    )</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- TIPS -->\r\n  <section class=\"section-card\" id=\"tips\">\r\n    <div class=\"banner\">\r\n      <small>Helpful</small>\r\n      <h1>Usage Tips</h1>\r\n      <p>Make the calendar read clearly and run fast</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>CSV path:</strong> if your file isn’t in <code class=\"inline\">/workspaces/learningexamples/</code>, change the path from the sidebar.</li>\r\n        <li><strong>White pivot:</strong> 50% (median) by default. Move the slider to shift what counts as “normal”.</li>\r\n        <li><strong>Missing days:</strong> days with no value inside the month render as white with a day number; outside‑month cells use the grey swatch from the color picker.</li>\r\n        <li><strong>Performance:</strong> one year (≈365 values) is tiny — Altair renders quickly. For multiple years, keep the facet to 12 panels per view.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "feac7647-632f-4cae-bb24-71afb6cae9a1"
        },
        {
          "kind": "article",
          "order": 4,
          "title": "Statistics for Visualization • Make Your Charts Truthful & Useful",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Statistics for Visualization • Make Your Charts Truthful & Useful</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Grids / boxes (horizontal info) === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Code blocks (white on dark) === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n/* Inline code chip — your requested color */\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Module • Foundations</small>\r\n      <h1>Statistics for Data Visualization</h1>\r\n      <p>Use the right summaries to scale axes, color ranges, and highlight signal (not noise)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        Great visuals depend on simple, robust statistics. <strong>Min/Max, Mean/Median, Percentiles, Std‑dev</strong> and a few\r\n        transformations (normalization, z‑scores, rolling averages) determine how your charts <em>scale</em>, how colors map to values,\r\n        and how outliers are treated. Get these right and your visuals become truthful, legible, and decision‑ready.\r\n      </p>\r\n      <div class=\"grid\" style=\"margin-top:10px;\">\r\n        <div class=\"box\">\r\n          <h3>Why stats matter</h3>\r\n          <ul>\r\n            <li><strong>Scaling:</strong> choose axis and color ranges (e.g., P5–P95) to avoid skew.</li>\r\n            <li><strong>Comparability:</strong> normalize (0–1) or z‑score to compare across metrics.</li>\r\n            <li><strong>Signal vs noise:</strong> rolling averages reduce jitter; outlier rules prevent distortion.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>At a glance</h3>\r\n          <ul>\r\n            <li><strong>Min/Max:</strong> bounds; sensitive to outliers.</li>\r\n            <li><strong>Median:</strong> robust central tendency.</li>\r\n            <li><strong>Percentiles (P10/P90):</strong> robust range for color/axes.</li>\r\n            <li><strong>Std‑dev:</strong> variability; z‑scores for outliers.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Apply to visuals</h3>\r\n          <ul>\r\n            <li>Heatmaps: color domain = <code class=\"inline\">[P10, P50, P90]</code>.</li>\r\n            <li>Time‑series: show line + <em>rolling mean</em> + highlight z‑outliers.</li>\r\n            <li>Distributions: Freedman‑Diaconis bins for histograms.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"box\" style=\"margin-top:14px;\">\r\n        <strong>Fix applied:</strong> removed the unsupported Altair argument <code class=\"inline\">disabled=...</code> from tooltips and\r\n        replaced it with a safe, conditional tooltip list (works on Altair v5). This resolves the\r\n        <em>SchemaValidationError: Tooltip has no parameter named 'disabled'</em>.\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- CORE STATISTICS -->\r\n  <section class=\"section-card\" id=\"core\">\r\n    <div class=\"banner\">\r\n      <small>Reference</small>\r\n      <h1>Core statistics & how to use them in charts</h1>\r\n      <p>Pick the right summary for the job</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>Min / Max</strong> — absolute bounds. Good for full context, but <em>don’t</em> use alone to scale color/axis when outliers exist.</li>\r\n        <li><strong>Mean & Std‑dev</strong> — average & variability. Use <em>z‑scores</em> to flag points far from the mean (e.g., |z| ≥ 3).</li>\r\n        <li><strong>Median & Percentiles (P10, P25, P50, P75, P90)</strong> — robust against skew. Use <em>quantile clipping</em> (e.g., P5–P95) for axis/color limits.</li>\r\n        <li><strong>IQR (P75–P25)</strong> — robust spread. Box plots and Freedman‑Diaconis bin widths rely on IQR.</li>\r\n        <li><strong>Rolling averages</strong> — smooth noise in time‑series; pick windows (7, 14, 30 days) based on cadence.</li>\r\n        <li><strong>Normalization</strong> — MinMax (0–1) to compare metrics on a common scale; Z‑score to center by mean/variance.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STREAMLIT DEMO -->\r\n  <section class=\"section-card\" id=\"demo\">\r\n    <div class=\"banner\">\r\n      <small>Hands‑on</small>\r\n      <h1>Streamlit: stats → visuals (line + histogram + box plot)</h1>\r\n      <p>Upload a CSV or use a demo series; robust scaling, outliers, rolling</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p><strong>What it does:</strong> loads a CSV, picks a date column and a numeric metric, computes min/max/mean/median/percentiles,\r\n         offers robust range (P5–P95), normalization, z‑score outlier highlighting, rolling mean, and renders three visuals.</p>\r\n\r\n<pre># streamlit_stats_viz.py  (Altair v5‑friendly; no unsupported tooltip args)\r\nimport io\r\nfrom typing import Optional\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\nimport altair as alt\r\nimport streamlit as st\r\n\r\nst.set_page_config(page_title=\"Statistics for Visualization\", page_icon=\"📊\", layout=\"wide\")\r\nst.title(\"📊 Statistics for Visualization — Practical Demo\")\r\n\r\n# ---------------- Demo / Data load ----------------\r\n@st.cache_data(show_spinner=False)\r\ndef demo_timeseries(n=365, seed=42) -> pd.DataFrame:\r\n    rng = np.random.default_rng(seed)\r\n    dates = pd.date_range(\"2024-01-01\", periods=n, freq=\"D\")\r\n    # seasonal + noise + a few spikes\r\n    x = np.arange(n)\r\n    val = 100 + 15*np.sin(x/12) + 8*np.cos(x/25) + rng.normal(0, 4, n)\r\n    spikes = rng.choice(n, size=5, replace=False)\r\n    val[spikes] += rng.normal(25, 6, len(spikes))\r\n    return pd.DataFrame({\"Date\": dates, \"Value\": val})\r\n\r\n@st.cache_data(show_spinner=False)\r\ndef read_csv_safely(file) -> Optional[pd.DataFrame]:\r\n    try:\r\n        df = pd.read_csv(file)\r\n        # parse common datetime columns\r\n        for c in df.columns:\r\n            if str(c).lower() in (\"date\",\"time\",\"datetime\",\"timestamp\"):\r\n                df[c] = pd.to_datetime(df[c], errors=\"coerce\")\r\n        return df\r\n    except Exception as e:\r\n        st.error(f\"Failed to read CSV: {e}\")\r\n        return None\r\n\r\nwith st.sidebar:\r\n    st.header(\"Data\")\r\n    up = st.file_uploader(\"Upload CSV\", type=[\"csv\"])\r\n    if up is not None:\r\n        df_raw = read_csv_safely(up)\r\n        source = \"Uploaded CSV\"\r\n    else:\r\n        df_raw = demo_timeseries()\r\n        source = \"Demo series (synthetic)\"\r\n\r\n    if df_raw is None or df_raw.empty:\r\n        st.stop()\r\n\r\n    st.caption(f\"Source: **{source}**  •  Rows: **{len(df_raw):,}**  •  Cols: **{len(df_raw.columns)}**\")\r\n\r\n    dt_cols = [c for c in df_raw.columns if pd.api.types.is_datetime64_any_dtype(df_raw[c])]\r\n    date_col = st.selectbox(\"Date column (optional)\", [\"<none>\"] + dt_cols, index=(1 if dt_cols else 0))\r\n\r\n    num_cols = df_raw.select_dtypes(include=\"number\").columns.tolist()\r\n    if not num_cols:\r\n        st.warning(\"No numeric columns detected.\")\r\n        st.stop()\r\n    metric = st.selectbox(\"Numeric column\", num_cols, index=0)\r\n\r\n    st.header(\"Scaling & Filters\")\r\n    robust = st.checkbox(\"Use robust range (P5–P95) for axis/color\", value=True)\r\n    roll = st.slider(\"Rolling mean window\", 1, 60, 7, help=\"Applied on the line chart\")\r\n    norm = st.selectbox(\"Normalize\", [\"None\",\"MinMax (0–1)\",\"Z-score\"], index=0)\r\n    z_thresh = st.slider(\"Outlier |z|-threshold\", 2.0, 5.0, 3.0, 0.5)\r\n\r\n# Prepare DataFrame\r\ndf = df_raw.copy()\r\nif date_col != \"<none>\":\r\n    df = df.dropna(subset=[date_col]).sort_values(date_col)\r\nelse:\r\n    df = df.reset_index().rename(columns={\"index\":\"Index\"})\r\n    date_col = \"Index\"\r\n\r\n# Numeric series\r\ns = pd.to_numeric(df[metric], errors=\"coerce\").dropna()\r\ndf = df.loc[s.index].copy()\r\ndf[\"y\"] = s.values\r\n\r\n# Summary stats\r\ndesc = df[\"y\"].describe(percentiles=[.05,.10,.25,.50,.75,.90,.95]).to_frame(name=\"value\")\r\nymin, ymax = float(desc.loc[\"min\",\"value\"]), float(desc.loc[\"max\",\"value\"])\r\nmu, sd = float(desc.loc[\"mean\",\"value\"]), float(df[\"y\"].std(ddof=1))\r\np10, p50, p90 = (float(desc.loc[\"10%\",\"value\"]), float(desc.loc[\"50%\",\"value\"]), float(desc.loc[\"90%\",\"value\"]))\r\np5, p25, p75, p95 = (float(desc.loc[\"5%\",\"value\"]), float(desc.loc[\"25%\",\"value\"]),\r\n                     float(desc.loc[\"75%\",\"value\"]), float(desc.loc[\"95%\",\"value\"]))\r\n\r\n# Normalization for plotting\r\ny_plot = df[\"y\"].copy()\r\nif norm == \"MinMax (0–1)\":\r\n    lo, hi = y_plot.min(), y_plot.max()\r\n    y_plot = (y_plot - lo) / (hi - lo) if hi > lo else y_plot*0\r\nelif norm == \"Z-score\":\r\n    y_plot = (y_plot - mu) / sd if sd > 0 else y_plot*0\r\ndf[\"y_plot\"] = y_plot\r\n\r\n# Z-score outliers on RAW values\r\ndf[\"is_outlier\"] = (abs((df[\"y\"] - mu) / sd) >= z_thresh) if sd > 0 else False\r\n\r\n# Rolling mean (on plotted series for visual coherence)\r\nw = max(1, int(roll))\r\ndf[\"roll\"] = df[\"y_plot\"].rolling(w, min_periods=1).mean()\r\n\r\n# Robust axis range (for reporting)\r\nlo_rep, hi_rep = (p5, p95) if robust else (ymin, ymax)\r\n\r\n# ---------------- KPIs ----------------\r\nk1,k2,k3,k4,k5,k6 = st.columns(6)\r\nk1.metric(\"Min\", f\"{ymin:,.2f}\")\r\nk2.metric(\"P10 / Median / P90\", f\"{p10:,.2f} / {p50:,.2f} / {p90:,.2f}\")\r\nk3.metric(\"Max\", f\"{ymax:,.2f}\")\r\nk4.metric(\"Mean\", f\"{mu:,.2f}\")\r\nk5.metric(\"Std‑dev\", f\"{sd:,.2f}\")\r\nk6.metric(f\"Outliers (|z| ≥ {z_thresh:.1f})\", f\"{int(df['is_outlier'].sum()):,}\")\r\n\r\n# ---------------- Charts ----------------\r\nleft, right = st.columns([2,1], gap=\"large\")\r\n\r\n# Build a safe tooltip list (Altair v5 — no 'disabled' parameter)\r\nis_time = pd.api.types.is_datetime64_any_dtype(df[date_col])\r\nif is_time:\r\n    tooltips = [alt.Tooltip(f\"{date_col}:T\", title=\"Date\", format=\"%Y-%m-%d\"),\r\n                alt.Tooltip(\"y:Q\", title=metric, format=\",.2f\")]\r\n    x_enc = alt.X(f\"{date_col}:T\", title=None)\r\nelse:\r\n    tooltips = [alt.Tooltip(f\"{date_col}:Q\", title=\"Index\"),\r\n                alt.Tooltip(\"y:Q\", title=metric, format=\",.2f\")]\r\n    x_enc = alt.X(f\"{date_col}:Q\", title=None)\r\n\r\nwith left:\r\n    st.subheader(\"Time series\")\r\n    base = alt.Chart(df).encode(x=x_enc)\r\n\r\n    line = base.mark_line().encode(\r\n        y=alt.Y(\"y_plot:Q\", title=f\"{metric} ({'norm' if norm!='None' else 'raw'})\"),\r\n        tooltip=tooltips\r\n    )\r\n\r\n    roll_line = base.mark_line(strokeDash=[6,4]).encode(\r\n        y=\"roll:Q\",\r\n        tooltip=tooltips\r\n    )\r\n\r\n    points = base.mark_circle(size=64, color=\"#d62728\").encode(\r\n        y=\"y_plot:Q\",\r\n        tooltip=tooltips\r\n    ).transform_filter(\"datum.is_outlier == true\")\r\n\r\n    st.altair_chart((line + roll_line + points).interactive(), use_container_width=True)\r\n\r\n    st.subheader(\"Histogram\")\r\n    # Freedman–Diaconis bins (fallback to 30)\r\n    iqr = p75 - p25\r\n    n = len(df)\r\n    width = 2 * iqr * (n ** (-1/3)) if iqr > 0 else None\r\n    maxbins = int(np.clip((ymax - ymin)/width, 8, 80)) if width and width > 0 else 30\r\n    hist = alt.Chart(df).mark_bar().encode(\r\n        x=alt.X(\"y:Q\", bin=alt.Bin(maxbins=maxbins), title=metric),\r\n        y=alt.Y(\"count():Q\", title=\"Count\"),\r\n        tooltip=[alt.Tooltip(\"count():Q\", title=\"Count\")]\r\n    )\r\n    st.altair_chart(hist, use_container_width=True)\r\n\r\nwith right:\r\n    st.subheader(\"Box plot\")\r\n    box = alt.Chart(df).mark_boxplot(size=60).encode(y=alt.Y(\"y:Q\", title=metric))\r\n    st.altair_chart(box, use_container_width=True)\r\n\r\n    st.subheader(\"Axis / Color suggestion\")\r\n    st.code(f\"Use {'robust' if robust else 'full'} range: [{lo_rep:,.2f}, {hi_rep:,.2f}]\\n\"\r\n            \"Heatmaps: map colors via [P10, P50, P90] or similar.\", language=\"text\")\r\n\r\nst.subheader(\"Outliers\")\r\nst.caption(\"Rows flagged by |z| ≥ threshold (based on raw values).\")\r\nout = df.loc[df[\"is_outlier\"], [date_col, \"y\"]].rename(columns={date_col:\"Date\", \"y\":metric})\r\nst.dataframe(out, use_container_width=True)</pre>\r\n\r\n      <p><strong>Run it</strong></p>\r\n      <pre>pip install streamlit altair pandas numpy\r\nstreamlit run streamlit_stats_viz.py</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- PRACTICAL RECIPES -->\r\n  <section class=\"section-card\" id=\"recipes\">\r\n    <div class=\"banner\">\r\n      <small>Recipes</small>\r\n      <h1>Practical recipes that improve charts</h1>\r\n      <p>Small changes that make a big difference</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>Heatmap color domain:</strong> use <code class=\"inline\">[P10, P50, P90]</code> (or P5/P50/P95) instead of <code class=\"inline\">[min, mean, max]</code> to avoid outlier domination.</li>\r\n        <li><strong>Axis limits:</strong> clip to <code class=\"inline\">[P5, P95]</code> and annotate the clipping rule; retain tooltips for exact values.</li>\r\n        <li><strong>Rolling overlays:</strong> on time‑series, overlay a 7‑ or 14‑day rolling mean to reveal the signal trend.</li>\r\n        <li><strong>Outlier dots:</strong> mark |z|≥3 points as red circles on the line; don’t scale axes to accommodate them.</li>\r\n        <li><strong>Bins:</strong> pick bins with Freedman‑Diaconis (automatic) or provide a simple slider (8–80) for analyst control.</li>\r\n        <li><strong>Compare metrics:</strong> MinMax normalize to 0–1 and plot together; use a secondary scale only when absolutely necessary.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "d4510c4c-7d40-421b-87e9-a9bb349d7a04"
        },
        {
          "kind": "article",
          "order": 5,
          "title": "Different Statistical Views of Daily Data",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Calendar Heatmaps • 5 Statistical Views of Daily Data</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Grid boxes === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr)); gap: 14px; }\r\n.box  { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Visualization • Calendars</small>\r\n      <h1>Five Calendar Views — Same Data, Different Statistics</h1>\r\n      <p>Switch statistical lenses to answer different questions from daily data</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>1) Raw (P10–P50–P90)</h3>\r\n          <p>Absolute values with a robust color domain. Good for overall scale and extremes without letting outliers dominate.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>2) Month‑Relative % of Max</h3>\r\n          <p>Each month normalized to its own max (0–1). Great for seeing <em>relative peaks</em> within that month (seasonality removed).</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>3) Robust Z (Median & MAD)</h3>\r\n          <p>Deviations from the yearly median scaled by MAD (outlier‑resistant). Symmetric red↔green for “unusually low/high” days.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>4) 7‑Day Rolling Mean</h3>\r\n          <p>Smooths noise to reveal weekly trends. Use when daily volatility hides sustained increases/decreases.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>5) Deviation vs Day‑of‑Week Baseline</h3>\r\n          <p>Subtracts a DOW baseline (median Monday, Tuesday, …). Shows how a day performed vs its typical weekday.</p>\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:12px;\">Copy the app below to your repo and run it. Use the <strong>View</strong> selector in the sidebar to switch between the five statistical calendars.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Copy & Run</small>\r\n      <h1>app_calendar_5_views.py — Streamlit + Altair</h1>\r\n      <p>Faceted (3×4) monthly calendars with multiple statistical encodings</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre># app_calendar_5_views.py\r\n# Five statistical calendar views of daily data (red → white → green)\r\n# Default CSV: /workspaces/learningexamples/bank_visits_2024.csv\r\n# Columns (case-insensitive): date, total_visit/total_visits/visits/visit/count/value\r\n\r\nimport streamlit as st\r\nimport pandas as pd\r\nimport numpy as np\r\nimport altair as alt\r\n\r\nst.set_page_config(page_title=\"Calendar Heatmaps — 5 Statistical Views\", layout=\"wide\")\r\nst.title(\"📅 Calendar Heatmaps — Five Statistical Views\")\r\n\r\nDEFAULT_PATH = \"/workspaces/learningexamples/bank_visits_2024.csv\"\r\n\r\n# ---------------- Sidebar ----------------\r\nst.sidebar.header(\"Data & View\")\r\ncsv_path = st.sidebar.text_input(\"CSV path\", DEFAULT_PATH)\r\nview = st.sidebar.selectbox(\r\n    \"Calendar view\",\r\n    [\r\n        \"Raw (P10–P50–P90)\",\r\n        \"Month‑Relative % of Max (0–1)\",\r\n        \"Robust Z (Median & MAD)\",\r\n        \"7‑Day Rolling Mean\",\r\n        \"Deviation vs Day‑of‑Week Baseline\",\r\n    ],\r\n    index=0\r\n)\r\n\r\n# Shared appearance\r\nmissing_color = st.sidebar.color_picker(\"Outside‑month cell color\", \"#BDBDBD\")\r\ncell_border = st.sidebar.checkbox(\"Show cell borders\", value=True)\r\nmonth_label_style = st.sidebar.selectbox(\"Month label\", [\"Full (January)\", \"Short (Jan)\"], index=0)\r\ncell_size = st.sidebar.slider(\"Cell size (px)\", 16, 36, 24)\r\ncalendar_width  = 7 * cell_size + 30\r\ncalendar_height = 6 * cell_size + 20\r\n\r\n# View‑specific controls\r\nst.sidebar.header(\"Statistics\")\r\npivot_pct = None\r\nlimit = None\r\nroll_window = None\r\ndow_stat = None\r\n\r\nif view in [\"Raw (P10–P50–P90)\", \"7‑Day Rolling Mean\"]:\r\n    pivot_pct = st.sidebar.slider(\"White pivot (percentile)\", 0.0, 1.0, 0.50, 0.01)\r\nif view == \"Robust Z (Median & MAD)\":\r\n    limit = st.sidebar.slider(\"Diverging limit (±)\", 1.0, 6.0, 3.0, 0.5, help=\"Clamps color domain to [−L, 0, +L].\")\r\nif view == \"7‑Day Rolling Mean\":\r\n    roll_window = st.sidebar.slider(\"Rolling window (days)\", 3, 30, 7, 1)\r\nif view == \"Deviation vs Day‑of‑Week Baseline\":\r\n    dow_stat = st.sidebar.selectbox(\"Baseline statistic\", [\"Median\", \"Mean\"], index=0)\r\n    limit = st.sidebar.slider(\"Diverging limit (±)\", 5.0, 200.0, 50.0, 5.0,\r\n                              help=\"Clamps color domain for deviation from DOW baseline.\")\r\n\r\n# ---------------- Data Load ----------------\r\n@st.cache_data(show_spinner=False)\r\ndef load_csv(path: str) -> pd.DataFrame:\r\n    df = pd.read_csv(path)\r\n    cols = {c.lower().strip(): c for c in df.columns}\r\n    date_col = next((cols[c] for c in [\"date\",\"day\"] if c in cols), None)\r\n    val_col  = next((cols[c] for c in [\"total_visit\",\"total_visits\",\"visits\",\"visit\",\"count\",\"value\"] if c in cols), None)\r\n    if not date_col or not val_col:\r\n        raise ValueError(\"CSV must have 'date' and a visits column (e.g., 'total_visit').\")\r\n    df = df[[date_col, val_col]].rename(columns={date_col: \"date\", val_col: \"visits\"})\r\n    df[\"date\"] = pd.to_datetime(df[\"date\"], errors=\"coerce\")\r\n    df[\"visits\"] = pd.to_numeric(df[\"visits\"], errors=\"coerce\")\r\n    df = df.dropna(subset=[\"date\"]).sort_values(\"date\").reset_index(drop=True)\r\n    return df\r\n\r\ntry:\r\n    raw = load_csv(csv_path)\r\nexcept Exception as e:\r\n    st.error(f\"Failed to read CSV: {e}\")\r\n    st.stop()\r\n\r\nyears = sorted(raw[\"date\"].dt.year.unique().tolist())\r\nyear  = st.sidebar.selectbox(\"Year\", years, index=(0 if len(years)==1 else len(years)-1))\r\nyear_data = raw[raw[\"date\"].dt.year == year][[\"date\",\"visits\"]].copy()\r\nif year_data.empty:\r\n    st.warning(f\"No data for {year}.\")\r\n    st.stop()\r\n\r\n# ---------------- Calendar Grid Builder ----------------\r\ndef build_year_calendar(year_df: pd.DataFrame, year: int) -> pd.DataFrame:\r\n    frames = []\r\n    for month in range(1, 13):\r\n        first = pd.Timestamp(year, month, 1)\r\n        start_sun = first - pd.Timedelta(days=(first.weekday() + 1) % 7)\r\n        grid_dates = pd.date_range(start_sun, periods=42, freq=\"D\")\r\n        dfm = pd.DataFrame({\"date\": grid_dates})\r\n        dfm[\"month_num\"] = month\r\n        dfm[\"in_month\"]  = dfm[\"date\"].dt.month.eq(month)\r\n        dfm[\"dow\"] = ((dfm[\"date\"].dt.weekday + 1) % 7).astype(int)  # Sun=0\r\n        dfm[\"wom\"] = ((dfm[\"date\"] - start_sun).dt.days // 7).astype(int)\r\n        dfm[\"day\"] = dfm[\"date\"].dt.day.where(dfm[\"in_month\"], other=None)\r\n        dfm[\"month_name\"] = first.strftime(\"%B\") if month_label_style.startswith(\"Full\") else first.strftime(\"%b\")\r\n        frames.append(dfm)\r\n    cal = pd.concat(frames, ignore_index=True)\r\n    cal = cal.merge(year_df, on=\"date\", how=\"left\")  # adds 'visits'\r\n    dow_names = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\r\n    cal[\"dow_name\"] = cal[\"dow\"].map(dict(enumerate(dow_names)))\r\n    return cal\r\n\r\ncal = build_year_calendar(year_data, year)\r\n\r\n# ---------------- Value Encoding per View ----------------\r\nlegend_title = \"\"\r\ncolor_scale = None\r\n\r\ndef seq_scale(lo, mid, hi):\r\n    return alt.Scale(domain=[float(lo), float(mid), float(hi)],\r\n                     range=[\"#d73027\",\"#ffffff\",\"#1a9850\"], clamp=True)\r\n\r\ndef div_scale(limit):\r\n    L = float(limit)\r\n    return alt.Scale(domain=[-L, 0.0, +L],\r\n                     range=[\"#d73027\",\"#ffffff\",\"#1a9850\"], clamp=True)\r\n\r\nif view == \"Raw (P10–P50–P90)\":\r\n    vals = cal.loc[cal[\"in_month\"] & cal[\"visits\"].notna(), \"visits\"].to_numpy()\r\n    p10 = np.quantile(vals, 0.10) if vals.size else 0\r\n    p50 = np.quantile(vals, float(pivot_pct)) if vals.size else 0  # pivot can be any quantile; default 0.50\r\n    p90 = np.quantile(vals, 0.90) if vals.size else 1\r\n    cal[\"value\"] = cal[\"visits\"]\r\n    legend_title = \"Visits\"\r\n    color_scale = seq_scale(p10, p50, p90)\r\n\r\nelif view == \"Month‑Relative % of Max (0–1)\":\r\n    # per-month normalization (within this year)\r\n    month_max = year_data.assign(month=year_data[\"date\"].dt.month) \\\r\n                         .groupby(\"month\")[\"visits\"].max()\r\n    cal = cal.join(month_max, on=cal[\"month_num\"], rsuffix=\"_mmax\")\r\n    denom = cal[\"visits_mmax\"].replace({0: np.nan})\r\n    cal[\"value\"] = (cal[\"visits\"] / denom).clip(0, 1)\r\n    cal.loc[denom.isna(), \"value\"] = np.nan  # if month had no data\r\n    cal = cal.drop(columns=[\"visits_mmax\"])\r\n    legend_title = \"% of month max\"\r\n    color_scale = seq_scale(0.0, 0.5, 1.0)\r\n\r\nelif view == \"Robust Z (Median & MAD)\":\r\n    # robust z = 0.6745 * (x - median) / MAD\r\n    x = year_data[\"visits\"].to_numpy()\r\n    med = float(np.median(x))\r\n    mad = float(np.median(np.abs(x - med)))\r\n    if mad == 0:\r\n        rz = (year_data[\"visits\"] - med) * 0.0\r\n    else:\r\n        rz = 0.6745 * (year_data[\"visits\"] - med) / mad\r\n    year_rz = year_data.assign(value=rz)[[\"date\",\"value\"]]\r\n    cal = cal.drop(columns=[\"value\"], errors=\"ignore\").merge(year_rz, on=\"date\", how=\"left\")\r\n    legend_title = \"Robust z\"\r\n    color_scale = div_scale(limit)\r\n\r\nelif view == \"7‑Day Rolling Mean\":\r\n    # trailing centered=False rolling mean on complete year series\r\n    ydf = year_data.sort_values(\"date\").copy()\r\n    ydf[\"value\"] = ydf[\"visits\"].rolling(int(roll_window), min_periods=1).mean()\r\n    cal = cal.drop(columns=[\"value\"], errors=\"ignore\").merge(ydf[[\"date\",\"value\"]], on=\"date\", how=\"left\")\r\n    vals = cal.loc[cal[\"in_month\"] & cal[\"value\"].notna(), \"value\"].to_numpy()\r\n    p10 = np.quantile(vals, 0.10) if vals.size else 0\r\n    p50 = np.quantile(vals, float(pivot_pct)) if vals.size else 0\r\n    p90 = np.quantile(vals, 0.90) if vals.size else 1\r\n    legend_title = f\"{int(roll_window)}‑day mean\"\r\n    color_scale = seq_scale(p10, p50, p90)\r\n\r\nelse:  # Deviation vs DOW Baseline\r\n    ydf = year_data.assign(dow=((year_data[\"date\"].dt.weekday + 1) % 7))\r\n    if dow_stat == \"Median\":\r\n        base = ydf.groupby(\"dow\")[\"visits\"].median()\r\n    else:\r\n        base = ydf.groupby(\"dow\")[\"visits\"].mean()\r\n    cal = cal.join(base, on=\"dow\", rsuffix=\"_base\")\r\n    cal[\"value\"] = cal[\"visits\"] - cal[\"visits_base\"]\r\n    cal = cal.drop(columns=[\"visits_base\"])\r\n    legend_title = f\"Δ vs {dow_stat} DOW\"\r\n    color_scale = div_scale(limit)\r\n\r\n# ---------------- Chart ----------------\r\ndow_order = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\r\nwom_order = [0,1,2,3,4,5]\r\nmonth_full  = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\r\nmonth_short = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\r\nfacet_order = month_full if month_label_style.startswith(\"Full\") else month_short\r\n\r\nbase = (\r\n    alt.Chart(cal)\r\n    .mark_rect(stroke=\"#E0E0E0\" if cell_border else None, strokeWidth=0.5)\r\n    .encode(\r\n        x=alt.X(\"dow_name:N\", sort=dow_order, axis=alt.Axis(title=None, labelAngle=0, labelPadding=6)),\r\n        y=alt.Y(\"wom:O\",      sort=wom_order, axis=alt.Axis(title=None, ticks=False, labels=False)),\r\n        color=alt.condition(\"datum.in_month\", alt.value(\"#FFFFFF\"), alt.value(missing_color)),\r\n    )\r\n    .properties(width=calendar_width, height=calendar_height)\r\n)\r\n\r\nvals_layer = (\r\n    alt.Chart(cal)\r\n    .transform_filter(\"datum.in_month && isValid(datum.value)\")\r\n    .mark_rect(stroke=\"#E0E0E0\" if cell_border else None, strokeWidth=0.5)\r\n    .encode(\r\n        x=alt.X(\"dow_name:N\", sort=dow_order, axis=None),\r\n        y=alt.Y(\"wom:O\", sort=wom_order, axis=None),\r\n        color=alt.Color(\"value:Q\", scale=color_scale, legend=alt.Legend(title=legend_title, gradientLength=120)),\r\n        tooltip=[\r\n            alt.Tooltip(\"date:T\",   title=\"Date\"),\r\n            alt.Tooltip(\"visits:Q\", title=\"Visits\", format=\",.0f\"),\r\n            alt.Tooltip(\"value:Q\",  title=legend_title)\r\n        ],\r\n    )\r\n    .properties(width=calendar_width, height=calendar_height)\r\n)\r\n\r\nday_text = (\r\n    alt.Chart(cal)\r\n    .mark_text(baseline=\"middle\", align=\"center\", dy=0, fontSize=11)\r\n    .encode(\r\n        x=alt.X(\"dow_name:N\", sort=dow_order, axis=None),\r\n        y=alt.Y(\"wom:O\", sort=wom_order, axis=None),\r\n        text=alt.condition(\"datum.in_month\", \"day:Q\", alt.value(\"\")),\r\n        color=alt.condition(\"datum.in_month\", alt.value(\"#333333\"), alt.value(\"#999999\")),\r\n    )\r\n    .properties(width=calendar_width, height=calendar_height)\r\n)\r\n\r\nchart = alt.layer(base, vals_layer, day_text).facet(\r\n    facet=alt.Facet(\"month_name:N\", sort=facet_order, title=None),\r\n    columns=3\r\n)\r\n\r\n# ---------------- Layout ----------------\r\nleft, right = st.columns([4,1], gap=\"large\")\r\nwith left:\r\n    st.subheader(f\"Calendars — {year}\")\r\n    st.caption(f\"View: **{view}**\")\r\n    st.altair_chart(chart, use_container_width=True)\r\n\r\nwith right:\r\n    st.subheader(\"Legend / Notes\")\r\n    if view in [\"Raw (P10–P50–P90)\", \"7‑Day Rolling Mean\"]:\r\n        st.markdown(f\"- Red → low (≈ P10)\\n- White → {int(pivot_pct*100)}th percentile\\n- Green → high (≈ P90)\")\r\n    elif view == \"Month‑Relative % of Max (0–1)\":\r\n        st.markdown(\"- Red → 0 (low for that month)\\n- White → 0.5\\n- Green → 1.0 (month peak)\")\r\n    elif view == \"Robust Z (Median & MAD)\":\r\n        st.markdown(f\"- Diverging domain: ±{limit}\\n- Red → below median · Green → above median\")\r\n    else:\r\n        st.markdown(f\"- Δ vs {dow_stat} DOW baseline\\n- Diverging domain: ±{limit}\")\r\n\r\nst.divider()\r\nwith st.expander(\"Show underlying data (this year)\"):\r\n    st.dataframe(cal[[\"date\",\"month_name\",\"in_month\",\"day\",\"visits\",\"value\"]].sort_values(\"date\"),\r\n                 use_container_width=True)</pre>\r\n\r\n      <p><strong>Run it</strong></p>\r\n      <pre>pip install streamlit altair pandas numpy\r\nstreamlit run app_calendar_5_views.py</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "59585d1b-ab42-4813-bdbf-8f16ec98c8ed"
        },
        {
          "kind": "article",
          "order": 6,
          "title": "D3.js Once • Always Fresh via SQL",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>D3.js Built Once • Auto‑Updating with SQL Data (Workflow)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small {\r\n  font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF;\r\n}\r\n.section-card .banner h1 {\r\n  margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF;\r\n}\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Diagram styles === */\r\n.lane {\r\n  border: 1px solid #EBEBEB; border-radius: 12px; padding: 14px; margin-top: 14px; background: #fff;\r\n}\r\n.lane-title {\r\n  font-weight: 700; color: #000; margin-bottom: 10px; display: flex; align-items: center; gap: 8px;\r\n}\r\n.badge { font-size: 12px; font-weight: 700; padding: 3px 8px; border-radius: 999px; border: 1px solid #A3A3A3; }\r\n.badge-once { background: #000000; color: #EBEBEB; border-color: #000000; }\r\n.badge-cycle { background: #BDBDBD; color: #000000; border-color: #A3A3A3; }\r\n\r\n.flow {\r\n  display: flex; flex-wrap: wrap; gap: 10px; align-items: center;\r\n}\r\n.node {\r\n  min-width: 170px;\r\n  border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 12px;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04);\r\n}\r\n.node .t { font-weight: 700; color: #000; margin-bottom: 4px; }\r\n.node .s { font-size: 13px; color: #777; }\r\n\r\n.arrow {\r\n  font-size: 20px; color: #A3A3A3; line-height: 1; padding: 0 4px;\r\n}\r\n\r\n/* === Legend & tips === */\r\n.legend {\r\n  display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\r\n  gap: 14px; margin-top: 10px;\r\n}\r\n.legend .item {\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 12px; background: #fff;\r\n}\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>D3.js • SQL • Ops</small>\r\n      <h1>Build Once, Update Forever — D3.js fed by SQL</h1>\r\n      <p>Your D3 chart is a <strong>final outcome</strong>: one-time build; data changes flow from SQL to the same chart automatically.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        The key idea: <strong>separate the visualization from the data pipeline</strong>. You compile and deploy your D3.js chart\r\n        <em>once</em> (static assets), and you expose data from SQL via a stable <strong>JSON/CSV endpoint</strong>. As data changes,\r\n        the endpoint returns fresh values — the chart updates on load (or on a lightweight timer) without rebuilding the D3 code.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DIAGRAM 1: One-time Build vs Continuous Data -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Workflow</small>\r\n      <h1>One‑Time Build • Continuous Data Updates</h1>\r\n      <p>Two tracks: <em>build</em> (once) and <em>data</em> (forever)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n\r\n      <div class=\"lane\">\r\n        <div class=\"lane-title\">A) One‑time build <span class=\"badge badge-once\">One‑time</span></div>\r\n        <div class=\"flow\">\r\n          <div class=\"node\">\r\n            <div class=\"t\">Design & Develop</div>\r\n            <div class=\"s\">D3 chart (axes, scales, tooltips, legend)</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Static Assets</div>\r\n            <div class=\"s\"><em>index.html</em> • <em>bundle.js</em> • <em>styles.css</em></div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Host</div>\r\n            <div class=\"s\">Static hosting / CDN (e.g., GitHub Pages, Netlify, S3+CloudFront)</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"lane\">\r\n        <div class=\"lane-title\">B) Continuous data path <span class=\"badge badge-cycle\">Recurring</span></div>\r\n        <div class=\"flow\">\r\n          <div class=\"node\">\r\n            <div class=\"t\">Data Entry</div>\r\n            <div class=\"s\">App forms • CSV uploads • Integrations</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">SQL Database</div>\r\n            <div class=\"s\">Postgres/Neon • SQLite • (your choice)</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Transform Layer</div>\r\n            <div class=\"s\">Views / Materialized Views • Validation</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">API / Feed</div>\r\n            <div class=\"s\">JSON / CSV endpoint with stable schema</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">D3 Fetch</div>\r\n            <div class=\"s\">Chart reads endpoint at runtime</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"legend\">\r\n        <div class=\"item\">\r\n          <strong>Build track</strong>: you only redo this if you change visual design or logic (new chart type, fields, interactivity).\r\n        </div>\r\n        <div class=\"item\">\r\n          <strong>Data track</strong>: runs forever. New rows enter SQL → transformed view → endpoint → chart loads fresh data.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DIAGRAM 2: Update Loop -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Lifecycle</small>\r\n      <h1>Update Loop — from new row to visible change</h1>\r\n      <p>What happens after you insert new data</p>\r\n    </div>\r\n    <div class=\"body\">\r\n\r\n      <div class=\"lane\">\r\n        <div class=\"lane-title\">C) Data → Chart propagation <span class=\"badge badge-cycle\">Recurring</span></div>\r\n        <div class=\"flow\">\r\n          <div class=\"node\">\r\n            <div class=\"t\">Insert/Update</div>\r\n            <div class=\"s\">New facts written to raw tables</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Refresh</div>\r\n            <div class=\"s\">View recompute / MatView refresh (cron, trigger, webhook)</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Cache Policy</div>\r\n            <div class=\"s\">API TTL / CDN TTL (invalidate or let expire)</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Fetch in Browser</div>\r\n            <div class=\"s\">On load or timed refresh (e.g., every 5–15 min)</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Re‑render</div>\r\n            <div class=\"s\">D3 scales update • marks transition</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"legend\">\r\n        <div class=\"item\">\r\n          <strong>No redeploy needed</strong>: the chart file does not change. Only the <em>data response</em> changes.\r\n        </div>\r\n        <div class=\"item\">\r\n          <strong>Observability</strong>: log refresh jobs, expose <em>last_updated</em> in your endpoint, surface it in the chart footer.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DIAGRAM 3: Roles & Responsibilities -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Architecture</small>\r\n      <h1>Who owns what? (Separation of concerns)</h1>\r\n      <p>Keep each responsibility focused for reliability</p>\r\n    </div>\r\n    <div class=\"body\">\r\n\r\n      <div class=\"lane\">\r\n        <div class=\"lane-title\">D) Responsibilities map</div>\r\n        <div class=\"flow\">\r\n          <div class=\"node\">\r\n            <div class=\"t\">Data Producers</div>\r\n            <div class=\"s\">Create/ingest records; ensure data quality at source</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Data Modelers</div>\r\n            <div class=\"s\">SQL views/matviews; schema versioning; business logic</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">API / Platform</div>\r\n            <div class=\"s\">Stable endpoints; auth; caching; pagination</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">D3 Visualization</div>\r\n            <div class=\"s\">Rendering logic; scales; accessibility; UX</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Ops / SRE</div>\r\n            <div class=\"s\">Monitoring, alerts, uptime, budgets</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <ul style=\"margin-top:12px;\">\r\n        <li><strong>Stable contract</strong>: the endpoint is a contract — fields, types, units. Backward‑compatible changes keep charts stable.</li>\r\n        <li><strong>Versioning</strong>: if you must break the contract, create <em>/v2</em> (charts adopt it when ready).</li>\r\n        <li><strong>Performance</strong>: pre‑aggregate in SQL; send only what the chart needs (filters, date windows).</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DIAGRAM 4: Deployment Topology -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Deployment</small>\r\n      <h1>Minimal topology for sustainable updates</h1>\r\n      <p>Decouple static front‑end from live data back‑end</p>\r\n    </div>\r\n    <div class=\"body\">\r\n\r\n      <div class=\"lane\">\r\n        <div class=\"lane-title\">E) Topology</div>\r\n        <div class=\"flow\">\r\n          <div class=\"node\">\r\n            <div class=\"t\">Static Hosting (CDN)</div>\r\n            <div class=\"s\">D3 assets cached globally • cheap & fast</div>\r\n          </div>\r\n          <div class=\"arrow\">⇄</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">API Gateway</div>\r\n            <div class=\"s\">HTTPS JSON/CSV • auth • rate limits • TTL</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">App/Service</div>\r\n            <div class=\"s\">Transforms & serves DB results (or direct SQL read‑only)</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">SQL Database</div>\r\n            <div class=\"s\">Tables • Views/MatViews • Indexes • Jobs</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <ul style=\"margin-top:12px;\">\r\n        <li><strong>Security</strong>: keep write access behind the API; D3 reads public, read‑only data.</li>\r\n        <li><strong>Latency</strong>: cache at the API and CDN; expose <em>ttl</em> policy; support query params for date range.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DIAGRAM 5: Reliability Checklist (No code) -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Checklist</small>\r\n      <h1>“Build once” sustainability checklist</h1>\r\n      <p>No code — just operating rules</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li>✔️ <strong>Endpoint contract</strong>: document field names, units, null policy, sort order.</li>\r\n        <li>✔️ <strong>Include metadata</strong>: <em>last_updated</em>, <em>source</em>, <em>window</em>, <em>version</em>.</li>\r\n        <li>✔️ <strong>Pre‑aggregate</strong>: give D3 chart <em>exactly</em> the granularity it needs.</li>\r\n        <li>✔️ <strong>Refresh strategy</strong>: cron for matviews; webhook on ingest; set CDN/API TTLs.</li>\r\n        <li>✔️ <strong>Backfill safe</strong>: re‑runs shouldn’t break; idempotent loaders; primary keys + constraints.</li>\r\n        <li>✔️ <strong>Observability</strong>: logs, error budgets, alerts on stale data or endpoint errors.</li>\r\n        <li>✔️ <strong>A11y & UX</strong>: fallback text for empty data; show “as of” timestamp; keyboard navigation.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "8c1e316d-9c9e-4fbf-8587-07ceb651eb87"
        },
        {
          "kind": "article",
          "order": 7,
          "title": "D3 Module — Conclusion & Where to Use It",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>D3 Module — Conclusion & Where to Use It</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #ffffff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Grid cards === */\r\n.quick-grid {\r\n  display: grid; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));\r\n  gap: 14px; margin: 12px 0 4px;\r\n}\r\n.quick-grid .box {\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #ffffff; color: #555;\r\n}\r\n.quick-grid .box > div { font-weight: 700; margin-bottom: 6px; color: #000000; }\r\n\r\n/* === Pill roadmap === */\r\n.roadmap-label { margin: 16px 0 6px; font-weight: 700; color: #000000; }\r\n.roadmap { display: flex; flex-wrap: wrap; gap: 8px; }\r\n.roadmap span {\r\n  padding: 6px 10px; border: 1px solid #A3A3A3; border-radius: 999px;\r\n  background: #BDBDBD; color: #000000; font-size: 14px;\r\n}\r\n\r\n/* === Inline code chip (uses #BDBDBD as requested) === */\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- CONCLUSION SUMMARY -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Conclusion</small>\r\n      <h1>D3.js: Build Once, Tell Better Stories with Your Data</h1>\r\n      <p>From statistics‑first thinking to sustainable, auto‑updating visuals</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        In this module you learned to treat visualization as a <strong>pipeline</strong>, not a one‑off graphic. You:\r\n      </p>\r\n      <ul>\r\n        <li>Applied <strong>robust statistics</strong> (percentiles, rolling means, baseline comparisons) to make honest scales and color domains.</li>\r\n        <li>Built <strong>calendar heatmaps</strong> in multiple statistical “views” to answer different business questions from the same data.</li>\r\n        <li>Separated concerns: <strong>SQL → API/feed → D3</strong>, so charts are compiled once and <em>update themselves</em> as new data arrives.</li>\r\n      </ul>\r\n      <p>\r\n        The result is a sustainable system: D3 handles <em>custom, high‑fidelity visuals</em>, while your data backend (SQL/ETL) keeps feeding the latest truth.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHAT DATA CAN D3 VISUALIZE -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Scope</small>\r\n      <h1>What kinds of data can D3 visualize?</h1>\r\n      <p>Almost anything you can put into arrays, objects, and coordinates</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <div>Time Series</div>\r\n          Regular or irregular timestamps: sales, sensor readings, web traffic, energy use. Patterns: line/area charts, multi‑series, rolling trends, calendar grids, anomaly markers.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Categorical & Numerical</div>\r\n          Counts, rates, distributions, ranks. Patterns: bars, stacked bars, dot plots, box/violin, ridgelines, beeswarms.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Geospatial</div>\r\n          Points, polygons, raster tiles. Patterns: choropleths, dot/heat maps, hex bins, flow maps, tiled/zoomable maps.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Networks & Hierarchies</div>\r\n          Entities + relationships, taxonomies, org charts. Patterns: node‑link, chord diagrams, sankey, sunburst, treemap, edge bundling.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Text‑Derived</div>\r\n          Token counts, topics, sentiment timelines. Patterns: annotated timelines, matrices, clustered scatter, word‑related layouts (when meaningful).\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Event/Log Data</div>\r\n          Clickstreams, operations, incidents. Patterns: timelines, swimlanes, calendar heatmaps, small‑multiples.\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:10px;\">\r\n        D3 is a <em>low‑level visualization toolkit</em>: it binds data to DOM/SVG/Canvas and gives you fine control over scales, projections, transitions, and interaction.\r\n        That flexibility makes it ideal for custom visuals and storytelling beyond template dashboards.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHO BENEFITS / FIELDS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Fit</small>\r\n      <h1>Who is D3 especially good for?</h1>\r\n      <p>Teams that need custom visuals, high control, and narrative interaction</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <div>Businesses</div>\r\n          <ul>\r\n            <li><strong>Finance & Fintech:</strong> time‑series, risk, intraday views, order flow.</li>\r\n            <li><strong>Retail & E‑commerce:</strong> funnels, cohorts, geospatial demand, product mix.</li>\r\n            <li><strong>SaaS & Growth:</strong> activation, retention, A/B results, feature usage maps.</li>\r\n            <li><strong>Operations & Supply Chain:</strong> SLAs, logistics flows, capacity calendars.</li>\r\n            <li><strong>Energy & Utilities:</strong> load curves, outages, geospatial assets, ATES/UTES performance.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Expertise & Roles</div>\r\n          <ul>\r\n            <li><strong>Data Scientists / Analysts:</strong> bespoke analyses with statistical nuance.</li>\r\n            <li><strong>Data/BI Engineers:</strong> custom front‑ends on top of lakes/warehouses.</li>\r\n            <li><strong>Designers / Data Journalists:</strong> narrative, scrollytelling, explainers.</li>\r\n            <li><strong>GIS / Earth Sciences:</strong> maps, cross‑sections, geology/groundwater models.</li>\r\n            <li><strong>Research & Academia:</strong> experimental results, interactive figures.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Fields & Domains</div>\r\n          <ul>\r\n            <li><strong>Healthcare:</strong> outcomes over time, patient flows (de‑identified).</li>\r\n            <li><strong>Manufacturing:</strong> SPC charts, downtime analysis, sensor telemetry.</li>\r\n            <li><strong>Climate & Environment:</strong> weather, hydrology, emissions geospatial layers.</li>\r\n            <li><strong>Education:</strong> learning analytics, curriculum maps, cohort trends.</li>\r\n            <li><strong>Public Policy:</strong> open data portals, regional indicators, demographics.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:10px;\">\r\n        If you only need standard charts fast, consider higher‑level libraries (Altair/Vega‑Lite, Plotly, ECharts). When you need\r\n        <strong>pixel‑level control, bespoke interaction, or narrative polish</strong>, D3 is the right tool.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- CHOOSING PATTERNS / WHEN TO USE WHAT -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Patterns</small>\r\n      <h1>Choose the right pattern for the question</h1>\r\n      <p>Match data type → visual grammar → statistical treatment</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <div>Time series → Trends / Anomalies</div>\r\n          Line/area + <code class=\"inline\">rolling mean</code> + <code class=\"inline\">z‑outliers</code>; calendar heatmaps for daily rhythm; small‑multiples for comparisons.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Distribution → Range / Skew</div>\r\n          Histograms (IQR‑based bins), box/violin; clip axes to <code class=\"inline\">[P5,P95]</code> to avoid outlier bias.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Part‑to‑whole → Composition</div>\r\n          Stacked bars, treemap/sunburst; annotate totals and % share; avoid 3D or exploded pies.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Geospatial → Where & density</div>\r\n          Choropleth for rates, dot/hex bins for counts, flows for movement; always include a scale/legend.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Relationships → Structure</div>\r\n          Node‑link, sankey, chord, edge bundling; tooltips and highlighting to reduce clutter.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Text → Evolution</div>\r\n          Topic timelines, matrices, concept networks; use <code class=\"inline\">percentiles</code> for color and avoid raw count skew.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- NEXT STEPS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Next</small>\r\n      <h1>Where to go from here</h1>\r\n      <p>Turn one dataset into a living, auto‑updating story</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"roadmap-label\">Action plan</div>\r\n      <div class=\"roadmap\">\r\n        <span>Pick a KPI or dataset</span>\r\n        <span>Define the question</span>\r\n        <span>Choose a statistical view</span>\r\n        <span>Expose a stable JSON/CSV feed</span>\r\n        <span>Build one D3 chart</span>\r\n        <span>Deploy static + set TTL</span>\r\n        <span>Instrument & annotate “as of”</span>\r\n      </div>\r\n      <p style=\"margin-top:10px;\">\r\n        Use D3 when the <strong>story matters</strong> and off‑the‑shelf visuals aren’t enough. Keep your chart code stable; keep your data fresh.\r\n        That’s how you get visuals that earn trust and drive decisions.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "afd8ace8-711e-4375-847d-25d2c2e8787c"
        }
      ]
    },
    {
      "order": 7,
      "title": "Module 7: Machine Learning Prediction",
      "lessons": [
        {
          "kind": "article",
          "order": 1,
          "title": "Machine Learning Prediction — Supervised & Unsupervised",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Unsupervised ML — Stable Clustering App (K‑Means, Agglo, DBSCAN, GMM)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n*{box-sizing:border-box;word-wrap:break-word;overflow-wrap:break-word}\r\nbody{font:16px/1.55 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#555;margin:0;background:#fff}\r\nimg{max-width:100%;height:auto;display:block;border-radius:10px}\r\n\r\n/* === Page wrap === */\r\n.wrap{max-width:1080px;margin:0 auto;padding:18px}\r\n\r\n/* === Card container === */\r\n.section-card{\r\n  border:1px solid #EBEBEB;border-radius:14px;overflow:hidden;\r\n  box-shadow:0 1px 2px rgba(0,0,0,.04);margin-bottom:24px;background:#ffffff\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner{\r\n  background:linear-gradient(120deg,#555555,#000000);\r\n  color:#FFFFFF;padding:18px 20px\r\n}\r\n.section-card .banner small{\r\n  font-size:12px;letter-spacing:.08em;opacity:.9;text-transform:uppercase;color:#FFFFFF\r\n}\r\n.section-card .banner h1{\r\n  margin:6px 0 4px;font-size:26px;line-height:1.2;color:#FFFFFF\r\n}\r\n.section-card .banner p{margin:0;opacity:.95;color:#FFFFFF}\r\n\r\n/* === Body === */\r\n.section-card .body{padding:20px}\r\n.section-card p,.section-card li{font-size:16px;margin-top:0;color:#555}\r\n\r\n/* === Inline chips & pills (use #BDBDBD as requested) === */\r\n.pill{display:inline-block;padding:4px 10px;border:1px solid #A3A3A3;border-radius:999px;background:#BDBDBD;color:#000;font-size:12px;font-weight:700}\r\ncode.inline{background:#BDBDBD;padding:2px 6px;border-radius:4px}\r\n\r\n/* === Side-by-side grids === */\r\n.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:14px}\r\n.box{border:1px solid #EBEBEB;border-radius:10px;background:#fff;padding:14px}\r\n.box h3{margin:0 0 8px;color:#000;font-size:18px}\r\n\r\n/* === Code blocks === */\r\npre{margin:0}\r\npre code{\r\n  display:block;white-space:pre;overflow:auto;padding:14px;border-radius:10px;\r\n  border:1px solid #EBEBEB;background:#fafafa;color:#222;font-family:ui-monospace,SFMono-Regular,Menlo,Consolas,monospace;font-size:14px\r\n}\r\n\r\n/* === Figure / caption === */\r\n.figure{margin-top:10px}\r\n.figcap{font-size:13px;color:#777;margin-top:6px}\r\n\r\n/* === Footer === */\r\n.footer-note{font-size:13px;color:#777;text-align:center;margin:30px 0 10px}\r\na{color:#000;text-decoration:underline}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Machine Learning Prediction</small>\r\n      <h1>Unsupervised Clustering — Bullet‑Proof Streamlit App</h1>\r\n      <p>Explore segments & anomalies with <strong>K‑Means</strong>, <strong>Agglomerative</strong>, <strong>DBSCAN</strong>, and <strong>Gaussian Mixture</strong> — built to avoid crashes and keep your session alive.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        <span class=\"pill\">No labels required</span> Unsupervised learning discovers structure in your data when you don’t have a target column.\r\n        Typical outcomes: <em>customer segments</em>, <em>device cohorts</em>, <em>behavior patterns</em>, and <em>anomaly candidates</em>.\r\n      </p>\r\n      <div class=\"grid\" style=\"margin-top:8px\">\r\n        <div class=\"box\">\r\n          <h3>Algorithms (when to use)</h3>\r\n          <ul>\r\n            <li><strong>K‑Means</strong> — compact, spherical clusters; fast; requires <code class=\"inline\">k</code>.</li>\r\n            <li><strong>Agglomerative</strong> — hierarchical grouping; different <em>linkage</em> styles.</li>\r\n            <li><strong>DBSCAN</strong> — arbitrary shapes; flags noise (<code class=\"inline\">label = -1</code>); no need to set <code class=\"inline\">k</code>.</li>\r\n            <li><strong>Gaussian Mixture</strong> — soft clustering (probabilities); ellipsoidal shapes.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Quality metrics</h3>\r\n          <ul>\r\n            <li><strong>Silhouette</strong> (↑ better separation)</li>\r\n            <li><strong>Davies–Bouldin</strong> (↓ tighter clusters)</li>\r\n            <li><strong>Calinski–Harabasz</strong> (↑ well‑defined clusters)</li>\r\n          </ul>\r\n          <p style=\"margin-top:6px\">The app computes metrics safely and skips invalid cases (e.g., single cluster or all noise).</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Dataset</h3>\r\n          <p>Use the sample bank operations dataset (daily visits + features):</p>\r\n          <p><a href=\"https://github.com/AIforimpact22/learningexamples/blob/main/bank_visits_complete_2024.csv\" target=\"_blank\" rel=\"noopener\">bank_visits_complete_2024.csv</a></p>\r\n          <p>Pick multiple columns (numeric/categorical). If you include a <code class=\"inline\">date</code> column, the app converts it to an ordinal feature automatically.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- OUTCOME SNAPSHOT -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Outcome</small>\r\n      <h1>Example Clustering Result (PCA scatter)</h1>\r\n      <p>Colored points = discovered clusters; use this to sanity‑check separation</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"figure\">\r\n        <a href=\"https://i.imgur.com/8lUwQhO.png\" target=\"_blank\" rel=\"noopener\">\r\n          <img src=\"https://i.imgur.com/8lUwQhO.png\" alt=\"Example clustering outcome: PCA scatter colored by cluster\" />\r\n        </a>\r\n        <div class=\"figcap\">\r\n          A quick visual inspection helps validate cluster separation and spot outliers/noise before you act on segments.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- THE APP: CODE -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Code</small>\r\n      <h1>1) Save as <code class=\"inline\">app.py</code></h1>\r\n      <p>Stable, defensive Streamlit app (handles edge cases & keeps UI responsive)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre><code># app.py\r\nimport os\r\nimport time\r\nimport numpy as np\r\nimport pandas as pd\r\nimport streamlit as st\r\n\r\n# Try Plotly; fall back to Streamlit's built-in chart if not available\r\ntry:\r\n    import plotly.express as px\r\n    HAS_PLOTLY = True\r\nexcept Exception:\r\n    HAS_PLOTLY = False\r\n\r\nfrom typing import List, Tuple\r\n\r\nfrom sklearn.compose import ColumnTransformer\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler, MinMaxScaler\r\nfrom sklearn.impute import SimpleImputer\r\nfrom sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering\r\nfrom sklearn.mixture import GaussianMixture\r\nfrom sklearn.decomposition import PCA\r\nfrom sklearn.metrics import silhouette_score, davies_bouldin_score, calinski_harabasz_score\r\n\r\nst.set_page_config(page_title=\"Unsupervised Clustering\", layout=\"wide\")\r\nDEFAULT_SAVE_DIR = r\"C:\\Users\\sourc\\OneDrive\\Desktop\\Python\\Erbil Air Polution\"\r\n\r\n# ----------------- Session State (no auto-blank after click) -----------------\r\nif \"run_clicked\" not in st.session_state:\r\n    st.session_state.run_clicked = False\r\nif \"df_cache\" not in st.session_state:\r\n    st.session_state.df_cache = None\r\n\r\n# ------------------------------- Utilities -----------------------------------\r\ndef safe_read_csv(file_or_path) -> pd.DataFrame:\r\n    df = pd.read_csv(file_or_path)\r\n    return df\r\n\r\ndef coerce_selected_features(df: pd.DataFrame, selected: List[str]) -> Tuple[pd.DataFrame, List[str], List[str]]:\r\n    \"\"\"Convert 'date' to ordinal; attempt numeric coercion; split num vs cat.\"\"\"\r\n    df = df.copy()\r\n    sel = selected.copy()\r\n\r\n    if \"date\" in sel and \"date\" in df.columns:\r\n        df[\"date\"] = pd.to_datetime(df[\"date\"], errors=\"coerce\")\r\n        df[\"date_ordinal\"] = df[\"date\"].map(lambda x: x.toordinal() if pd.notnull(x) else np.nan)\r\n        sel = [\"date_ordinal\" if c == \"date\" else c for c in sel]\r\n\r\n    # Try numeric conversion where possible (without breaking true categorical)\r\n    for c in sel:\r\n        if c in df.columns and df[c].dtype == \"object\":\r\n            try:\r\n                sample = df[c].dropna().astype(str).head(50)\r\n                numeric_like = sample.str.match(r\"^-?\\d+(\\.\\d+)?$\").mean() >= 0.7\r\n            except Exception:\r\n                numeric_like = False\r\n            if numeric_like:\r\n                df[c] = pd.to_numeric(df[c], errors=\"coerce\")\r\n\r\n    num_cols = df[sel].select_dtypes(include=[np.number]).columns.tolist()\r\n    cat_cols = [c for c in sel if c not in num_cols]\r\n    return df, num_cols, cat_cols\r\n\r\ndef make_preprocessor(num_cols, cat_cols, impute_strategy=\"median\", scaler=\"StandardScaler\"):\r\n    num_steps = [(\"imputer\", SimpleImputer(strategy=impute_strategy))]\r\n    if scaler == \"StandardScaler\":\r\n        num_steps.append((\"scaler\", StandardScaler()))\r\n    elif scaler == \"MinMaxScaler\":\r\n        num_steps.append((\"scaler\", MinMaxScaler()))\r\n\r\n    num_pipe = Pipeline(steps=num_steps)\r\n    cat_pipe = Pipeline(steps=[\r\n        (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\r\n        (\"onehot\", OneHotEncoder(handle_unknown=\"ignore\"))\r\n    ])\r\n\r\n    pre = ColumnTransformer(\r\n        transformers=[\r\n            (\"num\", num_pipe, num_cols),\r\n            (\"cat\", cat_pipe, cat_cols)\r\n        ],\r\n        remainder=\"drop\",\r\n        sparse_threshold=0.0  # force dense for PCA\r\n    )\r\n    return pre\r\n\r\ndef fit_cluster(X, algo, params, random_state=42):\r\n    if algo == \"KMeans\":\r\n        model = KMeans(n_clusters=int(params[\"n_clusters\"]), n_init=10, random_state=random_state)\r\n        labels = model.fit_predict(X)\r\n    elif algo == \"Agglomerative\":\r\n        n_clusters = int(params[\"n_clusters\"])\r\n        linkage = params[\"linkage\"]\r\n        try:\r\n            model = AgglomerativeClustering(n_clusters=n_clusters, linkage=linkage, metric=\"euclidean\")\r\n        except TypeError:\r\n            model = AgglomerativeClustering(n_clusters=n_clusters, linkage=linkage, affinity=\"euclidean\")\r\n        labels = model.fit_predict(X)\r\n    elif algo == \"DBSCAN\":\r\n        model = DBSCAN(eps=float(params[\"eps\"]), min_samples=int(params[\"min_samples\"]), metric=\"euclidean\")\r\n        labels = model.fit_predict(X)\r\n    elif algo == \"GaussianMixture\":\r\n        model = GaussianMixture(\r\n            n_components=int(params[\"n_components\"]),\r\n            covariance_type=params[\"covariance_type\"],\r\n            random_state=random_state\r\n        )\r\n        model.fit(X)\r\n        labels = model.predict(X)\r\n    else:\r\n        raise ValueError(\"Unknown algorithm\")\r\n    return model, labels\r\n\r\ndef compute_metrics(X, labels, algo_name):\r\n    labels = np.asarray(labels)\r\n    metrics = {}\r\n    uniq = set(labels.tolist())\r\n    if algo_name == \"DBSCAN\":\r\n        core_labels = [l for l in uniq if l != -1]\r\n        n_clusters = len(core_labels)\r\n        metrics[\"n_clusters\"] = n_clusters\r\n        mask = labels != -1\r\n        X_eval = X[mask]\r\n        labels_eval = labels[mask]\r\n    else:\r\n        n_clusters = len(uniq)\r\n        metrics[\"n_clusters\"] = n_clusters\r\n        X_eval, labels_eval = X, labels\r\n\r\n    def safe_metric(func):\r\n        try:\r\n            if n_clusters >= 2 and len(np.unique(labels_eval)) >= 2 and len(labels_eval) >= 10:\r\n                return float(func(X_eval, labels_eval))\r\n            return None\r\n        except Exception:\r\n            return None\r\n\r\n    metrics[\"silhouette\"] = safe_metric(silhouette_score)\r\n    metrics[\"davies_bouldin\"] = safe_metric(davies_bouldin_score)\r\n    metrics[\"calinski_harabasz\"] = safe_metric(calinski_harabasz_score)\r\n    return metrics\r\n\r\ndef pca_embedding(X, dims=2, random_state=42):\r\n    n_features = X.shape[1]\r\n    n_comp = min(dims, n_features if n_features > 0 else 1)\r\n    pca = PCA(n_components=n_comp, random_state=random_state)\r\n    emb = pca.fit_transform(X)\r\n    cols = [\"x\",\"y\"] if n_comp == 2 else [\"x\",\"y\",\"z\"][:n_comp]\r\n    return pd.DataFrame(emb, columns=cols)\r\n\r\ndef cluster_profiles(df: pd.DataFrame, labels, sel_cols, num_cols, cat_cols):\r\n    out = df.copy()\r\n    out[\"cluster\"] = labels\r\n    grp = out.groupby(\"cluster\", dropna=False)\r\n    num_means = grp[num_cols].mean(numeric_only=True).round(3) if num_cols else pd.DataFrame()\r\n\r\n    top_cats = []\r\n    for c in cat_cols:\r\n        try:\r\n            mode_series = grp[c].agg(lambda s: s.mode().iloc[0] if s.dropna().size else np.nan)\r\n            top_cats.append(mode_series.rename(c))\r\n        except Exception:\r\n            pass\r\n    top_cats = pd.concat(top_cats, axis=1) if top_cats else pd.DataFrame()\r\n    sizes = out[\"cluster\"].value_counts(dropna=False).rename_axis(\"cluster\").reset_index(name=\"count\")\r\n    return out, sizes, num_means, top_cats\r\n\r\n# -------------------------------- UI: Load Data --------------------------------\r\nst.title(\"🏦 Unsupervised Clustering (Multiple Columns) — Stable Build\")\r\n\r\nst.sidebar.header(\"1) Load Data\")\r\nuploaded = st.sidebar.file_uploader(\"Upload CSV\", type=[\"csv\"], help=\"Or use the file path below.\")\r\ndefault_path = os.path.join(DEFAULT_SAVE_DIR, \"bank_visits_complete_2024.csv\")\r\npath_text = st.sidebar.text_input(\"CSV file path\", value=default_path)\r\nload_clicked = st.sidebar.button(\"Load\")\r\n\r\ndf = st.session_state.df_cache\r\nload_msg = st.empty()\r\n\r\nif load_clicked or (df is None and os.path.exists(path_text)):\r\n    try:\r\n        if uploaded is not None:\r\n            df = safe_read_csv(uploaded)\r\n        else:\r\n            df = safe_read_csv(path_text)\r\n        st.session_state.df_cache = df\r\n        load_msg.success(f\"Loaded data: {df.shape[0]} rows × {df.shape[1]} columns\")\r\n    except Exception as e:\r\n        load_msg.error(f\"Failed to load CSV: {e}\")\r\n        df = None\r\n\r\nif df is None:\r\n    st.info(\"📄 Upload a CSV or enter a valid file path, then click **Load**.\")\r\nelse:\r\n    st.subheader(\"Preview\")\r\n    st.dataframe(df.head(20), use_container_width=True)\r\n\r\n# ------------------------------ Feature Selection ------------------------------\r\nif df is not None:\r\n    st.sidebar.header(\"2) Select Features\")\r\n    all_cols = df.columns.tolist()\r\n    recommended = [\r\n        \"is_weekend\",\"is_holiday\",\"branch_open_hours\",\"staff_on_duty\",\"is_payday\",\r\n        \"marketing_campaign\",\"promo_strength\",\"atm_outage\",\"temp_c\",\"rain_mm\",\"aqi\",\"dust_event\",\r\n        \"total_visit\",\"teller_visits\",\"atm_visits\",\"service_visits\",\"transactions_total\",\r\n        \"avg_wait_time_min\",\"new_accounts_opened\",\"loan_inquiries\",\"complaints\",\r\n        \"cash_deposits\",\"cash_withdrawals\",\"fx_transactions\"\r\n    ]\r\n    default_sel = [c for c in recommended if c in all_cols] or df.select_dtypes(include=[np.number]).columns.tolist()\r\n    selected = st.sidebar.multiselect(\"Columns to use\", options=all_cols, default=default_sel)\r\n\r\n    st.sidebar.header(\"3) Preprocessing\")\r\n    impute_strategy = st.sidebar.selectbox(\"Numeric imputation\", [\"median\",\"mean\"], index=0)\r\n    scaler_choice = st.sidebar.selectbox(\"Scaling\", [\"StandardScaler\",\"MinMaxScaler\",\"None\"], index=0)\r\n\r\n    st.sidebar.header(\"4) Algorithm\")\r\n    algo = st.sidebar.selectbox(\"Method\", [\"KMeans\",\"Agglomerative\",\"DBSCAN\",\"GaussianMixture\"], index=0)\r\n\r\n    params = {}\r\n    if algo in (\"KMeans\",\"Agglomerative\"):\r\n        params[\"n_clusters\"] = st.sidebar.slider(\"n_clusters\", 2, 20, 5, 1)\r\n        if algo == \"Agglomerative\":\r\n            params[\"linkage\"] = st.sidebar.selectbox(\"linkage\", [\"ward\",\"complete\",\"average\",\"single\"], index=0)\r\n    elif algo == \"DBSCAN\":\r\n        params[\"eps\"] = st.sidebar.slider(\"eps\", 0.1, 10.0, 1.5, 0.1)\r\n        params[\"min_samples\"] = st.sidebar.slider(\"min_samples\", 2, 50, 5, 1)\r\n    elif algo == \"GaussianMixture\":\r\n        params[\"n_components\"] = st.sidebar.slider(\"n_components\", 2, 20, 5, 1)\r\n        params[\"covariance_type\"] = st.sidebar.selectbox(\"covariance_type\", [\"full\",\"diag\",\"tied\",\"spherical\"], index=0)\r\n\r\n    st.sidebar.header(\"5) Run\")\r\n    seed = st.sidebar.number_input(\"Random seed\", min_value=0, value=42, step=1)\r\n    if st.sidebar.button(\"Run Clustering\"):\r\n        st.session_state.run_clicked = True\r\n\r\n    # ------------------------------- Run Block --------------------------------\r\n    if st.session_state.run_clicked:\r\n        if not selected:\r\n            st.error(\"Please select at least one column.\")\r\n        else:\r\n            try:\r\n                with st.spinner(\"Running clustering...\"):\r\n                    df_proc, num_cols, cat_cols = coerce_selected_features(df, selected)\r\n                    pre = make_preprocessor(num_cols, cat_cols, impute_strategy=impute_strategy, scaler=scaler_choice if scaler_choice!=\"None\" else None)\r\n                    X = pre.fit_transform(df_proc[num_cols + cat_cols])\r\n                    model, labels = fit_cluster(X, algo, params, random_state=int(seed))\r\n                    metrics = compute_metrics(X, labels, algo)\r\n                    dims = 3 if HAS_PLOTLY else 2\r\n                    try:\r\n                        emb_df = pca_embedding(X, dims=dims, random_state=int(seed))\r\n                    except Exception:\r\n                        emb_df = pca_embedding(X, dims=2, random_state=int(seed))\r\n                    df_labeled, sizes, num_means, top_cats = cluster_profiles(df_proc, labels, selected, num_cols, cat_cols)\r\n\r\n                m1,m2,m3,m4 = st.columns(4)\r\n                m1.metric(\"Clusters\", metrics.get(\"n_clusters\", None))\r\n                m2.metric(\"Silhouette\", f\"{metrics['silhouette']:.3f}\" if metrics.get(\"silhouette\") is not None else \"—\")\r\n                m3.metric(\"Davies–Bouldin ↓\", f\"{metrics['davies_bouldin']:.3f}\" if metrics.get(\"davies_bouldin\") is not None else \"—\")\r\n                m4.metric(\"Calinski–Harabasz ↑\", f\"{metrics['calinski_harabasz']:.1f}\" if metrics.get(\"calinski_harabasz\") is not None else \"—\")\r\n\r\n                st.subheader(\"Cluster Sizes\")\r\n                st.dataframe(sizes, use_container_width=True)\r\n\r\n                st.subheader(\"Visualization (PCA)\")\r\n                plot_df = emb_df.copy()\r\n                plot_df[\"cluster\"] = labels.astype(str)\r\n                if HAS_PLOTLY and plot_df.shape[1]==3:\r\n                    fig = px.scatter_3d(plot_df, x=\"x\", y=\"y\", z=\"z\", color=\"cluster\", opacity=0.85, title=f\"{algo} Clusters (PCA 3D)\")\r\n                    st.plotly_chart(fig, use_container_width=True)\r\n                elif HAS_PLOTLY:\r\n                    fig = px.scatter(plot_df, x=\"x\", y=\"y\", color=\"cluster\", opacity=0.9, title=f\"{algo} Clusters (PCA 2D)\")\r\n                    st.plotly_chart(fig, use_container_width=True)\r\n                else:\r\n                    st.caption(\"Plotly not found. Showing basic 2D chart.\")\r\n                    st.scatter_chart(plot_df, x=\"x\", y=\"y\", color=\"cluster\")\r\n\r\n                st.subheader(\"Cluster Profiles\")\r\n                if not num_means.empty:\r\n                    st.write(\"**Numeric means by cluster**\")\r\n                    st.dataframe(num_means, use_container_width=True)\r\n                if not top_cats.empty:\r\n                    st.write(\"**Top categorical values by cluster**\")\r\n                    st.dataframe(top_cats, use_container_width=True)\r\n\r\n                st.subheader(\"Labeled Data (first 200 rows)\")\r\n                st.dataframe(df_labeled.assign(cluster=labels).head(200), use_container_width=True)\r\n\r\n                st.subheader(\"Export\")\r\n                os.makedirs(DEFAULT_SAVE_DIR, exist_ok=True)\r\n                default_out = os.path.join(DEFAULT_SAVE_DIR, f\"clustered_{algo}_{int(time.time())}.csv\")\r\n                save_path = st.text_input(\"Save path\", value=default_out, key=\"savepath_input\")\r\n                col_a, col_b = st.columns([0.4,0.6])\r\n                with col_a:\r\n                    if st.button(\"Save CSV to Disk\"):\r\n                        try:\r\n                            df_labeled.assign(cluster=labels).to_csv(save_path, index=False, encoding=\"utf-8\")\r\n                            st.success(f\"Saved: {save_path}\")\r\n                        except Exception as e:\r\n                            st.error(f\"Save failed: {e}\")\r\n                with col_b:\r\n                    st.download_button(\r\n                        \"Download labeled CSV\",\r\n                        data=df_labeled.assign(cluster=labels).to_csv(index=False).encode(\"utf-8\"),\r\n                        file_name=os.path.basename(save_path),\r\n                        mime=\"text/csv\"\r\n                    )\r\n\r\n            except Exception as e:\r\n                st.error(f\"Clustering failed: {e}\")\r\n\r\n    if st.sidebar.button(\"Reset\"):\r\n        st.session_state.run_clicked = False\r\n        st.experimental_rerun()\r\n</code></pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- REQUIREMENTS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Deps</small>\r\n      <h1>2) <code class=\"inline\">requirements.txt</code></h1>\r\n      <p>Plotly is optional (app will fall back to basic charts)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre><code>streamlit\r\npandas\r\nnumpy\r\nscikit-learn\r\n# plotly   <-- optional (uncomment if you want Plotly charts)\r\n</code></pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- HOW TO RUN -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Run</small>\r\n      <h1>3) Launch the app</h1>\r\n      <p>Windows / PowerShell example</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre><code># In the folder with app.py and requirements.txt\r\npython -m venv .venv\r\n.\\.venv\\Scripts\\Activate.ps1\r\npip install -r requirements.txt\r\n\r\n# (Optional) For nicer charts\r\npip install plotly\r\n\r\n# Launch\r\nstreamlit run app.py\r\n</code></pre>\r\n      <p style=\"margin-top:10px\">\r\n        The app defaults to saving labeled files in:\r\n        <code class=\"inline\">C:\\Users\\sourc\\OneDrive\\Desktop\\Python\\Erbil Air Polution</code>.\r\n        If you’re on macOS/Linux or Codespaces, change <code class=\"inline\">DEFAULT_SAVE_DIR</code> near the top of <code class=\"inline\">app.py</code>.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHY THIS IS STABLE -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Reliability</small>\r\n      <h1>Why this build doesn’t “kick you out”</h1>\r\n      <p>Defensive patterns throughout the pipeline</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li>No <code class=\"inline\">st.stop()</code> — UI stays mounted after Run.</li>\r\n        <li>All heavy steps are wrapped in <code class=\"inline\">try/except</code> with clear messages.</li>\r\n        <li>Automatic handling of <em>date</em> → ordinal, numeric coercion for “number‑like” strings, and robust missing‑value imputation.</li>\r\n        <li><strong>ColumnTransformer</strong> with One‑Hot + scaling returns dense matrices (PCA‑safe across versions).</li>\r\n        <li>Metrics computed only when valid (e.g., DBSCAN’s noise points excluded).</li>\r\n        <li>Optional Plotly; falls back to Streamlit chart if Plotly isn’t installed.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DATA EXAMPLES -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Data</small>\r\n      <h1>What to feed the model?</h1>\r\n      <p>Examples that cluster well</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Bank operations (daily)</h3>\r\n          <p>Visits, transactions, staffing, weather, promo flags, holidays.</p>\r\n          <p>Find traffic patterns, promotional lift cohorts, anomaly days.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Sensors & IoT</h3>\r\n          <p>Pressure/temperature series, derived rates & rolling stats.</p>\r\n          <p>Detect device cohorts and early fault signatures.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Customer usage</h3>\r\n          <p>Clicks, session lengths, features used, NPS, support contact.</p>\r\n          <p>Define product personas and tailor onboarding.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Text embeddings</h3>\r\n          <p>Ticket titles or reviews encoded to vectors.</p>\r\n          <p>Find topic clusters and route intelligently.</p>\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:8px\">\r\n        Start with the provided dataset:\r\n        <a href=\"https://github.com/AIforimpact22/learningexamples/blob/main/bank_visits_complete_2024.csv\" target=\"_blank\" rel=\"noopener\">bank_visits_complete_2024.csv</a>.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">© <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span></div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now=new Date();\r\n  document.getElementById('y').textContent=now.getFullYear();\r\n  document.getElementById('d').textContent=now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "fe27719c-c928-493f-a956-cbe2a1bcd2c6"
        },
        {
          "kind": "article",
          "order": 2,
          "title": "Unsupervised ML",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Unsupervised ML — Stable Clustering App (K‑Means, Agglo, DBSCAN, GMM)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n*{box-sizing:border-box;word-wrap:break-word;overflow-wrap:break-word}\r\nbody{font:16px/1.55 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#555;margin:0;background:#fff}\r\nimg{max-width:100%;height:auto;display:block;border-radius:10px}\r\n\r\n/* === Page wrap === */\r\n.wrap{max-width:1080px;margin:0 auto;padding:18px}\r\n\r\n/* === Card container === */\r\n.section-card{\r\n  border:1px solid #EBEBEB;border-radius:14px;overflow:hidden;\r\n  box-shadow:0 1px 2px rgba(0,0,0,.04);margin-bottom:24px;background:#ffffff\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner{\r\n  background:linear-gradient(120deg,#555555,#000000);\r\n  color:#FFFFFF;padding:18px 20px\r\n}\r\n.section-card .banner small{\r\n  font-size:12px;letter-spacing:.08em;opacity:.9;text-transform:uppercase;color:#FFFFFF\r\n}\r\n.section-card .banner h1{\r\n  margin:6px 0 4px;font-size:26px;line-height:1.2;color:#FFFFFF\r\n}\r\n.section-card .banner p{margin:0;opacity:.95;color:#FFFFFF}\r\n\r\n/* === Body === */\r\n.section-card .body{padding:20px}\r\n.section-card p,.section-card li{font-size:16px;margin-top:0;color:#555}\r\n\r\n/* === Inline chips & pills (use #BDBDBD as requested) === */\r\n.pill{display:inline-block;padding:4px 10px;border:1px solid #A3A3A3;border-radius:999px;background:#BDBDBD;color:#000;font-size:12px;font-weight:700}\r\ncode.inline{background:#BDBDBD;padding:2px 6px;border-radius:4px}\r\n\r\n/* === Side-by-side grids === */\r\n.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:14px}\r\n.box{border:1px solid #EBEBEB;border-radius:10px;background:#fff;padding:14px}\r\n.box h3{margin:0 0 8px;color:#000;font-size:18px}\r\n\r\n/* === Code blocks === */\r\npre{margin:0}\r\npre code{\r\n  display:block;white-space:pre;overflow:auto;padding:14px;border-radius:10px;\r\n  border:1px solid #EBEBEB;background:#fafafa;color:#222;font-family:ui-monospace,SFMono-Regular,Menlo,Consolas,monospace;font-size:14px\r\n}\r\n\r\n/* === Figure / caption === */\r\n.figure{margin-top:10px}\r\n.figcap{font-size:13px;color:#777;margin-top:6px}\r\n\r\n/* === Footer === */\r\n.footer-note{font-size:13px;color:#777;text-align:center;margin:30px 0 10px}\r\na{color:#000;text-decoration:underline}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Machine Learning Prediction</small>\r\n      <h1>Unsupervised Clustering — Bullet‑Proof Streamlit App</h1>\r\n      <p>Explore segments & anomalies with <strong>K‑Means</strong>, <strong>Agglomerative</strong>, <strong>DBSCAN</strong>, and <strong>Gaussian Mixture</strong> — built to avoid crashes and keep your session alive.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        <span class=\"pill\">No labels required</span> Unsupervised learning discovers structure in your data when you don’t have a target column.\r\n        Typical outcomes: <em>customer segments</em>, <em>device cohorts</em>, <em>behavior patterns</em>, and <em>anomaly candidates</em>.\r\n      </p>\r\n      <div class=\"grid\" style=\"margin-top:8px\">\r\n        <div class=\"box\">\r\n          <h3>Algorithms (when to use)</h3>\r\n          <ul>\r\n            <li><strong>K‑Means</strong> — compact, spherical clusters; fast; requires <code class=\"inline\">k</code>.</li>\r\n            <li><strong>Agglomerative</strong> — hierarchical grouping; different <em>linkage</em> styles.</li>\r\n            <li><strong>DBSCAN</strong> — arbitrary shapes; flags noise (<code class=\"inline\">label = -1</code>); no need to set <code class=\"inline\">k</code>.</li>\r\n            <li><strong>Gaussian Mixture</strong> — soft clustering (probabilities); ellipsoidal shapes.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Quality metrics</h3>\r\n          <ul>\r\n            <li><strong>Silhouette</strong> (↑ better separation)</li>\r\n            <li><strong>Davies–Bouldin</strong> (↓ tighter clusters)</li>\r\n            <li><strong>Calinski–Harabasz</strong> (↑ well‑defined clusters)</li>\r\n          </ul>\r\n          <p style=\"margin-top:6px\">The app computes metrics safely and skips invalid cases (e.g., single cluster or all noise).</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Dataset</h3>\r\n          <p>Use the sample bank operations dataset (daily visits + features):</p>\r\n          <p><a href=\"https://github.com/AIforimpact22/learningexamples/blob/main/bank_visits_complete_2024.csv\" target=\"_blank\" rel=\"noopener\">bank_visits_complete_2024.csv</a></p>\r\n          <p>Pick multiple columns (numeric/categorical). If you include a <code class=\"inline\">date</code> column, the app converts it to an ordinal feature automatically.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- OUTCOME SNAPSHOT -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Outcome</small>\r\n      <h1>Example Clustering Result (PCA scatter)</h1>\r\n      <p>Colored points = discovered clusters; use this to sanity‑check separation</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"figure\">\r\n        <a href=\"https://i.imgur.com/8lUwQhO.png\" target=\"_blank\" rel=\"noopener\">\r\n          <img src=\"https://i.imgur.com/8lUwQhO.png\" alt=\"Example clustering outcome: PCA scatter colored by cluster\" />\r\n        </a>\r\n        <div class=\"figcap\">\r\n          A quick visual inspection helps validate cluster separation and spot outliers/noise before you act on segments.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- THE APP: CODE -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Code</small>\r\n      <h1>1) Save as <code class=\"inline\">app.py</code></h1>\r\n      <p>Stable, defensive Streamlit app (handles edge cases & keeps UI responsive)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre><code># app.py\r\nimport os\r\nimport time\r\nimport numpy as np\r\nimport pandas as pd\r\nimport streamlit as st\r\n\r\n# Try Plotly; fall back to Streamlit's built-in chart if not available\r\ntry:\r\n    import plotly.express as px\r\n    HAS_PLOTLY = True\r\nexcept Exception:\r\n    HAS_PLOTLY = False\r\n\r\nfrom typing import List, Tuple\r\n\r\nfrom sklearn.compose import ColumnTransformer\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler, MinMaxScaler\r\nfrom sklearn.impute import SimpleImputer\r\nfrom sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering\r\nfrom sklearn.mixture import GaussianMixture\r\nfrom sklearn.decomposition import PCA\r\nfrom sklearn.metrics import silhouette_score, davies_bouldin_score, calinski_harabasz_score\r\n\r\nst.set_page_config(page_title=\"Unsupervised Clustering\", layout=\"wide\")\r\nDEFAULT_SAVE_DIR = r\"C:\\Users\\sourc\\OneDrive\\Desktop\\Python\\Erbil Air Polution\"\r\n\r\n# ----------------- Session State (no auto-blank after click) -----------------\r\nif \"run_clicked\" not in st.session_state:\r\n    st.session_state.run_clicked = False\r\nif \"df_cache\" not in st.session_state:\r\n    st.session_state.df_cache = None\r\n\r\n# ------------------------------- Utilities -----------------------------------\r\ndef safe_read_csv(file_or_path) -> pd.DataFrame:\r\n    df = pd.read_csv(file_or_path)\r\n    return df\r\n\r\ndef coerce_selected_features(df: pd.DataFrame, selected: List[str]) -> Tuple[pd.DataFrame, List[str], List[str]]:\r\n    \"\"\"Convert 'date' to ordinal; attempt numeric coercion; split num vs cat.\"\"\"\r\n    df = df.copy()\r\n    sel = selected.copy()\r\n\r\n    if \"date\" in sel and \"date\" in df.columns:\r\n        df[\"date\"] = pd.to_datetime(df[\"date\"], errors=\"coerce\")\r\n        df[\"date_ordinal\"] = df[\"date\"].map(lambda x: x.toordinal() if pd.notnull(x) else np.nan)\r\n        sel = [\"date_ordinal\" if c == \"date\" else c for c in sel]\r\n\r\n    # Try numeric conversion where possible (without breaking true categorical)\r\n    for c in sel:\r\n        if c in df.columns and df[c].dtype == \"object\":\r\n            try:\r\n                sample = df[c].dropna().astype(str).head(50)\r\n                numeric_like = sample.str.match(r\"^-?\\d+(\\.\\d+)?$\").mean() >= 0.7\r\n            except Exception:\r\n                numeric_like = False\r\n            if numeric_like:\r\n                df[c] = pd.to_numeric(df[c], errors=\"coerce\")\r\n\r\n    num_cols = df[sel].select_dtypes(include=[np.number]).columns.tolist()\r\n    cat_cols = [c for c in sel if c not in num_cols]\r\n    return df, num_cols, cat_cols\r\n\r\ndef make_preprocessor(num_cols, cat_cols, impute_strategy=\"median\", scaler=\"StandardScaler\"):\r\n    num_steps = [(\"imputer\", SimpleImputer(strategy=impute_strategy))]\r\n    if scaler == \"StandardScaler\":\r\n        num_steps.append((\"scaler\", StandardScaler()))\r\n    elif scaler == \"MinMaxScaler\":\r\n        num_steps.append((\"scaler\", MinMaxScaler()))\r\n\r\n    num_pipe = Pipeline(steps=num_steps)\r\n    cat_pipe = Pipeline(steps=[\r\n        (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\r\n        (\"onehot\", OneHotEncoder(handle_unknown=\"ignore\"))\r\n    ])\r\n\r\n    pre = ColumnTransformer(\r\n        transformers=[\r\n            (\"num\", num_pipe, num_cols),\r\n            (\"cat\", cat_pipe, cat_cols)\r\n        ],\r\n        remainder=\"drop\",\r\n        sparse_threshold=0.0  # force dense for PCA\r\n    )\r\n    return pre\r\n\r\ndef fit_cluster(X, algo, params, random_state=42):\r\n    if algo == \"KMeans\":\r\n        model = KMeans(n_clusters=int(params[\"n_clusters\"]), n_init=10, random_state=random_state)\r\n        labels = model.fit_predict(X)\r\n    elif algo == \"Agglomerative\":\r\n        n_clusters = int(params[\"n_clusters\"])\r\n        linkage = params[\"linkage\"]\r\n        try:\r\n            model = AgglomerativeClustering(n_clusters=n_clusters, linkage=linkage, metric=\"euclidean\")\r\n        except TypeError:\r\n            model = AgglomerativeClustering(n_clusters=n_clusters, linkage=linkage, affinity=\"euclidean\")\r\n        labels = model.fit_predict(X)\r\n    elif algo == \"DBSCAN\":\r\n        model = DBSCAN(eps=float(params[\"eps\"]), min_samples=int(params[\"min_samples\"]), metric=\"euclidean\")\r\n        labels = model.fit_predict(X)\r\n    elif algo == \"GaussianMixture\":\r\n        model = GaussianMixture(\r\n            n_components=int(params[\"n_components\"]),\r\n            covariance_type=params[\"covariance_type\"],\r\n            random_state=random_state\r\n        )\r\n        model.fit(X)\r\n        labels = model.predict(X)\r\n    else:\r\n        raise ValueError(\"Unknown algorithm\")\r\n    return model, labels\r\n\r\ndef compute_metrics(X, labels, algo_name):\r\n    labels = np.asarray(labels)\r\n    metrics = {}\r\n    uniq = set(labels.tolist())\r\n    if algo_name == \"DBSCAN\":\r\n        core_labels = [l for l in uniq if l != -1]\r\n        n_clusters = len(core_labels)\r\n        metrics[\"n_clusters\"] = n_clusters\r\n        mask = labels != -1\r\n        X_eval = X[mask]\r\n        labels_eval = labels[mask]\r\n    else:\r\n        n_clusters = len(uniq)\r\n        metrics[\"n_clusters\"] = n_clusters\r\n        X_eval, labels_eval = X, labels\r\n\r\n    def safe_metric(func):\r\n        try:\r\n            if n_clusters >= 2 and len(np.unique(labels_eval)) >= 2 and len(labels_eval) >= 10:\r\n                return float(func(X_eval, labels_eval))\r\n            return None\r\n        except Exception:\r\n            return None\r\n\r\n    metrics[\"silhouette\"] = safe_metric(silhouette_score)\r\n    metrics[\"davies_bouldin\"] = safe_metric(davies_bouldin_score)\r\n    metrics[\"calinski_harabasz\"] = safe_metric(calinski_harabasz_score)\r\n    return metrics\r\n\r\ndef pca_embedding(X, dims=2, random_state=42):\r\n    n_features = X.shape[1]\r\n    n_comp = min(dims, n_features if n_features > 0 else 1)\r\n    pca = PCA(n_components=n_comp, random_state=random_state)\r\n    emb = pca.fit_transform(X)\r\n    cols = [\"x\",\"y\"] if n_comp == 2 else [\"x\",\"y\",\"z\"][:n_comp]\r\n    return pd.DataFrame(emb, columns=cols)\r\n\r\ndef cluster_profiles(df: pd.DataFrame, labels, sel_cols, num_cols, cat_cols):\r\n    out = df.copy()\r\n    out[\"cluster\"] = labels\r\n    grp = out.groupby(\"cluster\", dropna=False)\r\n    num_means = grp[num_cols].mean(numeric_only=True).round(3) if num_cols else pd.DataFrame()\r\n\r\n    top_cats = []\r\n    for c in cat_cols:\r\n        try:\r\n            mode_series = grp[c].agg(lambda s: s.mode().iloc[0] if s.dropna().size else np.nan)\r\n            top_cats.append(mode_series.rename(c))\r\n        except Exception:\r\n            pass\r\n    top_cats = pd.concat(top_cats, axis=1) if top_cats else pd.DataFrame()\r\n    sizes = out[\"cluster\"].value_counts(dropna=False).rename_axis(\"cluster\").reset_index(name=\"count\")\r\n    return out, sizes, num_means, top_cats\r\n\r\n# -------------------------------- UI: Load Data --------------------------------\r\nst.title(\"🏦 Unsupervised Clustering (Multiple Columns) — Stable Build\")\r\n\r\nst.sidebar.header(\"1) Load Data\")\r\nuploaded = st.sidebar.file_uploader(\"Upload CSV\", type=[\"csv\"], help=\"Or use the file path below.\")\r\ndefault_path = os.path.join(DEFAULT_SAVE_DIR, \"bank_visits_complete_2024.csv\")\r\npath_text = st.sidebar.text_input(\"CSV file path\", value=default_path)\r\nload_clicked = st.sidebar.button(\"Load\")\r\n\r\ndf = st.session_state.df_cache\r\nload_msg = st.empty()\r\n\r\nif load_clicked or (df is None and os.path.exists(path_text)):\r\n    try:\r\n        if uploaded is not None:\r\n            df = safe_read_csv(uploaded)\r\n        else:\r\n            df = safe_read_csv(path_text)\r\n        st.session_state.df_cache = df\r\n        load_msg.success(f\"Loaded data: {df.shape[0]} rows × {df.shape[1]} columns\")\r\n    except Exception as e:\r\n        load_msg.error(f\"Failed to load CSV: {e}\")\r\n        df = None\r\n\r\nif df is None:\r\n    st.info(\"📄 Upload a CSV or enter a valid file path, then click **Load**.\")\r\nelse:\r\n    st.subheader(\"Preview\")\r\n    st.dataframe(df.head(20), use_container_width=True)\r\n\r\n# ------------------------------ Feature Selection ------------------------------\r\nif df is not None:\r\n    st.sidebar.header(\"2) Select Features\")\r\n    all_cols = df.columns.tolist()\r\n    recommended = [\r\n        \"is_weekend\",\"is_holiday\",\"branch_open_hours\",\"staff_on_duty\",\"is_payday\",\r\n        \"marketing_campaign\",\"promo_strength\",\"atm_outage\",\"temp_c\",\"rain_mm\",\"aqi\",\"dust_event\",\r\n        \"total_visit\",\"teller_visits\",\"atm_visits\",\"service_visits\",\"transactions_total\",\r\n        \"avg_wait_time_min\",\"new_accounts_opened\",\"loan_inquiries\",\"complaints\",\r\n        \"cash_deposits\",\"cash_withdrawals\",\"fx_transactions\"\r\n    ]\r\n    default_sel = [c for c in recommended if c in all_cols] or df.select_dtypes(include=[np.number]).columns.tolist()\r\n    selected = st.sidebar.multiselect(\"Columns to use\", options=all_cols, default=default_sel)\r\n\r\n    st.sidebar.header(\"3) Preprocessing\")\r\n    impute_strategy = st.sidebar.selectbox(\"Numeric imputation\", [\"median\",\"mean\"], index=0)\r\n    scaler_choice = st.sidebar.selectbox(\"Scaling\", [\"StandardScaler\",\"MinMaxScaler\",\"None\"], index=0)\r\n\r\n    st.sidebar.header(\"4) Algorithm\")\r\n    algo = st.sidebar.selectbox(\"Method\", [\"KMeans\",\"Agglomerative\",\"DBSCAN\",\"GaussianMixture\"], index=0)\r\n\r\n    params = {}\r\n    if algo in (\"KMeans\",\"Agglomerative\"):\r\n        params[\"n_clusters\"] = st.sidebar.slider(\"n_clusters\", 2, 20, 5, 1)\r\n        if algo == \"Agglomerative\":\r\n            params[\"linkage\"] = st.sidebar.selectbox(\"linkage\", [\"ward\",\"complete\",\"average\",\"single\"], index=0)\r\n    elif algo == \"DBSCAN\":\r\n        params[\"eps\"] = st.sidebar.slider(\"eps\", 0.1, 10.0, 1.5, 0.1)\r\n        params[\"min_samples\"] = st.sidebar.slider(\"min_samples\", 2, 50, 5, 1)\r\n    elif algo == \"GaussianMixture\":\r\n        params[\"n_components\"] = st.sidebar.slider(\"n_components\", 2, 20, 5, 1)\r\n        params[\"covariance_type\"] = st.sidebar.selectbox(\"covariance_type\", [\"full\",\"diag\",\"tied\",\"spherical\"], index=0)\r\n\r\n    st.sidebar.header(\"5) Run\")\r\n    seed = st.sidebar.number_input(\"Random seed\", min_value=0, value=42, step=1)\r\n    if st.sidebar.button(\"Run Clustering\"):\r\n        st.session_state.run_clicked = True\r\n\r\n    # ------------------------------- Run Block --------------------------------\r\n    if st.session_state.run_clicked:\r\n        if not selected:\r\n            st.error(\"Please select at least one column.\")\r\n        else:\r\n            try:\r\n                with st.spinner(\"Running clustering...\"):\r\n                    df_proc, num_cols, cat_cols = coerce_selected_features(df, selected)\r\n                    pre = make_preprocessor(num_cols, cat_cols, impute_strategy=impute_strategy, scaler=scaler_choice if scaler_choice!=\"None\" else None)\r\n                    X = pre.fit_transform(df_proc[num_cols + cat_cols])\r\n                    model, labels = fit_cluster(X, algo, params, random_state=int(seed))\r\n                    metrics = compute_metrics(X, labels, algo)\r\n                    dims = 3 if HAS_PLOTLY else 2\r\n                    try:\r\n                        emb_df = pca_embedding(X, dims=dims, random_state=int(seed))\r\n                    except Exception:\r\n                        emb_df = pca_embedding(X, dims=2, random_state=int(seed))\r\n                    df_labeled, sizes, num_means, top_cats = cluster_profiles(df_proc, labels, selected, num_cols, cat_cols)\r\n\r\n                m1,m2,m3,m4 = st.columns(4)\r\n                m1.metric(\"Clusters\", metrics.get(\"n_clusters\", None))\r\n                m2.metric(\"Silhouette\", f\"{metrics['silhouette']:.3f}\" if metrics.get(\"silhouette\") is not None else \"—\")\r\n                m3.metric(\"Davies–Bouldin ↓\", f\"{metrics['davies_bouldin']:.3f}\" if metrics.get(\"davies_bouldin\") is not None else \"—\")\r\n                m4.metric(\"Calinski–Harabasz ↑\", f\"{metrics['calinski_harabasz']:.1f}\" if metrics.get(\"calinski_harabasz\") is not None else \"—\")\r\n\r\n                st.subheader(\"Cluster Sizes\")\r\n                st.dataframe(sizes, use_container_width=True)\r\n\r\n                st.subheader(\"Visualization (PCA)\")\r\n                plot_df = emb_df.copy()\r\n                plot_df[\"cluster\"] = labels.astype(str)\r\n                if HAS_PLOTLY and plot_df.shape[1]==3:\r\n                    fig = px.scatter_3d(plot_df, x=\"x\", y=\"y\", z=\"z\", color=\"cluster\", opacity=0.85, title=f\"{algo} Clusters (PCA 3D)\")\r\n                    st.plotly_chart(fig, use_container_width=True)\r\n                elif HAS_PLOTLY:\r\n                    fig = px.scatter(plot_df, x=\"x\", y=\"y\", color=\"cluster\", opacity=0.9, title=f\"{algo} Clusters (PCA 2D)\")\r\n                    st.plotly_chart(fig, use_container_width=True)\r\n                else:\r\n                    st.caption(\"Plotly not found. Showing basic 2D chart.\")\r\n                    st.scatter_chart(plot_df, x=\"x\", y=\"y\", color=\"cluster\")\r\n\r\n                st.subheader(\"Cluster Profiles\")\r\n                if not num_means.empty:\r\n                    st.write(\"**Numeric means by cluster**\")\r\n                    st.dataframe(num_means, use_container_width=True)\r\n                if not top_cats.empty:\r\n                    st.write(\"**Top categorical values by cluster**\")\r\n                    st.dataframe(top_cats, use_container_width=True)\r\n\r\n                st.subheader(\"Labeled Data (first 200 rows)\")\r\n                st.dataframe(df_labeled.assign(cluster=labels).head(200), use_container_width=True)\r\n\r\n                st.subheader(\"Export\")\r\n                os.makedirs(DEFAULT_SAVE_DIR, exist_ok=True)\r\n                default_out = os.path.join(DEFAULT_SAVE_DIR, f\"clustered_{algo}_{int(time.time())}.csv\")\r\n                save_path = st.text_input(\"Save path\", value=default_out, key=\"savepath_input\")\r\n                col_a, col_b = st.columns([0.4,0.6])\r\n                with col_a:\r\n                    if st.button(\"Save CSV to Disk\"):\r\n                        try:\r\n                            df_labeled.assign(cluster=labels).to_csv(save_path, index=False, encoding=\"utf-8\")\r\n                            st.success(f\"Saved: {save_path}\")\r\n                        except Exception as e:\r\n                            st.error(f\"Save failed: {e}\")\r\n                with col_b:\r\n                    st.download_button(\r\n                        \"Download labeled CSV\",\r\n                        data=df_labeled.assign(cluster=labels).to_csv(index=False).encode(\"utf-8\"),\r\n                        file_name=os.path.basename(save_path),\r\n                        mime=\"text/csv\"\r\n                    )\r\n\r\n            except Exception as e:\r\n                st.error(f\"Clustering failed: {e}\")\r\n\r\n    if st.sidebar.button(\"Reset\"):\r\n        st.session_state.run_clicked = False\r\n        st.experimental_rerun()\r\n</code></pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- REQUIREMENTS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Deps</small>\r\n      <h1>2) <code class=\"inline\">requirements.txt</code></h1>\r\n      <p>Plotly is optional (app will fall back to basic charts)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre><code>streamlit\r\npandas\r\nnumpy\r\nscikit-learn\r\n# plotly   <-- optional (uncomment if you want Plotly charts)\r\n</code></pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- HOW TO RUN -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Run</small>\r\n      <h1>3) Launch the app</h1>\r\n      <p>Windows / PowerShell example</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre><code># In the folder with app.py and requirements.txt\r\npython -m venv .venv\r\n.\\.venv\\Scripts\\Activate.ps1\r\npip install -r requirements.txt\r\n\r\n# (Optional) For nicer charts\r\npip install plotly\r\n\r\n# Launch\r\nstreamlit run app.py\r\n</code></pre>\r\n      <p style=\"margin-top:10px\">\r\n        The app defaults to saving labeled files in:\r\n        <code class=\"inline\">C:\\Users\\sourc\\OneDrive\\Desktop\\Python\\Erbil Air Polution</code>.\r\n        If you’re on macOS/Linux or Codespaces, change <code class=\"inline\">DEFAULT_SAVE_DIR</code> near the top of <code class=\"inline\">app.py</code>.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHY THIS IS STABLE -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Reliability</small>\r\n      <h1>Why this build doesn’t “kick you out”</h1>\r\n      <p>Defensive patterns throughout the pipeline</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li>No <code class=\"inline\">st.stop()</code> — UI stays mounted after Run.</li>\r\n        <li>All heavy steps are wrapped in <code class=\"inline\">try/except</code> with clear messages.</li>\r\n        <li>Automatic handling of <em>date</em> → ordinal, numeric coercion for “number‑like” strings, and robust missing‑value imputation.</li>\r\n        <li><strong>ColumnTransformer</strong> with One‑Hot + scaling returns dense matrices (PCA‑safe across versions).</li>\r\n        <li>Metrics computed only when valid (e.g., DBSCAN’s noise points excluded).</li>\r\n        <li>Optional Plotly; falls back to Streamlit chart if Plotly isn’t installed.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DATA EXAMPLES -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Data</small>\r\n      <h1>What to feed the model?</h1>\r\n      <p>Examples that cluster well</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Bank operations (daily)</h3>\r\n          <p>Visits, transactions, staffing, weather, promo flags, holidays.</p>\r\n          <p>Find traffic patterns, promotional lift cohorts, anomaly days.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Sensors & IoT</h3>\r\n          <p>Pressure/temperature series, derived rates & rolling stats.</p>\r\n          <p>Detect device cohorts and early fault signatures.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Customer usage</h3>\r\n          <p>Clicks, session lengths, features used, NPS, support contact.</p>\r\n          <p>Define product personas and tailor onboarding.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Text embeddings</h3>\r\n          <p>Ticket titles or reviews encoded to vectors.</p>\r\n          <p>Find topic clusters and route intelligently.</p>\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:8px\">\r\n        Start with the provided dataset:\r\n        <a href=\"https://github.com/AIforimpact22/learningexamples/blob/main/bank_visits_complete_2024.csv\" target=\"_blank\" rel=\"noopener\">bank_visits_complete_2024.csv</a>.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">© <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span></div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now=new Date();\r\n  document.getElementById('y').textContent=now.getFullYear();\r\n  document.getElementById('d').textContent=now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "4b4a02fc-227b-4393-a947-7b14802317eb"
        },
        {
          "kind": "article",
          "order": 3,
          "title": "When to Use Unsupervised Machine Learning",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>When to Use Unsupervised Machine Learning</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #ffffff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Pills & chips (use #BDBDBD as requested) === */\r\n.pill { display: inline-block; padding: 4px 10px; border: 1px solid #A3A3A3; border-radius: 999px; background: #BDBDBD; color: #000; font-size: 12px; font-weight: 700; }\r\n\r\n/* === Grids === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(260px,1fr)); gap: 14px; }\r\n.box  { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Step list === */\r\n.steps { display: grid; grid-template-columns: 34px 1fr; gap: 8px 12px; align-items: start; }\r\n.step-num { width: 34px; height: 34px; border-radius: 999px; background: #BDBDBD; color: #000; font-weight: 800; display: flex; align-items: center; justify-content: center; border: 1px solid #A3A3A3; }\r\n.step-body { padding-top: 4px; }\r\n\r\n/* === Tables === */\r\n.table { width: 100%; border-collapse: collapse; }\r\n.table th, .table td { border: 1px solid #EBEBEB; padding: 10px 12px; text-align: left; }\r\n.table th { background: #f9f9f9; color: #000; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Machine Learning</small>\r\n      <h1>When to Use Unsupervised Machine Learning</h1>\r\n      <p>Know the situations where clustering, anomaly detection, topic discovery, and dimensionality reduction add the most value.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        Unsupervised ML is for learning structure from data <em>without labels</em>. Use it to\r\n        discover groups, reduce dimensionality for visualization, or surface odd behavior that\r\n        warrants action. It is often the <strong>first step</strong> before supervised models and a\r\n        practical tool when labels are expensive, slow, or ambiguous.\r\n      </p>\r\n      <p>\r\n        Common families: <span class=\"pill\">Clustering</span> <span class=\"pill\">Anomaly Detection</span>\r\n        <span class=\"pill\">Topic/Embeddings</span> <span class=\"pill\">Dimensionality Reduction</span>.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- PRIME USE-CASES -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Use‑Cases</small>\r\n      <h1>Situations where unsupervised ML shines</h1>\r\n      <p>Clear triggers that justify it, with examples from business and science</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>No labels, but you need structure</h3>\r\n          <ul>\r\n            <li>Segment customers by behavior (visits, products, channels).</li>\r\n            <li>Group wells/sensors by operating patterns.</li>\r\n            <li>Organize documents by topic without human tagging.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Labels are costly or slow</h3>\r\n          <ul>\r\n            <li>Expert labeling (geology cores, medical charts) is scarce.</li>\r\n            <li>Outcomes arrive months later (churn, repayments).</li>\r\n            <li>Use clusters to pre‑label or prioritize review.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Anomaly or drift watch</h3>\r\n          <ul>\r\n            <li>Detect unusual device telemetry in real time.</li>\r\n            <li>Spot data pipeline drift before models degrade.</li>\r\n            <li>Find odd HR attendance patterns or fraud bursts.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>High‑dimensional → human insight</h3>\r\n          <ul>\r\n            <li>Reduce hundreds of features to 2–3D plots (PCA/UMAP).</li>\r\n            <li>Explore embeddings of text/images for QA or search.</li>\r\n            <li>Share intuitive dashboards with non‑technical teams.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Cold‑start or new markets</h3>\r\n          <ul>\r\n            <li>No labels in a new geography or product line.</li>\r\n            <li>Cluster to discover “look‑alike” patterns quickly.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Pre‑processing for supervised ML</h3>\r\n          <ul>\r\n            <li>Use cluster IDs or anomaly flags as features.</li>\r\n            <li>Balance datasets by sampling from clusters.</li>\r\n            <li>Compress correlated inputs to reduce noise.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DECISION GUIDE -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Guide</small>\r\n      <h1>Quick decision guide</h1>\r\n      <p>Select a technique based on the question and data shape</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <table class=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Situation</th>\r\n            <th>Technique</th>\r\n            <th>Why</th>\r\n            <th>Examples</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Discover natural groups</td>\r\n            <td>K‑Means / GMM / Agglomerative</td>\r\n            <td>Find compact or hierarchical structure</td>\r\n            <td>Customer cohorts, geoscience facies, product bundles</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Irregular shapes; noise matters</td>\r\n            <td>DBSCAN / HDBSCAN</td>\r\n            <td>Density‑based; flags outliers as noise</td>\r\n            <td>Sensor spikes, route clusters, spatial hot‑spots</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Show complex data on 2D</td>\r\n            <td>PCA / UMAP / t‑SNE</td>\r\n            <td>Dimensionality reduction for visualization</td>\r\n            <td>Ticket embeddings, well‑log vectors, genome data</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Early warnings</td>\r\n            <td>Isolation Forest / One‑Class SVM / z‑score</td>\r\n            <td>Outlier detection w/out labeled failures</td>\r\n            <td>Equip. faults, fraud spikes, traffic anomalies</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DATA PREREQS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Readiness</small>\r\n      <h1>Data prerequisites before you cluster</h1>\r\n      <p>Small checks that save big headaches</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"steps\">\r\n        <div class=\"step-num\">1</div>\r\n        <div class=\"step-body\"><strong>Right unit of analysis.</strong> Define one row = one entity/time window (e.g., branch‑day).</div>\r\n\r\n        <div class=\"step-num\">2</div>\r\n        <div class=\"step-body\"><strong>Robust features.</strong> Handle missing values; scale numerics; one‑hot encode categoricals; avoid obvious leakage from the future.</div>\r\n\r\n        <div class=\"step-num\">3</div>\r\n        <div class=\"step-body\"><strong>Manage dimensionality.</strong> Too many sparse columns ⇒ use PCA/UMAP or drop weak features first.</div>\r\n\r\n        <div class=\"step-num\">4</div>\r\n        <div class=\"step-body\"><strong>Sampling.</strong> If data are huge, start with a stratified sample; verify results on full data later.</div>\r\n\r\n        <div class=\"step-num\">5</div>\r\n        <div class=\"step-body\"><strong>Operational labels (optional).</strong> Decide how clusters/anomalies will be named and consumed by downstream teams.</div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- EVALUATION WITHOUT LABELS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Validation</small>\r\n      <h1>How to evaluate without labels</h1>\r\n      <p>Internal metrics + domain checks</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Internal metrics</h3>\r\n          <ul>\r\n            <li>Silhouette ↑, Calinski–Harabasz ↑, Davies–Bouldin ↓</li>\r\n            <li>Stability under re‑runs/bootstraps</li>\r\n            <li>Cluster size balance (avoid tiny shards unless they’re meaningful)</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>External sanity checks</h3>\r\n          <ul>\r\n            <li>Business separability (KPIs differ across clusters?)</li>\r\n            <li>Temporal consistency (do segments persist week to week?)</li>\r\n            <li>Explainability (top features that define each cluster)</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Human‑in‑the‑loop</h3>\r\n          <ul>\r\n            <li>Let SMEs rename/merge/split clusters</li>\r\n            <li>Promote stable clusters to “segments” and track as metadata</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- PITFALLS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Watch‑outs</small>\r\n      <h1>Common pitfalls & anti‑patterns</h1>\r\n      <p>Avoid misleading segments and brittle setups</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>Confusing noise for insight.</strong> Very small clusters may be data errors or rare events.</li>\r\n        <li><strong>Unscaled features.</strong> K‑Means is distance‑based; always scale or results skew toward large‑magnitude variables.</li>\r\n        <li><strong>Too many weak features.</strong> High‑dimensional noise kills separation — prune or compress first.</li>\r\n        <li><strong>Static snapshots only.</strong> For operations data, use rolling windows; cluster drift over time is expected.</li>\r\n        <li><strong>Acting without names.</strong> Assign clear labels (“High‑footfall weekdays”, “Weekend‑promo responders”) so teams can use them.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- EXAMPLES -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Examples</small>\r\n      <h1>Practical scenarios</h1>\r\n      <p>Where this belongs in your pipeline</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Bank operations</h3>\r\n          <p>Cluster branch‑days by load; feed staffing and opening‑hours policies; flag anomalies for incident review.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Geothermal / UTES</h3>\r\n          <p>Cluster wells by thermal/pressure behavior; detect drift; create features for performance prediction.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>E‑commerce</h3>\r\n          <p>Segment buyers by journey; build different recommendations; monitor outlier carts for fraud signals.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>HR & attendance</h3>\r\n          <p>Group teams by absence patterns; forecast risk of under‑staffing; investigate unusual check‑in/out sequences.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- QUICK PROMPTS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Prompts</small>\r\n      <h1>Useful prompts to accelerate work</h1>\r\n      <p>Copy–paste, then refine with your column names</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>Feature ideas:</strong> “Given columns <list>, propose 15 clustering features (lags, ratios, seasonality, binary flags) and justify each.”</li>\r\n        <li><strong>Method choice:</strong> “My data have mixed types and outliers. Compare K‑Means, GMM, and DBSCAN for this case and suggest defaults.”</li>\r\n        <li><strong>Stability check:</strong> “Generate a bootstrap plan to test cluster stability and report variation in Silhouette and cluster counts.”</li>\r\n        <li><strong>Naming:</strong> “Suggest descriptive names for these clusters given their top features and KPI means.”</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">© <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span></div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "6a0b4ca0-800e-466c-a5c0-7cc16fec803c"
        },
        {
          "kind": "article",
          "order": 4,
          "title": "Supervised ML - Random‑Forest Forecast",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Supervised ML — Random‑Forest Forecast • Download & Run in Codespaces</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n*{box-sizing:border-box;word-wrap:break-word;overflow-wrap:break-word}\r\nbody{font:16px/1.55 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#555;margin:0;background:#fff}\r\na{color:#000;text-decoration:underline}\r\ncode,pre{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace}\r\n\r\n/* === Page wrap === */\r\n.wrap{max-width:1080px;margin:0 auto;padding:18px}\r\n\r\n/* === Card container === */\r\n.section-card{\r\n  border:1px solid #EBEBEB;border-radius:14px;overflow:hidden;\r\n  box-shadow:0 1px 2px rgba(0,0,0,.04);margin-bottom:24px;background:#ffffff\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner{\r\n  background:linear-gradient(120deg,#555555,#000000);\r\n  color:#FFFFFF;padding:18px 20px\r\n}\r\n.section-card .banner small{font-size:12px;letter-spacing:.08em;opacity:.9;text-transform:uppercase;color:#FFFFFF}\r\n.section-card .banner h1{margin:6px 0 4px;font-size:26px;line-height:1.2;color:#FFFFFF}\r\n.section-card .banner p{margin:0;opacity:.95;color:#FFFFFF}\r\n\r\n/* === Body === */\r\n.section-card .body{padding:20px}\r\n.section-card p,.section-card li{font-size:16px;margin-top:0;color:#555}\r\n\r\n/* === Pills & chips (neutral per style) === */\r\n.pill{display:inline-block;padding:4px 10px;border:1px solid #A3A3A3;border-radius:999px;background:#BDBDBD;color:#000;font-size:12px;font-weight:700}\r\n\r\n/* === Grid (used where needed) === */\r\n.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:14px}\r\n.box{border:1px solid #EBEBEB;border-radius:10px;background:#fff;padding:14px}\r\n.box h3{margin:0 0 8px;color:#000;font-size:18px}\r\n\r\n/* === KV list === */\r\n.kv{display:grid;grid-template-columns:160px 1fr;gap:6px 12px}\r\n.kv div:first-child{color:#000;font-weight:700}\r\n\r\n/* === CTA row === */\r\n.cta-row{display:flex;gap:10px;flex-wrap:wrap;margin-top:12px}\r\n.cta-row a{display:inline-block;text-decoration:none;padding:10px 16px;border-radius:8px;font-weight:700;border:1px solid #000}\r\n.cta-primary{background:#000;color:#EBEBEB}\r\n.cta-secondary{background:#fff;color:#000}\r\n\r\n/* === Figures === */\r\nimg.fig{max-width:100%;height:auto;display:block;border-radius:12px;border:1px solid #EBEBEB}\r\n.figcap{font-size:13px;color:#777;margin-top:6px}\r\n\r\n/* === Footer === */\r\n.footer-note{font-size:13px;color:#777;text-align:center;margin:30px 0 10px}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Supervised Machine Learning</small>\r\n      <h1>Random‑Forest N‑Day Forecast — Download & Run in GitHub Codespaces</h1>\r\n      <p>Grab the ready‑made app, update two paths for Linux (Codespaces), and forecast your next <strong>N</strong> days.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        The script <code>rf_forecast_app.py</code> is a stable Streamlit app that learns from a daily time series\r\n        (e.g., <code>total_visit</code>) and predicts the next <em>N</em> days. It keeps state, engineers safe features\r\n        (calendar cycles, lags, rolling means), evaluates on a recent test window, and exports CSVs.\r\n      </p>\r\n      <p>\r\n        <span class=\"pill\">Goal</span> Simple language: “Load a CSV with a <b>date</b> and a <b>number per day</b>,\r\n        train a <b>Random Forest</b>, and <b>predict the next N days</b> without breaking on reruns.”\r\n      </p>\r\n      <div class=\"cta-row\">\r\n        <a class=\"cta-primary\" href=\"https://github.com/AIforimpact22/learningexamples/blob/main/rf_forecast_app.py\" target=\"_blank\" rel=\"noopener\">Open script on GitHub</a>\r\n        <a class=\"cta-secondary\" href=\"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/rf_forecast_app.py\" target=\"_blank\" rel=\"noopener\">Download RAW (.py)</a>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 1: DOWNLOAD -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Step 1</small>\r\n      <h1>Download the script into your Codespace</h1>\r\n      <p>Two simple ways</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>A) Copy & paste</h3>\r\n          <ol>\r\n            <li>Open the RAW link: <a href=\"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/rf_forecast_app.py\" target=\"_blank\" rel=\"noopener\">rf_forecast_app.py (raw)</a>.</li>\r\n            <li>Select all → copy.</li>\r\n            <li>In Codespaces, create a new file at your repo root named <code>rf_forecast_app.py</code> and paste.</li>\r\n            <li>Save the file.</li>\r\n          </ol>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>B) Use terminal (curl)</h3>\r\n          <pre><code>curl -L -o rf_forecast_app.py \\\r\n  \"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/rf_forecast_app.py\"</code></pre>\r\n          <p class=\"figcap\">Run this in the <b>repo root</b> inside your Codespace terminal.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 2: UPDATE PATHS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Step 2</small>\r\n      <h1>Update the save/data paths for Linux (Codespaces)</h1>\r\n      <p>Replace Windows paths with your Codespace workspace path</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        In the script, find the config block near the top and <b>replace the two variables</b>.\r\n        Your Codespace root is usually <code>/workspaces/<your-repo-name></code>.\r\n      </p>\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Before (Windows example)</h3>\r\n          <pre><code>DEFAULT_SAVE_DIR  = r\"C:\\Users\\sourc\\OneDrive\\Desktop\\Python\\Erbil Air Polution\"\r\nDEFAULT_DATA_PATH = os.path.join(DEFAULT_SAVE_DIR, \"bank_visits_complete_2024.csv\")</code></pre>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>After (Codespaces / Linux)</h3>\r\n          <pre><code># Example if your repo is named \"learningexamples\"\r\nDEFAULT_SAVE_DIR  = \"/workspaces/learningexamples\"\r\nDEFAULT_DATA_PATH = os.path.join(DEFAULT_SAVE_DIR, \"bank_visits_complete_2024.csv\")</code></pre>\r\n          <p class=\"figcap\">If your repo is named differently, change <code>learningexamples</code> to your repo name.</p>\r\n        </div>\r\n      </div>\r\n      <p>\r\n        You can also leave <code>DEFAULT_DATA_PATH</code> alone and simply upload the CSV from the UI — but setting the\r\n        path is convenient for repeat runs and exporting.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 3: GET THE SAMPLE DATA -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Step 3</small>\r\n      <h1>Add the sample dataset</h1>\r\n      <p>Place it next to your script or in your workspace folder</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>Download the sample CSV:</p>\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>From GitHub</h3>\r\n          <p><a href=\"https://github.com/AIforimpact22/learningexamples/blob/main/bank_visits_complete_2024.csv\" target=\"_blank\" rel=\"noopener\">Open on GitHub</a> and click <b>Download raw file</b>.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>From terminal (curl)</h3>\r\n          <pre><code>curl -L -o bank_visits_complete_2024.csv \\\r\n  \"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/bank_visits_complete_2024.csv\"</code></pre>\r\n        </div>\r\n      </div>\r\n      <p class=\"figcap\">Make sure the CSV path in the app matches where you saved it (or upload via the sidebar at runtime).</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 4: INSTALL & RUN -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Step 4</small>\r\n      <h1>Install dependencies & launch Streamlit</h1>\r\n      <p>One‑time install, then run</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Install (inside Codespaces)</h3>\r\n          <pre><code>pip install streamlit pandas numpy scikit-learn plotly</code></pre>\r\n          <p class=\"figcap\">Plotly is optional; the app falls back to Streamlit charts if it’s not installed.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Run the app</h3>\r\n          <pre><code>streamlit run rf_forecast_app.py</code></pre>\r\n          <p class=\"figcap\">Open the forwarded port when prompted. Use the sidebar to load the CSV and train.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHAT IT DOES -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>What it does</small>\r\n      <h1>Plain‑English summary</h1>\r\n      <p>Exactly what this script is aiming to do</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><b>Learn from daily numbers</b> — the app reads one number per day (e.g., customers).</li>\r\n        <li><b>Builds time‑aware features</b> — recent days (lags), recent averages (rolling means), weekends/paydays, seasonal cycles.</li>\r\n        <li><b>Fits a Random Forest</b> — a sturdy model that handles non‑linear patterns and mixed signals.</li>\r\n        <li><b>Checks its work</b> — holds out the most recent days to compare predictions vs. reality (MAE, RMSE, R², MAPE).</li>\r\n        <li><b>Predicts the future</b> — steps forward one day at a time, using the last predictions to form tomorrow’s features.</li>\r\n        <li><b>Keeps you safe</b> — stable session state, unique keys, and guarded code paths to avoid “app kicked me out” moments.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- SNAPSHOTS (STACKED VERTICAL, FULL-WIDTH) -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Snapshots</small>\r\n      <h1>Expected screens (stacked)</h1>\r\n      <p>Full-width previews — no side-by-side shrinking</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"box\" style=\"margin-bottom:14px;\">\r\n        <h3>Training results (metrics & test plot)</h3>\r\n        <a href=\"https://i.imgur.com/PpT1X1a.png\" target=\"_blank\" rel=\"noopener\">\r\n          <img class=\"fig\" src=\"https://i.imgur.com/PpT1X1a.png\" alt=\"Training results: metrics + test window chart\" />\r\n        </a>\r\n        <div class=\"figcap\">MAE / RMSE / R² / MAPE; plus “Actual vs Predicted” on the held‑out test window.</div>\r\n      </div>\r\n\r\n      <div class=\"box\">\r\n        <h3>Forecast (history + next N days)</h3>\r\n        <a href=\"https://i.imgur.com/e7YNdHi.png\" target=\"_blank\" rel=\"noopener\">\r\n          <img class=\"fig\" src=\"https://i.imgur.com/e7YNdHi.png\" alt=\"Forecast chart: last ~200 days + next N days\" />\r\n        </a>\r\n        <div class=\"figcap\">Full‑width view so the lines and axis labels are easy to read.</div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- TROUBLESHOOT -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Tips</small>\r\n      <h1>Common quick fixes</h1>\r\n      <p>Solutions to typical hiccups</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><b>File not found:</b> confirm <code>DEFAULT_DATA_PATH</code> or use the upload box.</li>\r\n        <li><b>Target not found:</b> pick the correct numeric column (e.g., <code>total_visit</code>) in the sidebar.</li>\r\n        <li><b>Too few rows for lags:</b> reduce lags/rolling windows or supply a longer history.</li>\r\n        <li><b>Charts not showing:</b> install Plotly or rely on the Streamlit fallback charts.</li>\r\n      </ul>\r\n      <div class=\"cta-row\">\r\n        <a class=\"cta-primary\" href=\"https://github.com/AIforimpact22/learningexamples/blob/main/rf_forecast_app.py\" target=\"_blank\" rel=\"noopener\">View on GitHub</a>\r\n        <a class=\"cta-secondary\" href=\"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/bank_visits_complete_2024.csv\" target=\"_blank\" rel=\"noopener\">Download sample CSV</a>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">© <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span></div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now=new Date();\r\n  document.getElementById('y').textContent=now.getFullYear();\r\n  document.getElementById('d').textContent=now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "36012585-6bd0-45a2-a153-94059fbba07b"
        },
        {
          "kind": "article",
          "order": 5,
          "title": "Supervised ML — HistGradientBoosting Forecast",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Supervised ML — HistGradientBoosting Forecast • Download & Run in Codespaces</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n*{box-sizing:border-box;word-wrap:break-word;overflow-wrap:break-word}\r\nbody{font:16px/1.55 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#555;margin:0;background:#fff}\r\na{color:#000;text-decoration:underline}\r\ncode,pre{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace}\r\n\r\n/* === Page wrap === */\r\n.wrap{max-width:1080px;margin:0 auto;padding:18px}\r\n\r\n/* === Card container === */\r\n.section-card{\r\n  border:1px solid #EBEBEB;border-radius:14px;overflow:hidden;\r\n  box-shadow:0 1px 2px rgba(0,0,0,.04);margin-bottom:24px;background:#ffffff\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner{\r\n  background:linear-gradient(120deg,#555555,#000000);\r\n  color:#FFFFFF;padding:18px 20px\r\n}\r\n.section-card .banner small{font-size:12px;letter-spacing:.08em;opacity:.9;text-transform:uppercase;color:#FFFFFF}\r\n.section-card .banner h1{margin:6px 0 4px;font-size:26px;line-height:1.2;color:#FFFFFF}\r\n.section-card .banner p{margin:0;opacity:.95;color:#FFFFFF}\r\n\r\n/* === Body === */\r\n.section-card .body{padding:20px}\r\n.section-card p,.section-card li{font-size:16px;margin-top:0;color:#555}\r\n\r\n/* === Pills === */\r\n.pill{display:inline-block;padding:4px 10px;border:1px solid #A3A3A3;border-radius:999px;background:#BDBDBD;color:#000;font-size:12px;font-weight:700}\r\n\r\n/* === Grid & boxes === */\r\n.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:14px}\r\n.box{border:1px solid #EBEBEB;border-radius:10px;background:#fff;padding:14px}\r\n.box h3{margin:0 0 8px;color:#000;font-size:18px}\r\n\r\n/* === KV metrics === */\r\n.kv{display:grid;grid-template-columns:160px 1fr;gap:6px 12px}\r\n.kv div:first-child{color:#000;font-weight:700}\r\n\r\n/* === CTA row === */\r\n.cta-row{display:flex;gap:10px;flex-wrap:wrap;margin-top:12px}\r\n.cta-row a{display:inline-block;text-decoration:none;padding:10px 16px;border-radius:8px;font-weight:700;border:1px solid #000}\r\n.cta-primary{background:#000;color:#EBEBEB}\r\n.cta-secondary{background:#fff;color:#000}\r\n\r\n/* === Figures === */\r\nimg.fig{max-width:100%;height:auto;display:block;border-radius:12px;border:1px solid #EBEBEB}\r\n.figcap{font-size:13px;color:#777;margin-top:6px}\r\n\r\n/* === Footer === */\r\n.footer-note{font-size:13px;color:#777;text-align:center;margin:30px 0 10px}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Supervised Machine Learning</small>\r\n      <h1>HistGradientBoosting — N‑Day Forecast (fast, robust, numeric‑only)</h1>\r\n      <p>Another production‑ready path: train a Histogram‑based Gradient Boosting model and forecast the next <strong>N</strong> days.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        This app uses <b>HistGradientBoostingRegressor</b> (falls back to classic GradientBoosting if unavailable).\r\n        It builds <b>purely numeric features</b> (calendar cycles, lags, rolling means, optional lag‑1 regressors),\r\n        <b>time‑splits</b> the data (last N days as test), then performs a <b>recursive multi‑step forecast</b>.\r\n      </p>\r\n      <p>\r\n        <span class=\"pill\">Why HGB?</span> It’s typically <b>faster</b> than classic GB on medium/large datasets and handles non‑linear patterns well.\r\n      </p>\r\n      <div class=\"cta-row\">\r\n        <a class=\"cta-primary\" href=\"https://github.com/AIforimpact22/learningexamples/blob/main/histgradientboosting.py\" target=\"_blank\" rel=\"noopener\">Open script on GitHub</a>\r\n        <a class=\"cta-secondary\" href=\"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/histgradientboosting.py\" target=\"_blank\" rel=\"noopener\">Download RAW (.py)</a>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 1: DOWNLOAD -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Step 1</small>\r\n      <h1>Download the script into your Codespace</h1>\r\n      <p>Two straightforward options</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>A) Copy & paste</h3>\r\n          <ol>\r\n            <li>Open the RAW link: <a href=\"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/histgradientboosting.py\" target=\"_blank\" rel=\"noopener\">histgradientboosting.py (raw)</a>.</li>\r\n            <li>Select all → copy.</li>\r\n            <li>In Codespaces, create <code>histgradientboosting.py</code> at your repo root and paste.</li>\r\n            <li>Save the file.</li>\r\n          </ol>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>B) Use terminal</h3>\r\n          <pre><code>curl -L -o histgradientboosting.py \\\r\n  \"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/histgradientboosting.py\"</code></pre>\r\n          <p class=\"figcap\">Run from your repo root inside the Codespace terminal.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 2: UPDATE PATHS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Step 2</small>\r\n      <h1>Update save & data paths for Linux (Codespaces)</h1>\r\n      <p>Replace Windows paths with <code>/workspaces/<your-repo></code></p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>Find the config block near the top of <code>histgradientboosting.py</code> and edit the two constants:</p>\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Before (Windows)</h3>\r\n          <pre><code>DEFAULT_SAVE_DIR  = r\"C:\\Users\\sourc\\OneDrive\\Desktop\\Python\\Erbil Air Polution\"\r\nDEFAULT_DATA_PATH = os.path.join(DEFAULT_SAVE_DIR, \"bank_visits_complete_2024.csv\")</code></pre>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>After (Codespaces)</h3>\r\n          <pre><code># Example if your repo is named \"learningexamples\"\r\nDEFAULT_SAVE_DIR  = \"/workspaces/learningexamples\"\r\nDEFAULT_DATA_PATH = os.path.join(DEFAULT_SAVE_DIR, \"bank_visits_complete_2024.csv\")</code></pre>\r\n          <p class=\"figcap\">If your repo has another name, replace <code>learningexamples</code> accordingly.</p>\r\n        </div>\r\n      </div>\r\n      <p>You can also upload the CSV from the app’s sidebar instead of setting the path, but the path is convenient for repeat runs & exports.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 3: SAMPLE DATA -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Step 3</small>\r\n      <h1>Add the sample dataset</h1>\r\n      <p>Place it in your workspace or upload via the UI</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>From GitHub</h3>\r\n          <p><a href=\"https://github.com/AIforimpact22/learningexamples/blob/main/bank_visits_complete_2024.csv\" target=\"_blank\" rel=\"noopener\">Open the CSV</a> and download the raw file.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>From terminal</h3>\r\n          <pre><code>curl -L -o bank_visits_complete_2024.csv \\\r\n  \"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/bank_visits_complete_2024.csv\"</code></pre>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 4: INSTALL & RUN -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Step 4</small>\r\n      <h1>Install dependencies & launch Streamlit</h1>\r\n      <p>One‑time install, then run</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Install (inside Codespaces)</h3>\r\n          <pre><code>pip install streamlit pandas numpy scikit-learn plotly</code></pre>\r\n          <p class=\"figcap\">Plotly is optional; the app falls back to Streamlit charts if Plotly isn’t present.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Run the app</h3>\r\n          <pre><code>streamlit run histgradientboosting.py</code></pre>\r\n          <p class=\"figcap\">Open the forwarded port. Use the sidebar to load data, configure lags/rolls, choose the engine, and train.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHAT IT DOES -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>What it does</small>\r\n      <h1>Plain‑English summary</h1>\r\n      <p>Exactly what this script is aiming to do</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><b>Learn with HGB</b> — trains a Histogram‑based Gradient Boosting model (or classic GB as fallback).</li>\r\n        <li><b>Numeric‑only features</b> — calendar cycles (sin/cos), weekend/payday flags, lags, rolling means, optional lag‑1 regressors.</li>\r\n        <li><b>Forecasts next K days</b> — recursive multi‑step using its own predictions to build future features.</li>\r\n        <li><b>Stable UI</b> — unique button keys, no duplicate date inserts, no datetime sent into the model, guarded code paths.</li>\r\n        <li><b>Exports CSVs</b> — save test predictions and future forecasts to your workspace.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- TRAINING RESULT (SAMPLE) -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Sample result</small>\r\n      <h1>Training metrics (example)</h1>\r\n      <p>Your scores will vary depending on the data & settings</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\"><div class=\"kv\"><div>MAE</div><div><strong>33.09</strong></div></div></div>\r\n        <div class=\"box\"><div class=\"kv\"><div>RMSE</div><div><strong>47.62</strong></div></div></div>\r\n        <div class=\"box\"><div class=\"kv\"><div>R²</div><div><strong>0.620</strong></div></div></div>\r\n        <div class=\"box\"><div class=\"kv\"><div>MAPE %</div><div><strong>418586122.3</strong></div></div></div>\r\n      </div>\r\n      <p class=\"figcap\">These values are illustrative from one run; re‑training or different parameters will change results.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FORECAST SNAPSHOT -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Snapshot</small>\r\n      <h1>Forecast view</h1>\r\n      <p>History + next N days (overlay)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <a href=\"https://i.imgur.com/HW6xllV.png\" target=\"_blank\" rel=\"noopener\">\r\n        <img class=\"fig\" src=\"https://i.imgur.com/HW6xllV.png\" alt=\"HistGradientBoosting forecast chart\" />\r\n      </a>\r\n      <div class=\"figcap\">Example forecast produced by the app (your plot will reflect your data and settings).</div>\r\n\r\n      <div class=\"cta-row\" style=\"margin-top:12px\">\r\n        <a class=\"cta-primary\" href=\"https://github.com/AIforimpact22/learningexamples/blob/main/histgradientboosting.py\" target=\"_blank\" rel=\"noopener\">View on GitHub</a>\r\n        <a class=\"cta-secondary\" href=\"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/histgradientboosting.py\" target=\"_blank\" rel=\"noopener\">Download script</a>\r\n        <a class=\"cta-secondary\" href=\"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/bank_visits_complete_2024.csv\" target=\"_blank\" rel=\"noopener\">Download sample CSV</a>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">© <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span></div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now=new Date();\r\n  document.getElementById('y').textContent=now.getFullYear();\r\n  document.getElementById('d').textContent=now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "25a98301-8979-41f0-9fe0-dda5f8eacc6a"
        },
        {
          "kind": "article",
          "order": 6,
          "title": "Supervised Machine Learning — What It’s Good Fo",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Supervised Machine Learning — What It’s Good For (Data & Problems)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n*{box-sizing:border-box;word-wrap:break-word;overflow-wrap:break-word}\r\nbody{font:16px/1.55 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#555;margin:0;background:#fff}\r\na{color:#000;text-decoration:underline}\r\ncode,pre{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace}\r\n\r\n/* === Page wrap === */\r\n.wrap{max-width:1080px;margin:0 auto;padding:18px}\r\n\r\n/* === Card container === */\r\n.section-card{\r\n  border:1px solid #EBEBEB;border-radius:14px;overflow:hidden;\r\n  box-shadow:0 1px 2px rgba(0,0,0,.04);margin-bottom:24px;background:#ffffff\r\n}\r\n\r\n/* === Banner / header === (grey → white text) */\r\n.section-card .banner{\r\n  background:linear-gradient(120deg,#555555,#000000);\r\n  color:#FFFFFF;padding:18px 20px\r\n}\r\n.section-card .banner small{font-size:12px;letter-spacing:.08em;opacity:.9;text-transform:uppercase;color:#FFFFFF}\r\n.section-card .banner h1{margin:6px 0 4px;font-size:26px;line-height:1.2;color:#FFFFFF}\r\n.section-card .banner p{margin:0;opacity:.95;color:#FFFFFF}\r\n\r\n/* === Body === */\r\n.section-card .body{padding:20px}\r\n.section-card p,.section-card li{font-size:16px;margin-top:0;color:#555}\r\n\r\n/* === Pills & badges === */\r\n.pill{display:inline-block;padding:4px 10px;border:1px solid #A3A3A3;border-radius:999px;background:#BDBDBD;color:#000;font-size:12px;font-weight:700}\r\n\r\n/* === Grids & boxes (horizontal, no overflow) === */\r\n.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:14px}\r\n.box{border:1px solid #EBEBEB;border-radius:10px;background:#fff;padding:14px}\r\n.box h3{margin:0 0 8px;color:#000;font-size:18px}\r\n\r\n/* === Simple tables === */\r\n.table-wrap{overflow-x:auto}\r\ntable{width:100%;border-collapse:collapse;min-width:760px}\r\nth,td{border:1px solid #EBEBEB;padding:10px;text-align:left;vertical-align:top}\r\nth{background:#BDBDBD;color:#000}\r\n\r\n/* === Checklists === */\r\n.checks{display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:14px}\r\n.checks .box ul{margin:8px 0 0 18px}\r\n\r\n/* === Footer === */\r\n.footer-note{font-size:13px;color:#777;text-align:center;margin:30px 0 10px}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- OVERVIEW -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Supervised Machine Learning</small>\r\n      <h1>What Supervised ML Is Good For — Data & Problem Types</h1>\r\n      <p>Simple, end‑to‑end guidance on when and how to use supervised learning.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        <strong>Supervised machine learning</strong> learns a mapping from <em>inputs</em> (features) to a known\r\n        <em>target</em> (label). You provide past examples: <em>“features → correct answer”</em>. The model fits that\r\n        relationship and predicts the answer for new, unseen cases.\r\n      </p>\r\n      <p>\r\n        Typical tasks are summarized by these <span class=\"pill\">labels</span>:\r\n        <span class=\"pill\">Regression</span> (predict a number),\r\n        <span class=\"pill\">Classification</span> (pick a class),\r\n        <span class=\"pill\">Multi‑label</span> (multiple classes at once),\r\n        <span class=\"pill\">Ranking</span> (order items),\r\n        <span class=\"pill\">Forecasting</span> (predict future numeric values).\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DATA TYPES IT FITS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Data</small>\r\n      <h1>What kinds of data work well?</h1>\r\n      <p>Structured tables, time series, text, images/audio, and mixed modalities.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Structured / Tabular</h3>\r\n          <ul>\r\n            <li>Columns like <em>age, city, price, channel</em>, etc.</li>\r\n            <li>Great for business KPIs, risk scoring, churn, credit, QA.</li>\r\n            <li>Strong baselines: <b>Logistic/Linear models, Random Forest, XGBoost/GBMs, CatBoost</b>.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Time Series</h3>\r\n          <ul>\r\n            <li>Timestamped signals (daily sales, sensor readings).</li>\r\n            <li>Forecasting (next N steps), anomaly detection (often hybrid).</li>\r\n            <li>Approaches: <b>Feature‑engineered regressors</b>, GBMs, RF; or specialized models.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Text</h3>\r\n          <ul>\r\n            <li>Emails, tickets, reviews, documents.</li>\r\n            <li>Tasks: sentiment, topic, intent, entity extraction (NER), routing.</li>\r\n            <li>Approaches: classic TF‑IDF + linear, or <b>transformers</b>/LLM embeddings + classifier.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Images & Audio</h3>\r\n          <ul>\r\n            <li>Quality inspection, medical imaging, object detection, speech tags.</li>\r\n            <li>Approaches: CNNs/ViTs for images; spectrogram + CNNs or audio transformers.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Mixed / Multimodal</h3>\r\n          <ul>\r\n            <li>Combine text + tabular + images (e.g., e‑commerce product risk).</li>\r\n            <li>Stack or fuse embeddings with tabular features + GBM/NN classifier.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- PROBLEM → METRIC → ALGO CHEATSHEET -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Cheat sheet</small>\r\n      <h1>Match problem → labels → metrics → starter models</h1>\r\n      <p>Quick mapping you can apply directly.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"table-wrap\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Problem shape</th>\r\n              <th>Label type</th>\r\n              <th>Example</th>\r\n              <th>Good metrics</th>\r\n              <th>Starter models</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>Predict a number</td>\r\n              <td>Regression</td>\r\n              <td>Daily customers, revenue, energy use</td>\r\n              <td>MAE, RMSE, MAPE, R²</td>\r\n              <td>LinearReg, <strong>GBM (XGBoost/LightGBM/CatBoost)</strong>, RF</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Choose a class</td>\r\n              <td>Classification (binary/multiclass)</td>\r\n              <td>Approve/deny, defect type, lead quality</td>\r\n              <td>Accuracy, F1, ROC‑AUC, PR‑AUC</td>\r\n              <td>LogisticReg, <strong>GBM</strong>, RF, SVM</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Multiple tags per item</td>\r\n              <td>Multi‑label</td>\r\n              <td>Ticket topics, product attributes</td>\r\n              <td>Micro/Macro‑F1, subset accuracy</td>\r\n              <td>One‑vs‑rest linear/GBM; NN for text</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Order items by relevance</td>\r\n              <td>Ranking</td>\r\n              <td>Search results, recommenders</td>\r\n              <td>nDCG, MAP, MRR</td>\r\n              <td>GBM ranking variants, factorization</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Predict future values</td>\r\n              <td>Forecasting</td>\r\n              <td>Demand, footfall, CPU load</td>\r\n              <td>MAE, RMSE, MAPE, sMAPE</td>\r\n              <td>Feature‑engineered <strong>GBM/RF</strong>, Prophet/ARIMA, HGB</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <p style=\"margin-top:10px\" class=\"figcap\">\r\n        Tip: always start with a <strong>simple baseline</strong> (mean/last‑value for regression; majority class/logistic for classification),\r\n        then climb to RF/GBM and beyond.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHEN TO / NOT TO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Fit assessment</small>\r\n      <h1>When supervised ML is a good idea — and when it isn’t</h1>\r\n      <p>Use this quick checklist before you invest time.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"checks\">\r\n        <div class=\"box\">\r\n          <h3>Good fit ✅</h3>\r\n          <ul>\r\n            <li>You have <strong>labeled data</strong> (historical truth: “what happened”).</li>\r\n            <li>Labels are <strong>consistent</strong> and meaningful for decisions.</li>\r\n            <li>Inputs are available at prediction time (no leakage from the future).</li>\r\n            <li>Clear <strong>business action</strong> follows a prediction (approve, route, staff).</li>\r\n            <li>Performance can be measured with a specific <strong>metric</strong>.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Not a great fit ❌</h3>\r\n          <ul>\r\n            <li>No reliable labels (consider <strong>unsupervised</strong> or labeling first).</li>\r\n            <li>Labels change meaning frequently (concept drift) with no retraining plan.</li>\r\n            <li>Sample size is tiny for the task complexity (high risk of overfitting).</li>\r\n            <li>Data you’d need is <strong>not available</strong> at decision time.</li>\r\n            <li>Prediction doesn’t drive any decision (no ROI).</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- BY FIELD / USE CASES -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Applications</small>\r\n      <h1>Where supervised ML shines</h1>\r\n      <p>Business and domain examples you can map directly.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Operations & Planning</h3>\r\n          <ul>\r\n            <li>Forecast daily customers / demand / staffing needs.</li>\r\n            <li>Predict ticket resolution time; classify urgency.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Finance & Risk</h3>\r\n          <ul>\r\n            <li>Credit risk scoring; fraud likelihood.</li>\r\n            <li>Revenue/expense forecasting; late‑payment classification.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Sales & Marketing</h3>\r\n          <ul>\r\n            <li>Lead scoring; churn prediction; win probability.</li>\r\n            <li>Campaign response classification; LTV regression.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Geoscience & Engineering</h3>\r\n          <ul>\r\n            <li>Predict sensor drift, failure risk, production rates.</li>\r\n            <li>Classify facies/rock types from logs; quality flags.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Healthcare & Public Sector</h3>\r\n          <ul>\r\n            <li>Readmission risk; triage category; bed‑day forecasts.</li>\r\n            <li>Document routing, case category classification.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>E‑commerce & Content</h3>\r\n          <ul>\r\n            <li>Product categorization; return probability.</li>\r\n            <li>CTR prediction; abuse/spam classification.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- PRACTICAL GUARDRAILS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Practice</small>\r\n      <h1>Data quality, metrics, and deployment guardrails</h1>\r\n      <p>Avoid common pitfalls that sink projects.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Labels & Splits</h3>\r\n          <ul>\r\n            <li>Ensure labels are correct; reduce noise (clear definitions).</li>\r\n            <li>Use <strong>time‑based splits</strong> for time series; avoid leakage.</li>\r\n            <li>Track class imbalance; use stratified splits & proper metrics (PR‑AUC, F1).</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Metrics & Thresholds</h3>\r\n          <ul>\r\n            <li>Pick a metric that matches the decision (F1 vs ROC‑AUC, MAE vs MAPE).</li>\r\n            <li>Calibrate probability thresholds for business constraints (precision/recall trade‑off).</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Model Choice</h3>\r\n          <ul>\r\n            <li>Tabular baseline: <strong>GBM/RF</strong>; quick, strong, interpretable.</li>\r\n            <li>High‑dimensional text/image: embeddings or deep nets.</li>\r\n            <li>Always compare to a simple baseline.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Deployment & Monitoring</h3>\r\n          <ul>\r\n            <li>Batch (nightly) vs real‑time (API) depending on latency needs.</li>\r\n            <li>Monitor data drift, performance, and fairness; retrain on schedule.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- QUICK CHECKLIST -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Checklist</small>\r\n      <h1>Ready to use supervised ML? Do this:</h1>\r\n      <p>Minimal, robust path from idea to value.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li><strong>Define the label</strong> and how you’ll use the prediction.</li>\r\n        <li><strong>Assemble data</strong> you’ll have at prediction time; remove leakage.</li>\r\n        <li><strong>Pick metric(s)</strong> that match the decision cost.</li>\r\n        <li><strong>Baseline</strong> (majority/mean); then try RF/GBM; only go deeper if needed.</li>\r\n        <li><strong>Validate correctly</strong> (cross‑val; time split for time series).</li>\r\n        <li><strong>Calibrate & threshold</strong> for business targets.</li>\r\n        <li><strong>Deploy</strong> (batch or API) with monitoring & retraining plan.</li>\r\n      </ol>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">© <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span></div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now=new Date();\r\n  document.getElementById('y').textContent=now.getFullYear();\r\n  document.getElementById('d').textContent=now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "7dd72567-1b2a-4b7e-901d-339050a86d8a"
        },
        {
          "kind": "article",
          "order": 7,
          "title": "Machine Learning — Conclusion (Supervised & Unsupervised)",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Machine Learning — Conclusion (Supervised & Unsupervised)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n*{box-sizing:border-box;word-wrap:break-word;overflow-wrap:break-word}\r\nbody{font:16px/1.55 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#555;margin:0;background:#fff}\r\na{color:#000;text-decoration:underline}\r\ncode,pre{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace}\r\n\r\n/* === Page wrap === */\r\n.wrap{max-width:1080px;margin:0 auto;padding:18px}\r\n\r\n/* === Card container === */\r\n.section-card{\r\n  border:1px solid #EBEBEB;border-radius:14px;overflow:hidden;\r\n  box-shadow:0 1px 2px rgba(0,0,0,.04);margin-bottom:24px;background:#ffffff\r\n}\r\n\r\n/* === Banner / header (dark gradient → white text) === */\r\n.section-card .banner{\r\n  background:linear-gradient(120deg,#555555,#000000);\r\n  color:#FFFFFF;padding:18px 20px\r\n}\r\n.section-card .banner small{font-size:12px;letter-spacing:.08em;opacity:.9;text-transform:uppercase;color:#FFFFFF}\r\n.section-card .banner h1{margin:6px 0 4px;font-size:26px;line-height:1.2;color:#FFFFFF}\r\n.section-card .banner p{margin:0;opacity:.95;color:#FFFFFF}\r\n\r\n/* === Body === */\r\n.section-card .body{padding:20px}\r\n.section-card p,.section-card li{font-size:16px;margin-top:0;color:#555}\r\n\r\n/* === Pills === */\r\n.pill{display:inline-block;padding:4px 10px;border:1px solid #A3A3A3;border-radius:999px;background:#BDBDBD;color:#000;font-size:12px;font-weight:700}\r\n\r\n/* === Grids & boxes (horizontal, no overflow) === */\r\n.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:14px}\r\n.box{border:1px solid #EBEBEB;border-radius:10px;background:#fff;padding:14px}\r\n.box h3{margin:0 0 8px;color:#000;font-size:18px}\r\n\r\n/* === Tables === */\r\n.table-wrap{overflow-x:auto}\r\ntable{width:100%;border-collapse:collapse;min-width:760px}\r\nth,td{border:1px solid #EBEBEB;padding:10px;text-align:left;vertical-align:top}\r\nth{background:#BDBDBD;color:#000}\r\n\r\n/* === Call-to-action buttons === */\r\n.cta-row{display:flex;gap:10px;margin-top:18px;flex-wrap:wrap}\r\n.cta-row a{text-decoration:none;padding:10px 16px;border-radius:8px;font-weight:700}\r\n.cta-primary{border:1px solid #000;background:#000;color:#EBEBEB}\r\n.cta-secondary{border:1px solid #000;color:#000;background:#ffffff}\r\n\r\n/* === Footer === */\r\n.footer-note{font-size:13px;color:#777;text-align:center;margin:30px 0 10px}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- CONCLUSION OVERVIEW -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Machine Learning</small>\r\n      <h1>Conclusion — Supervised & Unsupervised, Together</h1>\r\n      <p>From raw data to decisions: what you learned, when to use each method, and what’s next.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        In this module you learned two complementary approaches:\r\n        <span class=\"pill\">Unsupervised</span> (discover structure without labels)\r\n        and <span class=\"pill\">Supervised</span> (predict a known target).\r\n        Used together, they move you from <em>exploration</em> → <em>explanation</em> → <em>action</em>.\r\n      </p>\r\n      <div class=\"grid\" style=\"margin-top:8px\">\r\n        <div class=\"box\">\r\n          <h3>Unsupervised → Explore</h3>\r\n          <ul>\r\n            <li>Reveal groups, segments, and anomalies.</li>\r\n            <li>Reduce dimensionality to what really matters.</li>\r\n            <li>Build intuition and create better features for supervised models.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Supervised → Predict</h3>\r\n          <ul>\r\n            <li>Forecast numbers (regression) and classify outcomes (classification).</li>\r\n            <li>Turn insights into deployable decisions with clear metrics.</li>\r\n            <li>Integrate into apps, dashboards, and operations.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Together → Operate</h3>\r\n          <ul>\r\n            <li>Use clustering to define segments, then predict segment behavior.</li>\r\n            <li>Automate monitoring & retraining with tracked metrics.</li>\r\n            <li>Close the loop with visualizations and stakeholder feedback.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHEN TO USE WHAT (SIDE-BY-SIDE) -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Decisions</small>\r\n      <h1>When to choose unsupervised vs. supervised</h1>\r\n      <p>Quick comparison to guide your next project.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"table-wrap\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Dimension</th>\r\n              <th>Unsupervised Learning</th>\r\n              <th>Supervised Learning</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>Label requirement</td>\r\n              <td>No labels needed; discover structure in raw data.</td>\r\n              <td>Requires labeled outcomes (ground truth) to learn mapping.</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Primary goal</td>\r\n              <td>Grouping, compression, anomaly surfacing, hypothesis generation.</td>\r\n              <td>Accurate predictions for numbers or classes; decision support.</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Typical outputs</td>\r\n              <td>Cluster IDs, embeddings, distance scores, outlier flags.</td>\r\n              <td>Predicted values/probabilities, ranked lists, forecasts.</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Great for</td>\r\n              <td>Customer segmentation, sensor pattern mining, pre‑label analysis.</td>\r\n              <td>Demand forecasting, risk scoring, routing, quality detection.</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Common methods</td>\r\n              <td>K‑Means, DBSCAN, Agglomerative, PCA/UMAP, GMM.</td>\r\n              <td>Linear/Logistic, Random Forest, Gradient Boosting, HGB, deep nets.</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Key metrics</td>\r\n              <td>Silhouette, DB index, stability/consistency, business interpretability.</td>\r\n              <td>MAE/RMSE/MAPE/R² for regression; Accuracy/F1/ROC‑AUC/PR‑AUC for classification.</td>\r\n            </tr>\r\n            <tr>\r\n              <td>How they connect</td>\r\n              <td>Creates features/segments that improve supervised performance.</td>\r\n              <td>Validates and operationalizes unsupervised discoveries.</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- QUALITY & OPERATIONS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Production mindset</small>\r\n      <h1>Quality, safety, and sustainability</h1>\r\n      <p>Guardrails that keep models useful after launch.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Data discipline</h3>\r\n          <ul>\r\n            <li>Prevent leakage (only use data available at decision time).</li>\r\n            <li>Track versions of data, features, and models.</li>\r\n            <li>Document label definitions and edge cases.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Evaluation</h3>\r\n          <ul>\r\n            <li>Choose metrics tied to decisions & costs.</li>\r\n            <li>Use time‑aware splits for time series; stratify for imbalanced classes.</li>\r\n            <li>Benchmark against simple baselines before “fancy.”</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Monitoring</h3>\r\n          <ul>\r\n            <li>Watch drift (data & labels), performance decay, and latency.</li>\r\n            <li>Schedule retraining; keep explainability artifacts updated.</li>\r\n            <li>Log predictions & decisions for audit and improvement.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Communication</h3>\r\n          <ul>\r\n            <li>Visualize results (calendars, trends, segments) for stakeholders.</li>\r\n            <li>Publish clear “how to act” rules for each prediction range.</li>\r\n            <li>Close the loop with feedback into data and labels.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHAT WE DELIBERATELY DID NOT COVER -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Scope</small>\r\n      <h1>Where are LLMs?</h1>\r\n      <p>Reserved for its own module to give it proper depth.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        We <strong>intentionally did not cover LLMs</strong> (Large Language Models) here. They deserve a dedicated module\r\n        where we’ll focus on <em>retrieval‑augmented generation (RAG)</em>, <em>prompt engineering</em>, <em>evaluation</em>,\r\n        and how LLMs can accelerate both supervised and unsupervised workflows (e.g., semi‑automatic labeling, feature\r\n        extraction from text/images, doc Q&A, agentic pipelines). You’ll get hands‑on with those next.\r\n      </p>\r\n      <p style=\"margin-top:8px\">\r\n        For now, you have a solid foundation: turn raw data into insight with unsupervised methods, then ship\r\n        predictions with supervised models—wrapped in reliable UX and databases.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- NEXT STEPS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Next steps</small>\r\n      <h1>What you should do now</h1>\r\n      <p>Pick one dataset, one outcome, and push it to production.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li><strong>Choose a problem</strong> with a clear decision (staffing, risk, routing, demand).</li>\r\n        <li><strong>Explore</strong> with clustering/dimensionality reduction; define segments or anomalies.</li>\r\n        <li><strong>Engineer features</strong> (lags/rolls, calendar, segment flags) and train a baseline RF/GBM.</li>\r\n        <li><strong>Validate</strong> with the right metric; compare to simple baselines.</li>\r\n        <li><strong>Ship</strong> via Streamlit UI + your SQL/Neon backend; add monitoring.</li>\r\n        <li><strong>Iterate</strong> (small, continuous improvements: data, features, thresholds).</li>\r\n      </ol>\r\n      <div class=\"cta-row\">\r\n        <a class=\"cta-primary\" href=\"#llm-module\">Go to LLM Module (Next)</a>\r\n        <a class=\"cta-secondary\" href=\"#index\">Back to Module Index</a>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">© <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span></div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now=new Date();\r\n  document.getElementById('y').textContent=now.getFullYear();\r\n  document.getElementById('d').textContent=now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "24be1952-087c-496b-ae09-fbc8278156ad"
        }
      ]
    },
    {
      "order": 8,
      "title": "Module 8: Operational LLMs: Explain, Extract, Automate",
      "lessons": [
        {
          "kind": "article",
          "order": 1,
          "title": "LLM Module — Introduction",
          "content": {
            "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>LLM Module — Introduction</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n*{box-sizing:border-box;word-wrap:break-word;overflow-wrap:break-word}\r\nbody{font:16px/1.55 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#555;margin:0;background:#fff}\r\na{color:#000;text-decoration:underline}\r\ncode,pre{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace}\r\n\r\n/* === Page wrap === */\r\n.wrap{max-width:1080px;margin:0 auto;padding:18px}\r\n\r\n/* === Card container === */\r\n.section-card{\r\n  border:1px solid #EBEBEB;border-radius:14px;overflow:hidden;\r\n  box-shadow:0 1px 2px rgba(0,0,0,.04);margin-bottom:24px;background:#ffffff\r\n}\r\n\r\n/* === Banner / header (dark gradient → white text) === */\r\n.section-card .banner{\r\n  background:linear-gradient(120deg,#555555,#000000);\r\n  color:#FFFFFF;padding:18px 20px\r\n}\r\n.section-card .banner small{font-size:12px;letter-spacing:.08em;opacity:.9;text-transform:uppercase;color:#FFFFFF}\r\n.section-card .banner h1{margin:6px 0 4px;font-size:26px;line-height:1.2;color:#FFFFFF}\r\n.section-card .banner p{margin:0;opacity:.95;color:#FFFFFF}\r\n\r\n/* === Body === */\r\n.section-card .body{padding:20px}\r\n.section-card p,.section-card li{font-size:16px;margin-top:0;color:#555}\r\n\r\n/* === Pills & tags === */\r\n.pills{display:flex;flex-wrap:wrap;gap:8px;margin-top:8px}\r\n.pill{display:inline-block;padding:6px 10px;border:1px solid #A3A3A3;border-radius:999px;background:#BDBDBD;color:#000;font-size:13px;font-weight:700}\r\n\r\n/* === Grids & boxes (horizontal, no overflow) === */\r\n.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:14px}\r\n.box{border:1px solid #EBEBEB;border-radius:10px;background:#fff;padding:14px}\r\n.box h3{margin:0 0 8px;color:#000;font-size:18px}\r\n\r\n/* === Two-column side-by-side section === */\r\n.split{display:grid;grid-template-columns:repeat(auto-fit,minmax(320px,1fr));gap:14px}\r\n\r\n/* === Call-to-action buttons === */\r\n.cta-row{display:flex;gap:10px;margin-top:18px;flex-wrap:wrap}\r\n.cta-row a{text-decoration:none;padding:10px 16px;border-radius:8px;font-weight:700}\r\n.cta-primary{border:1px solid #000;background:#000;color:#EBEBEB}\r\n.cta-secondary{border:1px solid #000;color:#000;background:#ffffff}\r\n\r\n/* === Footer === */\r\n.footer-note{font-size:13px;color:#777;text-align:center;margin:30px 0 10px}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO / TITLES -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Large Language Models (LLMs)</small>\r\n      <h1>From Data to Narrative — and Back Again</h1>\r\n      <p>How LLMs help you explain your data, collect new data from language, and build smarter apps.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p><strong>Suggested module titles</strong> (pick one):</p>\r\n      <div class=\"pills\">\r\n        <span class=\"pill\">Data ↔ Narrative with LLMs</span>\r\n      </div>\r\n\r\n      <p style=\"margin-top:12px\">\r\n        This module is about <em>two-way translation</em> between numbers and words. LLMs can\r\n        turn your <strong>data</strong> (tables, time series, logs) into <strong>clear narratives</strong>\r\n        your team understands, and they can turn messy <strong>language</strong> (emails, forms, reports)\r\n        into <strong>structured data</strong> your systems can query. You’ll learn patterns that\r\n        make this reliable, safe, and useful in real products.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHY LLMs -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Why it matters</small>\r\n      <h1>LLMs bridge people and data</h1>\r\n      <p>Explain complex insights and capture new signals with the same interface: natural language.</p>\r\n    </div>\r\n    <div class=\"body split\">\r\n      <div class=\"box\">\r\n        <h3>Data → Narrative (generation)</h3>\r\n        <ul>\r\n          <li><strong>Explain KPIs:</strong> “Why did revenue drop 8% last week?” → concise, source‑linked summary.</li>\r\n          <li><strong>Describe segments:</strong> Turn cluster profiles into human‑readable personas.</li>\r\n          <li><strong>Auto‑reports:</strong> Weekly ops memo from SQL results + charts.</li>\r\n          <li><strong>Decision notes:</strong> Translate anomaly alerts into next‑step actions.</li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"box\">\r\n        <h3>Narrative → Data (extraction/structuring)</h3>\r\n        <ul>\r\n          <li><strong>Email → JSON:</strong> Pull dates, amounts, IDs into a schema your DB accepts.</li>\r\n          <li><strong>Docs → rows:</strong> Extract tables from PDFs and normalize field names.</li>\r\n          <li><strong>Text → SQL intent:</strong> “Show top branches by growth” → validated SQL.</li>\r\n          <li><strong>Chat → tickets:</strong> Turn conversation into labeled tasks with priorities.</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- COMMON PATTERNS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Patterns</small>\r\n      <h1>What you’ll build and practice</h1>\r\n      <p>Reusable blueprints that survive real‑world data and users.</p>\r\n    </div>\r\n    <div class=\"body grid\">\r\n      <div class=\"box\">\r\n        <h3>LLM Report Writer</h3>\r\n        <p>Feed metrics and charts; get a well‑structured executive summary with “so what / now what”.</p>\r\n      </div>\r\n      <div class=\"box\">\r\n        <h3>SQL Co‑pilot</h3>\r\n        <p>Natural‑language questions to validated SQL over your schema (with safety checks and examples).</p>\r\n      </div>\r\n      <div class=\"box\">\r\n        <h3>JSON Extractor</h3>\r\n        <p>Schema‑constrained extraction (e.g., <code>{date, branch_id, issue, severity}</code>) from free text.</p>\r\n      </div>\r\n      <div class=\"box\">\r\n        <h3>RAG Q&A over Docs</h3>\r\n        <p>Retrieve relevant passages from your knowledge base; generate grounded answers with citations.</p>\r\n      </div>\r\n      <div class=\"box\">\r\n        <h3>Classification & Routing</h3>\r\n        <p>Tag messages and route them (support, risk, sales) with confidence thresholds and fallbacks.</p>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- GUARDRAILS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Reliability</small>\r\n      <h1>Good practices & guardrails</h1>\r\n      <p>Make outputs trustworthy and operations sustainable.</p>\r\n    </div>\r\n    <div class=\"body grid\">\r\n      <div class=\"box\">\r\n        <h3>Validation</h3>\r\n        <ul>\r\n          <li>Never trust blindly; validate numbers and IDs against your DB.</li>\r\n          <li>Use <strong>schema‑constrained</strong> outputs (JSON) and reject on mismatch.</li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"box\">\r\n        <h3>Determinism</h3>\r\n        <ul>\r\n          <li>Lower temperature for consistency; add examples in prompts.</li>\r\n          <li>Keep <strong>prompt + test cases</strong> in version control.</li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"box\">\r\n        <h3>Privacy & cost</h3>\r\n        <ul>\r\n          <li>Mask PII; minimize context; cache frequent results.</li>\r\n          <li>Prefer <strong>retrieval</strong> over giant prompts.</li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"box\">\r\n        <h3>Failure handling</h3>\r\n        <ul>\r\n          <li>Set timeouts, retries, and user‑visible fallbacks.</li>\r\n          <li>Log inputs/outputs for audit and continuous improvement.</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- HOW IT FITS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Where it fits</small>\r\n      <h1>Your data + LLM workflow</h1>\r\n      <p>Plug LLMs into the stack you already built (DB, dashboards, apps).</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li><strong>Prepare data:</strong> SQL/warehouse tables, clean columns, meaningful names.</li>\r\n        <li><strong>Choose direction:</strong> Data→Narrative (explain) or Narrative→Data (extract) — or both.</li>\r\n        <li><strong>Design prompt + schema:</strong> Examples, constraints, and a target JSON shape when needed.</li>\r\n        <li><strong>Validate & store:</strong> Check outputs, write to DB, and surface in your UI.</li>\r\n        <li><strong>Monitor:</strong> Track quality, latency, and errors; iterate prompts and retrieval.</li>\r\n      </ol>\r\n\r\n      <div class=\"cta-row\">\r\n        <a class=\"cta-primary\" href=\"#llm-setup\">Next: Set up your LLM environment</a>\r\n        <a class=\"cta-secondary\" href=\"#module-index\">Back to module index</a>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">© <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span></div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now=new Date();\r\n  document.getElementById('y').textContent=now.getFullYear();\r\n  document.getElementById('d').textContent=now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "571829ac-3bbe-4b54-ae81-04a9fcff5f0b"
        },
        {
          "kind": "article",
          "order": 2,
          "title": "General‑Purpose LLM APIs — Access, Usage & Pricing",
          "content": {
            "body_md": "<!doctype html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"utf-8\" />\r\n  <title>General‑Purpose LLM APIs — Access, Usage & Pricing (as of 28 Sep 2025)</title>\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n  <style>\r\n    :root{\r\n      --ink:#0b1220;--ink-soft:#344054;--bg:#ffffff;--bg-soft:#BDBDBD;\r\n      --accent:#4f46e5;--accent-2:#22c55e;--muted:#6b7280;--ok:#16a34a;\r\n    }\r\n    html,body{margin:0;padding:0;background:var(--bg);color:var(--ink);font-family:Inter,Segoe UI,system-ui,-apple-system,Helvetica,Arial,sans-serif;line-height:1.55}\r\n    .hero{\r\n      background:linear-gradient(180deg,#111827 0%,#0b1220 60%,#1f2937 100%);\r\n      color:#fff;padding:56px 24px 40px\r\n    }\r\n    .wrap{max-width:1080px;margin:0 auto}\r\n    h1{font-size: clamp(28px,4vw,40px);letter-spacing:.2px;margin:0 0 8px}\r\n    .subtitle{color:#d1d5db;font-size:15px}\r\n    .tag{display:inline-block;font-size:12px;letter-spacing:.4px;color:#111827;background:#BDBDBD;border-radius:999px;padding:6px 10px;margin-right:8px}\r\n    .content{padding:28px 24px}\r\n    h2{font-size: clamp(22px,3vw,28px);margin:28px 0 8px}\r\n    h3{font-size:18px;margin:18px 0 6px}\r\n    p{margin:10px 0}\r\n    .note{background:#BDBDBD;padding:12px 14px;border-radius:10px;color:#111827}\r\n    .grid{display:grid;grid-template-columns:repeat(12,1fr);gap:16px}\r\n    .card{\r\n      grid-column: span 12; background:#fff;border:1px solid #e5e7eb;border-radius:14px;padding:18px;\r\n      box-shadow:0 1px 0 rgba(16,24,40,.04)\r\n    }\r\n    @media(min-width:860px){.card--half{grid-column: span 6}}\r\n    .provider{\r\n      display:flex;flex-direction:column;gap:10px;border-left:4px solid var(--accent);padding-left:14px\r\n    }\r\n    .provider h3{margin:0}\r\n    .bullets{margin:6px 0 0 18px}\r\n    .kv{display:grid;grid-template-columns: 140px 1fr;gap:8px;margin:8px 0}\r\n    .kv div:first-child{color:var(--muted)}\r\n    .pill{display:inline-block;background:#BDBDBD;color:#111827;border-radius:999px;padding:4px 10px;font-size:12px;margin:2px 6px 2px 0}\r\n    a{color:var(--accent);text-decoration:none}\r\n    a:hover{text-decoration:underline}\r\n    code{background:#BDBDBD;color:#111827;padding:2px 6px;border-radius:6px}\r\n    .matrix{border-collapse:collapse;width:100%;overflow:auto;border:1px solid #e5e7eb;border-radius:10px}\r\n    .matrix th,.matrix td{padding:10px 12px;border-top:1px solid #f1f5f9;text-align:left}\r\n    .matrix th{background:#f8fafc;font-weight:600}\r\n    .footer{border-top:1px dashed #e5e7eb;margin-top:28px;padding-top:20px;color:var(--muted);font-size:14px}\r\n  </style>\r\n</head>\r\n<body>\r\n  <header class=\"hero\">\r\n    <div class=\"wrap\">\r\n      <div class=\"tag\">Guide</div>\r\n      <div class=\"tag\">Updated: 28 Sep 2025</div>\r\n      <h1>General‑Purpose LLM APIs — where to get access, how to use them, and how pricing works</h1>\r\n      <p class=\"subtitle\">This page explains access & usage patterns and links to the official pricing pages for the major providers. Always verify on the live pages before launch.</p>\r\n    </div>\r\n  </header>\r\n\r\n  <main class=\"content wrap\">\r\n\r\n    <section class=\"card\">\r\n      <h2>How LLM API pricing generally works (quick primer)</h2>\r\n      <ul class=\"bullets\">\r\n        <li><strong>Pay‑as‑you‑go</strong> — usually priced <em>per million tokens</em>. Inputs and outputs can have different rates.</li>\r\n        <li><strong>Multimodal</strong> — text is standard; many APIs also price <em>image generation</em>, <em>vision</em>, <em>speech‑to‑text</em>, <em>text‑to‑speech</em>, and <em>embeddings</em> separately.</li>\r\n        <li><strong>Free tiers / credits</strong> — some offer trials or monthly free quotas; production usage is billed.</li>\r\n        <li><strong>Tokens</strong> ≈ sub‑word units. Longer prompts/responses consume more tokens; providers often include calculators or examples.</li>\r\n      </ul>\r\n      <p class=\"note\"><strong>Tip:</strong> Budget by multiplying your average <em>input</em> tokens + expected <em>output</em> tokens by the model’s per‑million rates. Cache, truncate context, and stream outputs to control costs.</p>\r\n    </section>\r\n\r\n    <!-- Providers -->\r\n    <section class=\"grid\">\r\n      <div class=\"card card--half\">\r\n        <div class=\"provider\" style=\"border-color:#7c3aed\">\r\n          <h3>OpenAI (GPT family)</h3>\r\n          <div class=\"kv\"><div>Access</div><div>Create an OpenAI Platform account, generate an API key, call Chat/Responses, Images, Audio.</div></div>\r\n          <div class=\"kv\"><div>Usage</div><div>Text generation & tools; image generation; speech‑to‑text and text‑to‑speech — all usage‑metered.</div></div>\r\n          <div class=\"kv\"><div>Pricing</div><div>See the live <a href=\"https://openai.com/pricing\" target=\"_blank\" rel=\"noopener\">OpenAI Pricing</a>.</div></div>\r\n          <div>\r\n            <span class=\"pill\">Text</span><span class=\"pill\">Vision</span><span class=\"pill\">Images</span><span class=\"pill\">Audio (STT/TTS)</span><span class=\"pill\">Embeddings</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"card card--half\">\r\n        <div class=\"provider\" style=\"border-color:#0ea5e9\">\r\n          <h3>Google Gemini (Developer API / AI Studio)</h3>\r\n          <div class=\"kv\"><div>Access</div><div>Get an API key in Google AI Studio (or use Vertex AI for enterprise).</div></div>\r\n          <div class=\"kv\"><div>Usage</div><div>Text/code generation, vision (image/video understanding), function/tool use.</div></div>\r\n          <div class=\"kv\"><div>Pricing</div><div>Check <a href=\"https://ai.google.dev/pricing\" target=\"_blank\" rel=\"noopener\">Gemini Developer API Pricing</a>.</div></div>\r\n          <div><span class=\"pill\">Text</span><span class=\"pill\">Vision</span><span class=\"pill\">Function calling</span></div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"card card--half\">\r\n        <div class=\"provider\" style=\"border-color:#22c55e\">\r\n          <h3>Anthropic Claude</h3>\r\n          <div class=\"kv\"><div>Access</div><div>Create a key in the Anthropic console; call the Messages API.</div></div>\r\n          <div class=\"kv\"><div>Usage</div><div>Reasoning‑focused text with tool use; image inputs supported.</div></div>\r\n          <div class=\"kv\"><div>Pricing</div><div>See the current <a href=\"https://www.anthropic.com/pricing\" target=\"_blank\" rel=\"noopener\">Claude Pricing</a>.</div></div>\r\n          <div><span class=\"pill\">Text</span><span class=\"pill\">Vision (input)</span><span class=\"pill\">Tools</span></div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"card card--half\">\r\n        <div class=\"provider\" style=\"border-color:#ef4444\">\r\n          <h3>xAI Grok</h3>\r\n          <div class=\"kv\"><div>Access</div><div>Generate a key in the xAI console; use chat/completions and tools.</div></div>\r\n          <div class=\"kv\"><div>Usage</div><div>Text and tool use; vision support varies by model generation.</div></div>\r\n          <div class=\"kv\"><div>Pricing</div><div>See the <a href=\"https://docs.x.ai/docs/getting-started\" target=\"_blank\" rel=\"noopener\">xAI API docs</a> for models & pricing.</div></div>\r\n          <div><span class=\"pill\">Text</span><span class=\"pill\">Tools</span></div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"card card--half\">\r\n        <div class=\"provider\" style=\"border-color:#f59e0b\">\r\n          <h3>Cohere (Command / Aya / Embed / Rerank)</h3>\r\n          <div class=\"kv\"><div>Access</div><div>Trial API key for evaluation; Production key for paid use.</div></div>\r\n          <div class=\"kv\"><div>Usage</div><div>Text generation, multilingual, embeddings, reranking. Enterprise/private deployment options.</div></div>\r\n          <div class=\"kv\"><div>Pricing</div><div>See <a href=\"https://cohere.com/pricing\" target=\"_blank\" rel=\"noopener\">Cohere Pricing</a> (trial vs production, and model tiers).</div></div>\r\n          <div><span class=\"pill\">Text</span><span class=\"pill\">Embeddings</span><span class=\"pill\">Rerank</span></div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- Picking guidance -->\r\n    <section class=\"card\">\r\n      <h2>What to pick (quick suggestions)</h2>\r\n      <table class=\"matrix\">\r\n        <thead>\r\n          <tr><th>If you need…</th><th>Consider</th><th>Why</th></tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr><td>Unified text + image gen + audio in one place</td><td>OpenAI</td><td>Broad modality coverage and mature SDKs/docs.</td></tr>\r\n          <tr><td>Fast, cost‑optimized text/vision for apps</td><td>Google Gemini (Flash tiers)</td><td>Speed‑oriented tiers with clear per‑token pricing.</td></tr>\r\n          <tr><td>Analytical reasoning & tool use</td><td>Anthropic Claude</td><td>Strong reasoning‑focused models.</td></tr>\r\n          <tr><td>Simple alternative stack with clear usage table</td><td>xAI Grok</td><td>Lean API surface and transparent pricing docs.</td></tr>\r\n          <tr><td>Enterprise search/RAG (embeddings, rerank)</td><td>Cohere</td><td>Focused retrieval models and enterprise options.</td></tr>\r\n        </tbody>\r\n      </table>\r\n    </section>\r\n\r\n    <!-- Getting started -->\r\n    <section class=\"card\">\r\n      <h2>Getting started (same 5 steps almost everywhere)</h2>\r\n      <ol class=\"bullets\">\r\n        <li>Create an account and <strong>API key</strong> in the provider console.</li>\r\n        <li>Store the key in a <strong>secret</strong> (env var, vault).</li>\r\n        <li>Install the SDK or call HTTPS; start with a basic <code>chat</code>/<code>text</code> endpoint.</li>\r\n        <li>Estimate cost: (<em>input tokens</em> + <em>output tokens</em>) × <em>per‑million rate</em> for your model.</li>\r\n        <li>Add modalities (vision, image gen, STT/TTS) only if needed; monitor usage in the dashboard.</li>\r\n      </ol>\r\n      <p class=\"note\"><strong>Keep costs in check:</strong> prefer shorter prompts, reuse system prompts, enable streaming, cache retrieval results, and log token usage per request.</p>\r\n    </section>\r\n\r\n    <section class=\"footer\">\r\n      <p><strong>Important:</strong> Pricing and model availability change quickly. Use the provider links above for the authoritative, latest numbers before you ship.</p>\r\n    </section>\r\n  </main>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "11194a30-8c0c-4b5f-a108-0fe095f0bd66"
        },
        {
          "kind": "article",
          "order": 3,
          "title": "Data Apps in Practice",
          "content": {
            "body_md": "<!doctype html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"utf-8\" />\r\n  <title>LLM + Data Apps in Practice — Gemini‑powered Advice on Top of Deterministic Calculators</title>\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n  <style>\r\n    :root{\r\n      --ink:#0b1220;--ink-soft:#374151;--bg:#ffffff;--bg-soft:#BDBDBD;\r\n      --brand:#2f6feb;--ok:#16a34a;--warn:#f59e0b;--danger:#dc2626;\r\n    }\r\n    html,body{margin:0;padding:0;background:var(--bg);color:var(--ink);\r\n      font-family:Inter,Segoe UI,system-ui,-apple-system,Helvetica,Arial,sans-serif;line-height:1.55}\r\n    .hero{background:linear-gradient(180deg,#0f172a 0%,#1f2937 60%,#334155 100%);color:#fff;padding:56px 24px 40px}\r\n    .wrap{max-width:1080px;margin:0 auto}\r\n    h1{font-size:clamp(28px,4vw,40px);letter-spacing:.2px;margin:0 0 8px}\r\n    .subtitle{color:#e5e7eb;font-size:15px}\r\n    .pill{display:inline-block;background:#BDBDBD;color:#111827;border-radius:999px;padding:6px 10px;font-size:12px;margin:0 8px 0 0}\r\n    .content{padding:28px 24px}\r\n    h2{font-size:clamp(22px,3vw,28px);margin:28px 0 10px}\r\n    h3{font-size:18px;margin:18px 0 6px}\r\n    p{margin:10px 0}\r\n    a{color:var(--brand);text-decoration:none}\r\n    a:hover{text-decoration:underline}\r\n    .grid{display:grid;grid-template-columns:repeat(12,1fr);gap:16px}\r\n    .card{\r\n      grid-column:span 12;background:#fff;border:1px solid #e5e7eb;border-radius:14px;padding:18px;\r\n      box-shadow:0 1px 0 rgba(16,24,40,.04)\r\n    }\r\n    @media(min-width:860px){.half{grid-column:span 6}}\r\n    .note{background:var(--bg-soft);color:#111827;border-radius:12px;padding:12px 14px}\r\n    .list{margin:6px 0 0 18px}\r\n    .kv{display:grid;grid-template-columns:160px 1fr;gap:8px;margin:10px 0}\r\n    .kv div:first-child{color:#6b7280}\r\n    .imgcard{\r\n      border:1px solid #e5e7eb;border-radius:12px;overflow:hidden;background:#fff\r\n    }\r\n    .imgcard img{display:block;width:100%;height:auto}\r\n    .imgcap{padding:8px 12px;font-size:13px;color:#374151;background:#fafafa;border-top:1px solid #f1f5f9}\r\n    .flow{\r\n      display:grid;grid-template-columns:repeat(5,1fr);gap:10px;align-items:stretch;margin-top:8px\r\n    }\r\n    .flow .box{background:#fff;border:1px solid #e5e7eb;border-radius:10px;padding:12px}\r\n    .flow .box h4{margin:0 0 6px;font-size:14px}\r\n    .flow .box p{margin:0;font-size:13px;color:#374151}\r\n    .bul{margin:6px 0 0 18px}\r\n    code,pre{background:#BDBDBD;color:#111827;border-radius:6px}\r\n    code{padding:2px 6px}\r\n    pre{padding:10px 12px;overflow:auto}\r\n    .footer{border-top:1px dashed #e5e7eb;margin-top:28px;padding-top:18px;color:#6b7280;font-size:14px}\r\n  </style>\r\n</head>\r\n<body>\r\n  <!-- HERO -->\r\n  <header class=\"hero\">\r\n    <div class=\"wrap\">\r\n      <span class=\"pill\">Real App Case Study</span>\r\n      <span class=\"pill\">Gemini API</span>\r\n      <h1>LLM + Data Apps in Practice</h1>\r\n      <p class=\"subtitle\">How a deterministic calculator becomes an intelligent advisor: solar sizing with device inventory + Gemini suggestions, and an exam agent that auto‑generates questions and grading.</p>\r\n    </div>\r\n  </header>\r\n\r\n  <main class=\"content wrap\">\r\n\r\n    <!-- WHAT THIS PAGE COVERS -->\r\n    <section class=\"card\">\r\n      <h2>What this page covers</h2>\r\n      <ul class=\"list\">\r\n        <li><strong>Baseline app:</strong> a Streamlit calculator that sizes solar panels & cost from a user’s device inventory.</li>\r\n        <li><strong>LLM add‑on (Gemini):</strong> for each entered device, propose <em>lower‑consumption alternatives</em> and <em>usage tips</em> to reduce load & budget.</li>\r\n        <li><strong>Second example:</strong> an exam agent that reads the week’s content, <em>generates questions</em>, understands your answers, and <em>scores</em> them.</li>\r\n        <li><strong>Design patterns:</strong> prompts, data passed to the LLM, guardrails, cost control, and UI feedback loops.</li>\r\n      </ul>\r\n      <p class=\"note\"><strong>Live demo (solar):</strong> <a href=\"https://coolassistant.streamlit.app/\" target=\"_blank\" rel=\"noopener\">coolassistant.streamlit.app</a></p>\r\n    </section>\r\n\r\n    <!-- SOLAR CALCULATOR + LLM -->\r\n    <section class=\"grid\">\r\n      <div class=\"card\">\r\n        <h2>Case 1 — Solar sizing with Gemini‑powered advice</h2>\r\n        <div class=\"kv\">\r\n          <div>Goal</div>\r\n          <div>Turn a static sizing tool into a <em>smart advisor</em> that suggests lower‑wattage substitutes and consumption tips per device.</div>\r\n        </div>\r\n        <div class=\"kv\">\r\n          <div>Baseline</div>\r\n          <div>Users enter a device inventory (wattage × hours × quantity). The app computes daily kWh, required PV size, and estimated cost.</div>\r\n        </div>\r\n        <div class=\"kv\">\r\n          <div>LLM step</div>\r\n          <div>For each device, Gemini proposes alternative models/approaches with lower energy draw, then the UI shows “what to replace/change” and “how much you save”.</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"card half imgcard\">\r\n        <img alt=\"Inventory data entry UI\" src=\"https://i.imgur.com/XgvJLZb.png\" />\r\n        <div class=\"imgcap\">Data entry: add devices, wattage, hours, quantity (deterministic calculation stays local).</div>\r\n      </div>\r\n\r\n      <div class=\"card half imgcard\">\r\n        <img alt=\"Gemini feedback on inventory\" src=\"https://i.imgur.com/2LqdgBo.png\" />\r\n        <div class=\"imgcap\">LLM feedback: for each device, suggest a lower‑consumption alternative and practical tips.</div>\r\n      </div>\r\n\r\n      <div class=\"card\">\r\n        <h3>How the flow works</h3>\r\n        <div class=\"flow\">\r\n          <div class=\"box\">\r\n            <h4>1) User inputs</h4>\r\n            <p>Device list → wattage, hours/day, qty.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h4>2) Local math</h4>\r\n            <p>Compute daily kWh, PV size, panel count, cost.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h4>3) Compact context</h4>\r\n            <p>Create a minimal JSON of devices (name, W, h, qty).</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h4>4) Gemini call</h4>\r\n            <p>Prompt asks for lower‑watt alternatives + usage tips.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h4>5) Merge advice</h4>\r\n            <p>Show suggestions alongside the calculator results.</p>\r\n          </div>\r\n        </div>\r\n\r\n        <h3 style=\"margin-top:16px\">Prompt pattern (concept)</h3>\r\n        <pre><code>// System (intent)\r\nYou are an energy-efficiency advisor. Be specific, practical, and safe.\r\n\r\n// User (structured input)\r\nDevices (JSON):\r\n[\r\n  {\"name\":\"TV 55in LED\",\"watt\":110,\"hours\":5,\"qty\":1},\r\n  {\"name\":\"Fridge 300L\",\"watt\":180,\"hours\":24,\"qty\":1}\r\n]\r\nConstraints:\r\n- Prefer alternatives that are realistically available in 2024–2025.\r\n- Give ballpark watt ranges and % savings.\r\n- Return JSON with fields: device, suggestion, est_savings_watts, notes.</code></pre>\r\n\r\n        <h3>What the LLM adds (beyond math)</h3>\r\n        <ul class=\"bul\">\r\n          <li>Suggests <strong>market‑plausible alternatives</strong> (e.g., inverter fridges, LED options, high‑efficiency AC).</li>\r\n          <li>Reframes user behavior (<em>off‑peak use, smart plugs, thermostat ranges</em>) to lower baseline load.</li>\r\n          <li>Provides <em>explanations</em> that improve trust and decisions, not just numbers.</li>\r\n        </ul>\r\n\r\n        <h3>Guardrails & cost control</h3>\r\n        <ul class=\"bul\">\r\n          <li><strong>Scope the context:</strong> send only the compact device JSON, not the whole session.</li>\r\n          <li><strong>Ask for structured output:</strong> JSON fields you can render deterministically.</li>\r\n          <li><strong>Disclaimers:</strong> “Models/examples are indicative. Prices/availability vary.”</li>\r\n          <li><strong>Token budget:</strong> cap response length, reuse a fixed system prompt, cache common device tips.</li>\r\n        </ul>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- EXAM AGENT -->\r\n    <section class=\"card\">\r\n      <h2>Case 2 — Exam agent: generate questions, understand answers, assign marks</h2>\r\n      <div class=\"kv\">\r\n        <div>Goal</div>\r\n        <div>Make weekly assessments dynamic: the agent ingests the week’s content, produces questions, evaluates free‑text answers, and gives <em>rubric‑based</em> scores.</div>\r\n      </div>\r\n      <div class=\"kv\">\r\n        <div>Inputs</div>\r\n        <div>Week content (text/notes), difficulty & topics, student answers.</div>\r\n      </div>\r\n      <div class=\"kv\">\r\n        <div>Outputs</div>\r\n        <div>Question set, model answers, per‑answer scores, and feedback.</div>\r\n      </div>\r\n      <h3>High‑level workflow</h3>\r\n      <div class=\"flow\">\r\n        <div class=\"box\"><h4>1) Ingest</h4><p>Upload week content; extract key points.</p></div>\r\n        <div class=\"box\"><h4>2) Generate</h4><p>Create MCQ/short/long questions + answer keys.</p></div>\r\n        <div class=\"box\"><h4>3) Answer</h4><p>Learner responds in the app.</p></div>\r\n        <div class=\"box\"><h4>4) Evaluate</h4><p>Gemini grades against rubric + model answers.</p></div>\r\n        <div class=\"box\"><h4>5) Feedback</h4><p>Scores + guidance; repeat for mastery.</p></div>\r\n      </div>\r\n      <h3>Prompt cues (concept)</h3>\r\n      <pre><code>// System: course TA\r\nProduce N questions from the provided notes. Include model answers and a scoring rubric.\r\nWhen grading, return JSON: {question_id, score_0_1, feedback} for each answer.</code></pre>\r\n      <p class=\"note\"><strong>Tip:</strong> Keep grading deterministic by asking for <em>scores mapped to a rubric</em> and requiring <em>structured JSON</em>.</p>\r\n    </section>\r\n\r\n    <!-- TAKEAWAYS -->\r\n    <section class=\"card\">\r\n      <h2>Takeaways</h2>\r\n      <ul class=\"list\">\r\n        <li>Start with a <strong>deterministic core</strong> (math, SQL, rules). Add LLMs for <strong>explanations, alternatives, and evaluation</strong>.</li>\r\n        <li>Pass only the <strong>data that matters</strong> (compact JSON). Ask for <strong>structured outputs</strong> you can render and store.</li>\r\n        <li>Guardrails matter: “no guarantees”, avoid brand claims, and keep privacy in mind (no PII to the model).</li>\r\n        <li>Measure impact: how many LLM tips the user accepts; resulting kWh drop; improved quiz mastery over time.</li>\r\n      </ul>\r\n    </section>\r\n\r\n    <section class=\"footer\">\r\n      <div>Demo: <a href=\"https://coolassistant.streamlit.app/\" target=\"_blank\" rel=\"noopener\">coolassistant.streamlit.app</a></div>\r\n      <div>Images: Solar data entry & Gemini feedback (provided screenshots).</div>\r\n    </section>\r\n  </main>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "5794f70e-1824-4bc2-bccd-29220bd80cd1"
        },
        {
          "kind": "article",
          "order": 4,
          "title": "LLM‑Powered Data Labeling (API)",
          "content": {
            "body_md": "<!doctype html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"utf-8\" />\r\n  <title>LLM‑Powered Data Labeling (API) — Grocery Families Classifier with OpenAI</title>\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n  <style>\r\n    :root{\r\n      --ink:#0b1220;--ink-soft:#374151;--bg:#ffffff;--bg-soft:#BDBDBD;\r\n      --brand:#2f6feb;--ok:#16a34a;--warn:#f59e0b;--danger:#dc2626;\r\n      --line:#e5e7eb;\r\n    }\r\n    html,body{margin:0;padding:0;background:var(--bg);color:var(--ink);\r\n      font-family:Inter,Segoe UI,system-ui,-apple-system,Helvetica,Arial,sans-serif;line-height:1.55}\r\n    .hero{background:linear-gradient(180deg,#0f172a 0%,#1f2937 60%,#334155 100%);color:#fff;padding:56px 24px 40px}\r\n    .wrap{max-width:1080px;margin:0 auto}\r\n    h1{font-size:clamp(28px,4vw,40px);letter-spacing:.2px;margin:0 0 8px}\r\n    .subtitle{color:#e5e7eb;font-size:15px}\r\n    .pill{display:inline-block;background:#BDBDBD;color:#111827;border-radius:999px;padding:6px 10px;font-size:12px;margin:0 8px 0 0}\r\n    .content{padding:28px 24px}\r\n    h2{font-size:clamp(22px,3vw,28px);margin:28px 0 10px}\r\n    h3{font-size:18px;margin:18px 0 6px}\r\n    p{margin:10px 0}\r\n    a{color:var(--brand);text-decoration:none}\r\n    a:hover{text-decoration:underline}\r\n    .grid{display:grid;grid-template-columns:repeat(12,1fr);gap:16px}\r\n    .card{\r\n      grid-column:span 12;background:#fff;border:1px solid var(--line);border-radius:14px;padding:18px;\r\n      box-shadow:0 1px 0 rgba(16,24,40,.04)\r\n    }\r\n    .note{background:var(--bg-soft);color:#111827;border-radius:12px;padding:12px 14px}\r\n    .list{margin:6px 0 0 18px}\r\n    .kv{display:grid;grid-template-columns:160px 1fr;gap:8px;margin:10px 0}\r\n    .kv div:first-child{color:#6b7280}\r\n    code,pre{background:var(--bg-soft);color:#111827;border-radius:8px}\r\n    code{padding:2px 6px}\r\n    pre{padding:12px 14px;overflow:auto;border:1px solid var(--line)}\r\n    .two{display:grid;grid-template-columns:1fr;gap:14px}\r\n    @media(min-width:920px){.two{grid-template-columns:1fr 1fr}}\r\n    .footer{border-top:1px dashed var(--line);margin-top:28px;padding-top:18px;color:#6b7280;font-size:14px}\r\n    table{border-collapse:collapse;width:100%;background:#fff;border:1px solid var(--line);border-radius:12px;overflow:hidden}\r\n    th,td{padding:10px 12px;border-bottom:1px solid var(--line);text-align:left}\r\n    th{background:#f8fafc;color:#111827}\r\n  </style>\r\n</head>\r\n<body>\r\n  <!-- HERO -->\r\n  <header class=\"hero\">\r\n    <div class=\"wrap\">\r\n      <span class=\"pill\">Labeling at Scale</span>\r\n      <span class=\"pill\">OpenAI API</span>\r\n      <h1>LLM‑Powered Data Labeling (API)</h1>\r\n      <p class=\"subtitle\">Classify product names into grocery families using a JSON‑strict prompt and write back to CSV. Built for large datasets and Codespaces‑friendly.</p>\r\n    </div>\r\n  </header>\r\n\r\n  <main class=\"content wrap\">\r\n\r\n    <!-- OVERVIEW -->\r\n    <section class=\"card\">\r\n      <h2>Overview</h2>\r\n      <div class=\"kv\"><div>What</div><div>A Python script that calls an LLM to <strong>classify each row</strong> into one of 10 grocery “families”, writing the result to a new CSV column.</div></div>\r\n      <div class=\"kv\"><div>Why</div><div>Fast, consistent labeling for large, messy product lists — ideal for bootstrapping taxonomies, analytics, and merchandising.</div></div>\r\n      <div class=\"kv\"><div>Dataset</div><div>Use your own CSV, or try the sample: <a href=\"https://github.com/AIforimpact22/learningexamples/blob/main/datacleaning.csv\" target=\"_blank\" rel=\"noopener\">datacleaning.csv</a></div></div>\r\n      <p class=\"note\"><strong>Key idea:</strong> We enforce JSON output (<code>response_format={\"type\":\"json_object\"}</code>) and validate it, so every call yields a deterministic <em>family</em> string, even if the model replies creatively.</p>\r\n    </section>\r\n\r\n    <!-- QUICK START -->\r\n    <section class=\"card\">\r\n      <h2>Quick start (Codespaces or local)</h2>\r\n      <div class=\"two\">\r\n        <div>\r\n          <h3>1) Prepare files</h3>\r\n          <pre><code># in your repo (example paths)\r\nmkdir -p /workspaces/testinggptapi\r\ncurl -L -o /workspaces/testinggptapi/dataset.csv \\\r\n  https://raw.githubusercontent.com/AIforimpact22/learningexamples/main/datacleaning.csv\r\n\r\n# save the Python below as:\r\n#   /workspaces/testinggptapi/classify_items.py\r\n</code></pre>\r\n          <h3>2) Install + set API key</h3>\r\n          <pre><code>pip install --upgrade openai\r\nexport OPENAI_API_KEY=\"sk-...your key...\"\r\n</code></pre>\r\n          <h3>3) Run</h3>\r\n          <pre><code>python /workspaces/testinggptapi/classify_items.py\r\n# Output → /workspaces/testinggptapi/dataset_classified.csv</code></pre>\r\n        </div>\r\n        <div>\r\n          <h3>What you get</h3>\r\n          <table>\r\n            <thead><tr><th>name</th><th>…</th><th>family (NEW)</th></tr></thead>\r\n            <tbody>\r\n              <tr><td>Organic Gala Apples 1kg</td><td>…</td><td>Fresh Produce</td></tr>\r\n              <tr><td>Whole Milk 1L</td><td>…</td><td>Dairy & Eggs</td></tr>\r\n              <tr><td>Basmati Rice 5kg</td><td>…</td><td>Pantry & Dry Goods</td></tr>\r\n            </tbody>\r\n          </table>\r\n          <p class=\"note\"><strong>Tip:</strong> Adjust <code>INPUT_CSV</code> / <code>OUTPUT_CSV</code> to your folder. The script pauses slightly between calls to be rate‑limit friendly.</p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- SCRIPT -->\r\n    <section class=\"card\">\r\n      <h2>Classifier script (copy/paste)</h2>\r\n      <pre><code>#!/usr/bin/env python3\r\n# classify_items.py\r\n# pip install openai\r\n\r\nimport os\r\nimport csv\r\nimport json\r\nimport time\r\nfrom typing import List\r\nfrom openai import OpenAI\r\n\r\n# ---- Config ----\r\nINPUT_CSV  = \"/workspaces/testinggptapi/dataset.csv\"\r\nOUTPUT_CSV = \"/workspaces/testinggptapi/dataset_classified.csv\"\r\nMODEL = \"gpt-4o-mini\"  # \"4o mini\"\r\nRATE_LIMIT_PACING_SEC = 0.1  # tiny pause between calls\r\n\r\nFAMILIES: List[str] = [\r\n    \"Fresh Produce\",\r\n    \"Dairy & Eggs\",\r\n    \"Meat & Poultry\",\r\n    \"Seafood\",\r\n    \"Bakery & Cereals\",\r\n    \"Pantry & Dry Goods\",\r\n    \"Oils, Sauces & Condiments\",\r\n    \"Snacks & Confectionery\",\r\n    \"Beverages\",\r\n    \"Household & Cleaning\",\r\n]\r\n\r\nSYSTEM_INSTRUCTIONS = (\r\n    \"You are a precise classification assistant. \"\r\n    \"Given a grocery/retail product name, choose EXACTLY one family from the provided list. \"\r\n    \"Return ONLY JSON with keys: family (string) and index (integer 0-based index in the list). \"\r\n    \"The 'family' value must match one of the allowed strings character-for-character. \"\r\n    \"No explanations.\"\r\n)\r\n\r\ndef make_prompt(name: str) -> str:\r\n    return (\r\n        \"Allowed families (0-based index):\\n\"\r\n        + \"\\n\".join(f\"{i}. {fam}\" for i, fam in enumerate(FAMILIES))\r\n        + \"\\n\\nClassify this item name into exactly one family:\\n\"\r\n        f\"name: {name}\\n\"\r\n        \"Respond as a JSON object like {\\\"family\\\":\\\"...\\\",\\\"index\\\":N}.\"\r\n    )\r\n\r\ndef classify_name(client: OpenAI, name: str) -> str:\r\n    \\\"\\\"\\\"Call gpt-4o-mini to classify and return the exact family string.\\\"\\\"\\\"\r\n    resp = client.chat.completions.create(\r\n        model=MODEL,\r\n        temperature=0,\r\n        response_format={\\\"type\\\": \\\"json_object\\\"},\r\n        messages=[\r\n            {\\\"role\\\": \\\"system\\\", \\\"content\\\": SYSTEM_INSTRUCTIONS},\r\n            {\\\"role\\\": \\\"user\\\", \\\"content\\\": make_prompt(name)},\r\n        ],\r\n        max_tokens=64,\r\n    )\r\n    content = resp.choices[0].message.content\r\n    try:\r\n        data = json.loads(content)\r\n        fam = (data.get(\\\"family\\\") or \\\"\\\").strip()\r\n        # Minimal guard: ensure it’s one of the allowed; otherwise default to Pantry.\r\n        if fam not in FAMILIES:\r\n            fam = \\\"Pantry & Dry Goods\\\"\r\n        return fam\r\n    except Exception:\r\n        # If anything odd happens, fall back deterministically\r\n        return \\\"Pantry & Dry Goods\\\"\r\n\r\ndef main():\r\n    api_key = os.getenv(\\\"OPENAI_API_KEY\\\", \\\"\\\").strip()\r\n    if not api_key:\r\n        raise SystemExit(\r\n            \\\"Missing OPENAI_API_KEY. Set it with:\\\\n  export OPENAI_API_KEY='sk-...'\\\\n\\\"\r\n        )\r\n\r\n    client = OpenAI(api_key=api_key)\r\n\r\n    with open(INPUT_CSV, newline=\\\"\\\", encoding=\\\"utf-8\\\") as f_in, \\\r\n         open(OUTPUT_CSV, \\\"w\\\", newline=\\\"\\\", encoding=\\\"utf-8\\\") as f_out:\r\n\r\n        reader = csv.DictReader(f_in)\r\n        fieldnames = list(reader.fieldnames or [])\r\n        if \\\"family\\\" not in fieldnames:\r\n            fieldnames.append(\\\"family\\\")\r\n\r\n        writer = csv.DictWriter(f_out, fieldnames=fieldnames)\r\n        writer.writeheader()\r\n\r\n        for row in reader:\r\n            name = (row.get(\\\"name\\\") or \\\"\\\").strip()\r\n            family = classify_name(client, name)\r\n            row[\\\"family\\\"] = family\r\n            writer.writerow(row)\r\n            time.sleep(RATE_LIMIT_PACING_SEC)\r\n\r\n    print(f\\\"Done. Wrote classified dataset → {OUTPUT_CSV}\\\")\r\n\r\nif __name__ == \\\"__main__\\\":\r\n    main()</code></pre>\r\n      <p class=\"note\"><strong>Why this works well for large data:</strong> strict JSON, fixed label set, a deterministic fallback, and gentle pacing keep the pipeline stable and easy to resume.</p>\r\n    </section>\r\n\r\n    <!-- SCALING & QUALITY -->\r\n    <section class=\"card\">\r\n      <h2>Scaling & quality tips</h2>\r\n      <ul class=\"list\">\r\n        <li><strong>Batching:</strong> For very large files, classify <em>10–25 items per call</em> and return a JSON array to cut cost/latency.</li>\r\n        <li><strong>Checkpointing:</strong> Write output incrementally (already done) and store the last processed row index in a small state file to resume.</li>\r\n        <li><strong>Rate limits:</strong> Keep a short sleep (0.1–0.2s). If you hit 429/5xx, retry with exponential backoff.</li>\r\n        <li><strong>Auditing:</strong> Sample 100 rows after labeling to estimate accuracy; refine the family list and system instructions if needed.</li>\r\n        <li><strong>Privacy:</strong> Don’t send PII or proprietary secrets in prompts. Log only what you need for debugging.</li>\r\n      </ul>\r\n    </section>\r\n\r\n    <!-- WHY LLM LABELING -->\r\n    <section class=\"card\">\r\n      <h2>Why LLM‑based labeling is excellent for huge data</h2>\r\n      <p>Rules and regexes break on messy names. The LLM uses context to infer category even when wording varies (brand + size + pack + “promo” text). With a tight prompt and a fixed label set, you can reach strong first‑pass accuracy and then iterate with small manual fixes.</p>\r\n    </section>\r\n\r\n    <section class=\"footer\">\r\n      <div>Dataset example: <a href=\"https://github.com/AIforimpact22/learningexamples/blob/main/datacleaning.csv\" target=\"_blank\" rel=\"noopener\">datacleaning.csv</a></div>\r\n      <div>Paths shown use GitHub Codespaces (<code>/workspaces/…</code>). Adjust if running locally.</div>\r\n    </section>\r\n  </main>\r\n</body>\r\n</html>"
          },
          "lesson_uid": "ee8a7bc2-0c93-4f39-8144-b88b60e651f6"
        }
      ]
    },
    {
      "order": 9,
      "title": "Week 9: Capstone Project",
      "lessons": []
    }
  ],
  "instructors": [
    {
      "name": "Course Lead",
      "title": "AI Engineer",
      "avatar_url": ""
    }
  ],
  "thumbnail_url": "https://i.imgur.com/iIMdWOn.jpeg",
  "description_md": "This course is a master course that offers Participants will develop advanced skills in coding, database management, machine learning, and real-time application deployment. This course focuses on practical implementations, enabling learners to create AI-driven solutions, deploy them in real-world scenarios, and integrate apps with cloud and database systems.",
  "what_you_will_learn": [
    "Design end‑to‑end AI applications.",
    "Integrate cloud + database with ML pipelines.",
    "Deploy real‑time inference and monitoring."
  ]
}
