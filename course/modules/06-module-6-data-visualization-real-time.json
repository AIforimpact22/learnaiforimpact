{
  "order": 6,
  "title": "Module 6: Data Visualization & Real‑Time",
  "lessons": [
    {
      "kind": "article",
      "order": 1,
      "title": "Introduction",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Module • Data Visualization & Real‑Time (Data‑Driven)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Grids (horizontal boxes) === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n/* Inline code chip — requested color */\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>New Module</small>\r\n      <h1>Data Visualization — Data‑Driven & Real‑Time</h1>\r\n      <p>Move beyond tables: dynamic charts, live KPIs, and interactive insights</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        After you’ve learned to <strong>build UI</strong> and <strong>deploy your app</strong>, it’s time to make your data\r\n        <em>come alive</em>. This module introduces data‑driven visualization and real‑time techniques so you can explore,\r\n        monitor, and explain your datasets with clarity — not just rows and columns.\r\n      </p>\r\n\r\n      <div class=\"grid\" style=\"margin-top:12px;\">\r\n        <div class=\"box\">\r\n          <h3>Why visualizations?</h3>\r\n          <ul>\r\n            <li>See patterns, trends, and anomalies quickly.</li>\r\n            <li>Tell compelling, decision‑ready stories.</li>\r\n            <li>Support ops with live KPIs and alerts.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>What you’ll build</h3>\r\n          <ul>\r\n            <li>Interactive dashboards (time series, bars, scatter).</li>\r\n            <li>Live charts that auto‑refresh from your database.</li>\r\n            <li>Cross‑filters and lightweight drill‑downs.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Where it fits</h3>\r\n          <ul>\r\n            <li>After deployment & basic UI are in place.</li>\r\n            <li>When stakeholders need <em>up‑to‑date</em> views.</li>\r\n            <li>When tables aren’t enough for insight.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- TOOLING LANDSCAPE -->\r\n  <section class=\"section-card\" id=\"tools\">\r\n    <div class=\"banner\">\r\n      <small>Choices</small>\r\n      <h1>Visualization Options (Pick the Right Tool)</h1>\r\n      <p>From Streamlit built‑ins to D3.js — trade‑offs and use‑cases</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Streamlit (built‑ins)</h3>\r\n          <ul>\r\n            <li><code class=\"inline\">st.line_chart</code>, <code class=\"inline\">st.area_chart</code>, <code class=\"inline\">st.bar_chart</code>.</li>\r\n            <li>Fastest path for internal dashboards.</li>\r\n            <li>Great for time series & KPIs with minimal code.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Altair / Vega‑Lite</h3>\r\n          <ul>\r\n            <li>Declarative charts, interactions, linked selections.</li>\r\n            <li>Readable JSON grammar; integrates in Streamlit.</li>\r\n            <li>Balanced power/complexity for analytics apps.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Plotly</h3>\r\n          <ul>\r\n            <li>Rich interactivity (hover, zoom, facets).</li>\r\n            <li>Good for exploratory dashboards and notebooks.</li>\r\n            <li>Streamlit support via <code class=\"inline\">st.plotly_chart</code>.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>D3.js (Data‑Driven Documents)</h3>\r\n          <ul>\r\n            <li>Web‑native, bespoke visuals (fine control).</li>\r\n            <li>Higher effort; best for product‑grade UI.</li>\r\n            <li>Great for custom interactions/animations.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:12px;\">\r\n        Start with Streamlit’s built‑ins for speed. Reach for Altair/Plotly when you need richer interactions. Use D3.js when you\r\n        need complete control in a web app (e.g., custom charts embedded in a product).\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- REAL-TIME PATTERNS -->\r\n  <section class=\"section-card\" id=\"realtime\">\r\n    <div class=\"banner\">\r\n      <small>Live Data</small>\r\n      <h1>Real‑Time Patterns</h1>\r\n      <p>Make graphs update as your data changes</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>1) Smart Polling</h3>\r\n          <ul>\r\n            <li>Periodic queries with caching (e.g., <code class=\"inline\">ttl</code> on DB calls).</li>\r\n            <li>Filter by time window or <code class=\"inline\">updated_at</code> to fetch only changes.</li>\r\n            <li>Simple, reliable — ideal for Streamlit.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>2) Push (WebSockets)</h3>\r\n          <ul>\r\n            <li>Server pushes new points to clients instantly.</li>\r\n            <li>Requires a small backend (e.g., FastAPI + <code class=\"inline\">websockets</code>).</li>\r\n            <li>Best for high‑frequency telemetry.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>3) DB Notifications</h3>\r\n          <ul>\r\n            <li>Database triggers & NOTIFY/LISTEN to signal updates.</li>\r\n            <li>Use a worker to relay events to your app.</li>\r\n            <li>Great for event‑driven pipelines.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:12px;\">\r\n        For Streamlit, start with <strong>smart polling</strong>. It’s one line to add a cache TTL and friendly on pooled DB connections.\r\n        Upgrade to push when you need sub‑second reactions.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- QUICK START SNIPPET -->\r\n  <section class=\"section-card\" id=\"quickstart\">\r\n    <div class=\"banner\">\r\n      <small>Quick Start</small>\r\n      <h1>Hello, Live Chart (Streamlit + SQL Connection)</h1>\r\n      <p>Minimal code to plot a 7‑day time series with auto‑refresh</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p><strong>Prereqs:</strong> you already have <code class=\"inline\">[connections.neon].url</code> in <code class=\"inline\">.streamlit/secrets.toml</code>.</p>\r\n<pre>import streamlit as st\r\n\r\nst.set_page_config(page_title=\"Live KPI\", page_icon=\"📈\", layout=\"centered\")\r\nst.title(\"📈 Live KPI — Attendance (last 7 days)\")\r\n\r\nconn = st.connection(\"neon\", type=\"sql\")\r\n\r\n# Auto-refresh every 15s via query TTL (smart polling)\r\ndf = conn.query(\r\n    \"\"\"\r\n    SELECT date AS day, COUNT(*) AS checkins\r\n    FROM app.attendance_log\r\n    WHERE date >= CURRENT_DATE - INTERVAL '7 days'\r\n    GROUP BY day\r\n    ORDER BY day\r\n    \"\"\",\r\n    ttl=\"15s\"\r\n)\r\n\r\nst.line_chart(df.set_index(\"day\")[\"checkins\"])</pre>\r\n      <p>This pattern scales to many charts: keep each query focused and cached, and prefer small windows (e.g., 7–30 days)\r\n         for fast render and a responsive feel.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- UX & PERFORMANCE -->\r\n  <section class=\"section-card\" id=\"ux\">\r\n    <div class=\"banner\">\r\n      <small>Guidelines</small>\r\n      <h1>UX & Performance Tips</h1>\r\n      <p>Keep visuals fast, legible, and decision‑ready</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>Window and downsample:</strong> show recent data; use daily/weekly resampling for long horizons.</li>\r\n        <li><strong>Cache wisely:</strong> add <code class=\"inline\">ttl</code> to DB queries (e.g., 15–60s) to reduce load and jitter.</li>\r\n        <li><strong>Readable axes & units:</strong> date formats, thousands separators, consistent colors/labels.</li>\r\n        <li><strong>Link filters:</strong> time range + metric selector for self‑serve exploration.</li>\r\n        <li><strong>Non‑blocking updates:</strong> avoid tight loops; let Streamlit rerun on interaction and cache in between.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHAT'S NEXT -->\r\n  <section class=\"section-card\" id=\"next\">\r\n    <div class=\"banner\">\r\n      <small>Next</small>\r\n      <h1>Where we go from here</h1>\r\n      <p>From MVP charts to interactive, real‑time dashboards</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li>Add metric pickers and date filters (sidebar).</li>\r\n        <li>Build a multi‑chart dashboard with shared range controls.</li>\r\n        <li>Introduce alerts (e.g., threshold breaches) and badges.</li>\r\n        <li>Consider a push channel (WebSockets) for high‑frequency feeds.</li>\r\n        <li>For production UI, evaluate a D3.js front‑end for custom visual stories.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "4d057535-ef6d-402c-88d3-66c312a0a730"
    },
    {
      "kind": "article",
      "order": 2,
      "title": "D3.js Visual Gallery",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Module • D3.js Visual Gallery (Time‑Series, Maps, Hierarchies)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg, iframe { max-width: 100%; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Grid (horizontal info boxes) === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Figure (full-width demo) === */\r\n.figure { margin: 10px 0 0; }\r\n.figure .caption { font-size: 14px; color: #6b6b6b; margin-top: 8px; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n/* Inline code chip — your requested color */\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>D3.js • Gallery</small>\r\n      <h1>Most‑Used D3 Visuals for Real‑World Data</h1>\r\n      <p>Pick the right pattern for time‑series, maps, hierarchies, and dense temporal data</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        D3.js (Data‑Driven Documents) gives you low‑level control to draw exactly the chart you need in the browser.\r\n        Below are hand‑picked, working examples (via Observable) you can embed directly with an <code class=\"inline\"><iframe></code>.\r\n        Each demo notes when to use it and what questions it answers.\r\n      </p>\r\n      <div class=\"grid\" style=\"margin-top:12px;\">\r\n        <div class=\"box\">\r\n          <h3>When to use D3?</h3>\r\n          <ul>\r\n            <li>You need bespoke interactions or complex layouts.</li>\r\n            <li>Built‑ins (Streamlit charts) aren’t expressive enough.</li>\r\n            <li>You want production‑grade, branded visuals.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Embed approach</h3>\r\n          <ul>\r\n            <li>Fastest path: Observable <code class=\"inline\"><iframe></code> embeds.</li>\r\n            <li>Advanced: host your own JS bundle and mount in app.</li>\r\n            <li>Streamlit: serve via <code class=\"inline\">components.v1.iframe</code> or <code class=\"inline\">st.html</code> (if available).</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Design tips</h3>\r\n          <ul>\r\n            <li>Limit series per view; prefer filters.</li>\r\n            <li>Use clear units and legends.</li>\r\n            <li>Make time windows adjustable.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- LIVE GALLERY -->\r\n  <section class=\"section-card\" id=\"gallery\">\r\n    <div class=\"banner\">\r\n      <small>Examples</small>\r\n      <h1>Interactive D3 Examples (Embeds)</h1>\r\n      <p>Each embed is live — scroll and interact</p>\r\n    </div>\r\n    <div class=\"body\">\r\n\r\n      <!-- 1. Bar chart race -->\r\n      <div class=\"figure\">\r\n        <h3 style=\"margin:0 0 8px;\">1) Bar Chart Race — changing totals over time (categories)</h3>\r\n        <p class=\"caption\">Use when you have a time‑series of category totals (e.g., product sales share by month) and you want to emphasize <em>rank changes</em> over time.</p>\r\n        <iframe width=\"100%\" height=\"682\" frameborder=\"0\" loading=\"lazy\"\r\n          src=\"https://observablehq.com/embed/@d3/bar-chart-race?cells=chart\"></iframe>\r\n      </div>\r\n\r\n      <!-- 2. World tour -->\r\n      <div class=\"figure\">\r\n        <h3 style=\"margin:18px 0 8px;\">2) World Tour — step through locations globally</h3>\r\n        <p class=\"caption\">Ideal for sequences of geolocated events (e.g., shipments, sensor deployments) where you want to tour locations one by one.</p>\r\n        <iframe width=\"100%\" height=\"796\" frameborder=\"0\" loading=\"lazy\"\r\n          src=\"https://observablehq.com/embed/@d3/world-tour?cells=canvas\"></iframe>\r\n      </div>\r\n\r\n      <!-- 3. Seamless map zoom -->\r\n      <div class=\"figure\">\r\n        <h3 style=\"margin:18px 0 8px;\">3) Seamless Zoomable Map (Tiles)</h3>\r\n        <p class=\"caption\">Use when you need smooth pan/zoom map navigation and plan to overlay custom data later (markers, heatmaps).</p>\r\n        <iframe width=\"100%\" height=\"684\" frameborder=\"0\" loading=\"lazy\"\r\n          src=\"https://observablehq.com/embed/@d3/seamless-zoomable-map-tiles?cells=map\"></iframe>\r\n      </div>\r\n\r\n      <!-- 4. Hierarchical edge bundling -->\r\n      <div class=\"figure\">\r\n        <h3 style=\"margin:18px 0 8px;\">4) Hierarchical Edge Bundling — workflows & methodologies</h3>\r\n        <p class=\"caption\">Great for showing relationships across a hierarchy (e.g., teams, pipelines, modules) without creating a hairball of lines.</p>\r\n        <iframe width=\"100%\" height=\"1038\" frameborder=\"0\" loading=\"lazy\"\r\n          src=\"https://observablehq.com/embed/@d3/hierarchical-edge-bundling/2@latest?cells=chart\"></iframe>\r\n      </div>\r\n\r\n      <!-- 5. Calendar heatmap -->\r\n      <div class=\"figure\">\r\n        <h3 style=\"margin:18px 0 8px;\">5) Calendar Heatmap — daily values across a year</h3>\r\n        <p class=\"caption\">Perfect for daily metrics like commits, energy usage, sales, or attendance — quickly spot seasonality and streaks.</p>\r\n        <iframe width=\"100%\" height=\"2436\" frameborder=\"0\" loading=\"lazy\"\r\n          src=\"https://observablehq.com/embed/@d3/calendar/2?cells=chart\"></iframe>\r\n      </div>\r\n\r\n      <!-- 6. Hourly monitoring -->\r\n      <div class=\"figure\">\r\n        <h3 style=\"margin:18px 0 8px;\">6) Hourly Monitoring — dense intraday time‑series</h3>\r\n        <p class=\"caption\">For high‑resolution telemetry (e.g., electricity usage, sensors). Shows daily/weekly rhythms and anomalies.</p>\r\n        <iframe width=\"100%\" height=\"4576\" frameborder=\"0\" loading=\"lazy\"\r\n          src=\"https://observablehq.com/embed/@mbostock/electric-usage-2019?cells=chart\"></iframe>\r\n      </div>\r\n\r\n      <!-- 7. Candlestick -->\r\n      <div class=\"figure\">\r\n        <h3 style=\"margin:18px 0 8px;\">7) Candlestick — revenue/expense or price‑like series</h3>\r\n        <p class=\"caption\">Good when you have open/high/low/close style aggregates (financials, bid/ask ranges, or summarized operational metrics).</p>\r\n        <iframe width=\"100%\" height=\"829\" frameborder=\"0\" loading=\"lazy\"\r\n          src=\"https://observablehq.com/embed/@d3/candlestick-chart/2?cells=chart\"></iframe>\r\n      </div>\r\n\r\n      <!-- 8. Multi‑line -->\r\n      <div class=\"figure\">\r\n        <h3 style=\"margin:18px 0 8px;\">8) Multi‑Line — compare several items over time</h3>\r\n        <p class=\"caption\">Use when multiple related series need to be compared (e.g., KPIs by product/region). Consider small multiples if lines overlap too much.</p>\r\n        <iframe width=\"100%\" height=\"684\" frameborder=\"0\" loading=\"lazy\"\r\n          src=\"https://observablehq.com/embed/@d3/multi-line-chart/2?cells=chart\"></iframe>\r\n      </div>\r\n\r\n      <!-- Optional: copy-paste embed tip -->\r\n      <div class=\"box\" style=\"margin-top:18px;\">\r\n        <h3>Copy/paste embed tip</h3>\r\n        <p>Use an <code class=\"inline\"><iframe></code> in your page or a Streamlit HTML component. Example:</p>\r\n<pre><iframe width=\"100%\" height=\"682\" frameborder=\"0\"\r\n  src=\"https://observablehq.com/embed/@d3/bar-chart-race?cells=chart\"></iframe></pre>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "1b45a892-abf1-4f15-a2f4-a38a4bcfd4a1"
    },
    {
      "kind": "article",
      "order": 3,
      "title": "Data‑Driven Calendar • Bank Visits",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Data‑Driven Calendar • Bank Visits (Red→White→Green)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Grid boxes (horizontal info) === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; margin-top: 10px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Visualization • Calendar Heatmap</small>\r\n      <h1>Daily Bank Visits (1 Year) — Red→White→Green Calendar</h1>\r\n      <p>See low (red) to high (green) traffic by day, laid out like real monthly calendars</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        This example builds a <strong>data‑driven calendar heatmap</strong> for a full year of daily customer visits.\r\n        Each month appears as a classic <em>Sun→Sat</em> calendar grid; color encodes visit volume using a\r\n        <strong>Red → White → Green</strong> gradient (low → median → high). You can tweak the <em>white pivot percentile</em>,\r\n        cell size, labels, and borders from the sidebar.\r\n      </p>\r\n\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Data (CSV)</h3>\r\n          <p>Place a CSV at <code class=\"inline\">/workspaces/learningexamples/bank_visits_2024.csv</code> (or update in the sidebar).</p>\r\n          <p><strong>Columns (case‑insensitive):</strong></p>\r\n          <ul>\r\n            <li><code class=\"inline\">date</code> — e.g., <code class=\"inline\">2024-03-15</code></li>\r\n            <li>visits — any of: <code class=\"inline\">total_visit</code>, <code class=\"inline\">total_visits</code>, <code class=\"inline\">visits</code>, <code class=\"inline\">visit</code>, <code class=\"inline\">count</code>, <code class=\"inline\">value</code></li>\r\n          </ul>\r\n          <p><a href=\"https://github.com/AIforimpact22/learningexamples/blob/main/bank_visits_2024.csv\" target=\"_blank\" rel=\"noopener\">View example CSV on GitHub</a></p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Run (Codespaces or local)</h3>\r\n          <pre>pip install streamlit altair pandas numpy\r\nstreamlit run app.py</pre>\r\n          <p>Then open the app URL shown in the terminal.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>What you’ll see</h3>\r\n          <p>12 faceted calendars (3×4). Hover any day for exact value and date. Grey cells belong to adjacent months.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- PREVIEW IMAGE -->\r\n  <section class=\"section-card\" id=\"preview\">\r\n    <div class=\"banner\">\r\n      <small>Preview</small>\r\n      <h1>Expected Outcome</h1>\r\n      <p>Monthly calendar heatmaps with tooltips & legend</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <img src=\"https://i.imgur.com/jCEz4BK.png\" alt=\"Calendar heatmap preview of bank visits (red to green)\" />\r\n    </div>\r\n  </section>\r\n\r\n  <!-- APP CODE -->\r\n  <section class=\"section-card\" id=\"code\">\r\n    <div class=\"banner\">\r\n      <small>Copy & Run</small>\r\n      <h1>app.py — Monthly Calendar Heatmaps (Altair + Streamlit)</h1>\r\n      <p>Paste the code below into <code class=\"inline\">app.py</code> and run</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre># app.py\r\n# Monthly calendar heatmaps (each month separately) with a RED–WHITE–GREEN gradient.\r\n# Reads: /workspaces/learningexamples/bank_visits_2024.csv\r\n#\r\n# Expected columns (case-insensitive):\r\n#   - date (YYYY-MM-DD)\r\n#   - total_visit (or: total_visits, visits, visit, count, value)\r\n\r\nimport streamlit as st\r\nimport pandas as pd\r\nimport numpy as np\r\nimport altair as alt\r\n\r\nst.set_page_config(page_title=\"Bank Visits — Monthly Calendars\", layout=\"wide\")\r\nst.title(\"Bank Visits — Monthly Calendar Heatmaps\")\r\n\r\nDEFAULT_PATH = \"/workspaces/learningexamples/bank_visits_2024.csv\"\r\n\r\n# ---------------- Sidebar controls ----------------\r\nst.sidebar.header(\"Settings\")\r\ncsv_path = st.sidebar.text_input(\"CSV path\", DEFAULT_PATH)\r\npivot_pct = st.sidebar.slider(\r\n    \"White pivot (percentile)\", 0.0, 1.0, 0.50, 0.01,\r\n    help=\"Which percentile maps to white (default 0.50 = median).\"\r\n)\r\nmissing_color = st.sidebar.color_picker(\"Outside-month cell color\", \"#f0f0f0\")\r\ncell_border = st.sidebar.checkbox(\"Show cell borders\", value=True)\r\nmonth_label_style = st.sidebar.selectbox(\"Month label\", [\"Full (January)\", \"Short (Jan)\"], index=0)\r\n\r\n# Chart sizing (per month)\r\ncell_size = st.sidebar.slider(\"Cell size (px)\", 16, 36, 24)\r\ncalendar_width = 7 * cell_size + 30  # per-month chart width\r\ncalendar_height = 6 * cell_size + 20 # per-month chart height\r\n\r\n\r\n@st.cache_data\r\ndef load_data(path: str) -> pd.DataFrame:\r\n    df = pd.read_csv(path)\r\n    # tolerant column detection\r\n    cols = {c.lower().strip(): c for c in df.columns}\r\n    date_col = next((cols[c] for c in [\"date\", \"day\"] if c in cols), None)\r\n    val_col  = next((cols[c] for c in [\"total_visit\", \"total_visits\", \"visits\", \"visit\", \"count\", \"value\"] if c in cols), None)\r\n    if not date_col or not val_col:\r\n        raise ValueError(f\"CSV must have 'date' and a visits column (e.g., 'total_visit'). Found: {list(df.columns)}\")\r\n    df = df[[date_col, val_col]].rename(columns={date_col: \"date\", val_col: \"visits\"})\r\n    df[\"date\"] = pd.to_datetime(df[\"date\"], errors=\"coerce\")\r\n    df[\"visits\"] = pd.to_numeric(df[\"visits\"], errors=\"coerce\")\r\n    df = df.dropna(subset=[\"date\"]).sort_values(\"date\").reset_index(drop=True)\r\n    return df\r\n\r\n\r\ndef build_year_calendar(raw: pd.DataFrame, year: int) -> pd.DataFrame:\r\n    \"\"\"\r\n    Build a 6x7 grid for each month (like a wall calendar), aligned to Sunday-start weeks.\r\n    Returns one DataFrame with 12*42 rows (one row per cell).\r\n    \"\"\"\r\n    # Restrict to the selected year (for merging visits)\r\n    year_data = raw[(raw[\"date\"].dt.year == year)][[\"date\", \"visits\"]]\r\n\r\n    frames = []\r\n    for month in range(1, 13):\r\n        first = pd.Timestamp(year, month, 1)\r\n        last  = (first + pd.offsets.MonthEnd(1))\r\n        # Find the Sunday on or before the 1st\r\n        start_sun = first - pd.Timedelta(days=(first.weekday() + 1) % 7)\r\n        # 6 weeks x 7 days = 42 cells\r\n        grid_dates = pd.date_range(start_sun, periods=42, freq=\"D\")\r\n\r\n        dfm = pd.DataFrame({\"date\": grid_dates})\r\n        dfm[\"year\"] = year\r\n        dfm[\"month_num\"] = month\r\n        dfm[\"in_month\"] = dfm[\"date\"].dt.month.eq(month)\r\n        # day-of-week (Sun=0 ... Sat=6)\r\n        dfm[\"dow\"] = ((dfm[\"date\"].dt.weekday + 1) % 7).astype(int)\r\n        # week index within the calendar grid (0..5)\r\n        dfm[\"wom\"] = ((dfm[\"date\"] - start_sun).dt.days // 7).astype(int)\r\n        # day label\r\n        dfm[\"day\"] = dfm[\"date\"].dt.day.where(dfm[\"in_month\"], other=None)\r\n\r\n        # month labels\r\n        if month_label_style.startswith(\"Full\"):\r\n            dfm[\"month_name\"] = first.strftime(\"%B\")\r\n        else:\r\n            dfm[\"month_name\"] = first.strftime(\"%b\")\r\n\r\n        # Merge visits for actual dates (outside-month cells remain NaN)\r\n        dfm = dfm.merge(year_data, on=\"date\", how=\"left\")\r\n        frames.append(dfm)\r\n\r\n    cal = pd.concat(frames, ignore_index=True)\r\n\r\n    # Nice labels\r\n    dow_names = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\r\n    cal[\"dow_name\"] = cal[\"dow\"].map({i:n for i, n in enumerate(dow_names)})\r\n\r\n    return cal\r\n\r\n\r\n# ------- Load & prepare data -------\r\ntry:\r\n    raw = load_data(csv_path)\r\nexcept Exception as e:\r\n    st.error(f\"Failed to read CSV: {e}\")\r\n    st.stop()\r\n\r\nyears = sorted(raw[\"date\"].dt.year.unique().tolist())\r\nyear = st.sidebar.selectbox(\"Year\", years, index=(0 if len(years) == 1 else len(years)-1))\r\n\r\ncal = build_year_calendar(raw, year)\r\n\r\n# Compute gradient stops from this year's *available* visit values\r\nvals = cal.loc[cal[\"in_month\"] & cal[\"visits\"].notna(), \"visits\"].to_numpy()\r\nif vals.size == 0:\r\n    st.warning(f\"No visit data for {year}.\")\r\n    st.stop()\r\n\r\nvmin = float(np.nanmin(vals))\r\nvmax = float(np.nanmax(vals))\r\nvpivot = float(np.quantile(vals, pivot_pct))\r\n\r\n# Color scale: LOW → MID → HIGH  =>  Red → White → Green\r\ncolor_scale = alt.Scale(\r\n    domain=[vmin, vpivot, vmax],\r\n    range=[\"#d73027\", \"#ffffff\", \"#1a9850\"],\r\n    clamp=True,\r\n)\r\n\r\n# Axis domains (keep consistent across facets)\r\ndow_order = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\r\nwom_order = [0, 1, 2, 3, 4, 5]\r\nmonth_order_full  = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\r\nmonth_order_short = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\r\nfacet_order = month_order_full if month_label_style.startswith(\"Full\") else month_order_short\r\n\r\n# Base layer: background cells (outside-month shaded; inside-month white)\r\nbase = (\r\n    alt.Chart(cal)\r\n    .mark_rect(stroke=\"#E0E0E0\" if cell_border else None, strokeWidth=0.5)\r\n    .encode(\r\n        x=alt.X(\"dow_name:N\",\r\n                sort=dow_order,\r\n                axis=alt.Axis(title=None, labelAngle=0, labelPadding=6)),\r\n        y=alt.Y(\"wom:O\",\r\n                sort=wom_order,\r\n                axis=alt.Axis(title=None, ticks=False, labels=False)),\r\n        color=alt.condition(\r\n            \"datum.in_month\",\r\n            alt.value(\"#FFFFFF\"),\r\n            alt.value(missing_color),\r\n        ),\r\n    )\r\n    .properties(width=calendar_width, height=calendar_height)\r\n)\r\n\r\n# Visits layer: color only the in-month cells with data\r\nvisits_layer = (\r\n    alt.Chart(cal)\r\n    .transform_filter(\"datum.in_month && isValid(datum.visits)\")\r\n    .mark_rect(stroke=\"#E0E0E0\" if cell_border else None, strokeWidth=0.5)\r\n    .encode(\r\n        x=alt.X(\"dow_name:N\", sort=dow_order, axis=None),\r\n        y=alt.Y(\"wom:O\", sort=wom_order, axis=None),\r\n        color=alt.Color(\"visits:Q\", scale=color_scale,\r\n                        legend=alt.Legend(title=\"Visits\", gradientLength=120)),\r\n        tooltip=[\r\n            alt.Tooltip(\"date:T\", title=\"Date\"),\r\n            alt.Tooltip(\"visits:Q\", title=\"Visits\", format=\",.0f\"),\r\n        ],\r\n    )\r\n    .properties(width=calendar_width, height=calendar_height)\r\n)\r\n\r\n# Day numbers\r\nday_text = (\r\n    alt.Chart(cal)\r\n    .mark_text(baseline=\"middle\", align=\"center\", dy=0, fontSize=11)\r\n    .encode(\r\n        x=alt.X(\"dow_name:N\", sort=dow_order, axis=None),\r\n        y=alt.Y(\"wom:O\", sort=wom_order, axis=None),\r\n        text=alt.condition(\"datum.in_month\", \"day:Q\", alt.value(\"\")),\r\n        color=alt.condition(\"datum.in_month\", alt.value(\"#333333\"), alt.value(\"#999999\")),\r\n    )\r\n    .properties(width=calendar_width, height=calendar_height)\r\n)\r\n\r\n# Compose per-month charts and facet (3 columns x 4 rows)\r\ncal_chart = alt.layer(base, visits_layer, day_text).facet(\r\n    facet=alt.Facet(\"month_name:N\", sort=facet_order, title=None),\r\n    columns=3,\r\n)\r\n\r\n# ---------------- Layout ----------------\r\nleft, right = st.columns([4, 1], gap=\"large\")\r\n\r\nwith left:\r\n    st.subheader(f\"Calendars — {year}\")\r\n    st.altair_chart(cal_chart, use_container_width=True)\r\n\r\nwith right:\r\n    st.subheader(\"Scale\")\r\n    st.markdown(\r\n        f\"\"\"\r\n**Gradient:**\r\n- **Red** = min (≈ **{vmin:,.0f}**)\r\n- **White** = {pivot_pct:.0%} percentile (≈ **{vpivot:,.0f}**)\r\n- **Green** = max (≈ **{vmax:,.0f}**)\r\n\r\n**Notes**\r\n- Each panel is a true month calendar (Sun–Sat columns, up to 6 weeks).\r\n- Grey cells belong to adjacent months.\r\n        \"\"\"\r\n    )\r\n\r\nst.divider()\r\nwith st.expander(\"Show underlying calendar data (this year)\"):\r\n    st.dataframe(\r\n        cal[[\"date\", \"month_name\", \"in_month\", \"day\", \"visits\"]]\r\n        .sort_values([\"date\"]),\r\n        use_container_width=True,\r\n    )</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- TIPS -->\r\n  <section class=\"section-card\" id=\"tips\">\r\n    <div class=\"banner\">\r\n      <small>Helpful</small>\r\n      <h1>Usage Tips</h1>\r\n      <p>Make the calendar read clearly and run fast</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>CSV path:</strong> if your file isn’t in <code class=\"inline\">/workspaces/learningexamples/</code>, change the path from the sidebar.</li>\r\n        <li><strong>White pivot:</strong> 50% (median) by default. Move the slider to shift what counts as “normal”.</li>\r\n        <li><strong>Missing days:</strong> days with no value inside the month render as white with a day number; outside‑month cells use the grey swatch from the color picker.</li>\r\n        <li><strong>Performance:</strong> one year (≈365 values) is tiny — Altair renders quickly. For multiple years, keep the facet to 12 panels per view.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "feac7647-632f-4cae-bb24-71afb6cae9a1"
    },
    {
      "kind": "article",
      "order": 4,
      "title": "Statistics for Visualization • Make Your Charts Truthful & Useful",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Statistics for Visualization • Make Your Charts Truthful & Useful</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Grids / boxes (horizontal info) === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Code blocks (white on dark) === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n/* Inline code chip — your requested color */\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Module • Foundations</small>\r\n      <h1>Statistics for Data Visualization</h1>\r\n      <p>Use the right summaries to scale axes, color ranges, and highlight signal (not noise)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        Great visuals depend on simple, robust statistics. <strong>Min/Max, Mean/Median, Percentiles, Std‑dev</strong> and a few\r\n        transformations (normalization, z‑scores, rolling averages) determine how your charts <em>scale</em>, how colors map to values,\r\n        and how outliers are treated. Get these right and your visuals become truthful, legible, and decision‑ready.\r\n      </p>\r\n      <div class=\"grid\" style=\"margin-top:10px;\">\r\n        <div class=\"box\">\r\n          <h3>Why stats matter</h3>\r\n          <ul>\r\n            <li><strong>Scaling:</strong> choose axis and color ranges (e.g., P5–P95) to avoid skew.</li>\r\n            <li><strong>Comparability:</strong> normalize (0–1) or z‑score to compare across metrics.</li>\r\n            <li><strong>Signal vs noise:</strong> rolling averages reduce jitter; outlier rules prevent distortion.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>At a glance</h3>\r\n          <ul>\r\n            <li><strong>Min/Max:</strong> bounds; sensitive to outliers.</li>\r\n            <li><strong>Median:</strong> robust central tendency.</li>\r\n            <li><strong>Percentiles (P10/P90):</strong> robust range for color/axes.</li>\r\n            <li><strong>Std‑dev:</strong> variability; z‑scores for outliers.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Apply to visuals</h3>\r\n          <ul>\r\n            <li>Heatmaps: color domain = <code class=\"inline\">[P10, P50, P90]</code>.</li>\r\n            <li>Time‑series: show line + <em>rolling mean</em> + highlight z‑outliers.</li>\r\n            <li>Distributions: Freedman‑Diaconis bins for histograms.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"box\" style=\"margin-top:14px;\">\r\n        <strong>Fix applied:</strong> removed the unsupported Altair argument <code class=\"inline\">disabled=...</code> from tooltips and\r\n        replaced it with a safe, conditional tooltip list (works on Altair v5). This resolves the\r\n        <em>SchemaValidationError: Tooltip has no parameter named 'disabled'</em>.\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- CORE STATISTICS -->\r\n  <section class=\"section-card\" id=\"core\">\r\n    <div class=\"banner\">\r\n      <small>Reference</small>\r\n      <h1>Core statistics & how to use them in charts</h1>\r\n      <p>Pick the right summary for the job</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>Min / Max</strong> — absolute bounds. Good for full context, but <em>don’t</em> use alone to scale color/axis when outliers exist.</li>\r\n        <li><strong>Mean & Std‑dev</strong> — average & variability. Use <em>z‑scores</em> to flag points far from the mean (e.g., |z| ≥ 3).</li>\r\n        <li><strong>Median & Percentiles (P10, P25, P50, P75, P90)</strong> — robust against skew. Use <em>quantile clipping</em> (e.g., P5–P95) for axis/color limits.</li>\r\n        <li><strong>IQR (P75–P25)</strong> — robust spread. Box plots and Freedman‑Diaconis bin widths rely on IQR.</li>\r\n        <li><strong>Rolling averages</strong> — smooth noise in time‑series; pick windows (7, 14, 30 days) based on cadence.</li>\r\n        <li><strong>Normalization</strong> — MinMax (0–1) to compare metrics on a common scale; Z‑score to center by mean/variance.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STREAMLIT DEMO -->\r\n  <section class=\"section-card\" id=\"demo\">\r\n    <div class=\"banner\">\r\n      <small>Hands‑on</small>\r\n      <h1>Streamlit: stats → visuals (line + histogram + box plot)</h1>\r\n      <p>Upload a CSV or use a demo series; robust scaling, outliers, rolling</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p><strong>What it does:</strong> loads a CSV, picks a date column and a numeric metric, computes min/max/mean/median/percentiles,\r\n         offers robust range (P5–P95), normalization, z‑score outlier highlighting, rolling mean, and renders three visuals.</p>\r\n\r\n<pre># streamlit_stats_viz.py  (Altair v5‑friendly; no unsupported tooltip args)\r\nimport io\r\nfrom typing import Optional\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\nimport altair as alt\r\nimport streamlit as st\r\n\r\nst.set_page_config(page_title=\"Statistics for Visualization\", page_icon=\"📊\", layout=\"wide\")\r\nst.title(\"📊 Statistics for Visualization — Practical Demo\")\r\n\r\n# ---------------- Demo / Data load ----------------\r\n@st.cache_data(show_spinner=False)\r\ndef demo_timeseries(n=365, seed=42) -> pd.DataFrame:\r\n    rng = np.random.default_rng(seed)\r\n    dates = pd.date_range(\"2024-01-01\", periods=n, freq=\"D\")\r\n    # seasonal + noise + a few spikes\r\n    x = np.arange(n)\r\n    val = 100 + 15*np.sin(x/12) + 8*np.cos(x/25) + rng.normal(0, 4, n)\r\n    spikes = rng.choice(n, size=5, replace=False)\r\n    val[spikes] += rng.normal(25, 6, len(spikes))\r\n    return pd.DataFrame({\"Date\": dates, \"Value\": val})\r\n\r\n@st.cache_data(show_spinner=False)\r\ndef read_csv_safely(file) -> Optional[pd.DataFrame]:\r\n    try:\r\n        df = pd.read_csv(file)\r\n        # parse common datetime columns\r\n        for c in df.columns:\r\n            if str(c).lower() in (\"date\",\"time\",\"datetime\",\"timestamp\"):\r\n                df[c] = pd.to_datetime(df[c], errors=\"coerce\")\r\n        return df\r\n    except Exception as e:\r\n        st.error(f\"Failed to read CSV: {e}\")\r\n        return None\r\n\r\nwith st.sidebar:\r\n    st.header(\"Data\")\r\n    up = st.file_uploader(\"Upload CSV\", type=[\"csv\"])\r\n    if up is not None:\r\n        df_raw = read_csv_safely(up)\r\n        source = \"Uploaded CSV\"\r\n    else:\r\n        df_raw = demo_timeseries()\r\n        source = \"Demo series (synthetic)\"\r\n\r\n    if df_raw is None or df_raw.empty:\r\n        st.stop()\r\n\r\n    st.caption(f\"Source: **{source}**  •  Rows: **{len(df_raw):,}**  •  Cols: **{len(df_raw.columns)}**\")\r\n\r\n    dt_cols = [c for c in df_raw.columns if pd.api.types.is_datetime64_any_dtype(df_raw[c])]\r\n    date_col = st.selectbox(\"Date column (optional)\", [\"<none>\"] + dt_cols, index=(1 if dt_cols else 0))\r\n\r\n    num_cols = df_raw.select_dtypes(include=\"number\").columns.tolist()\r\n    if not num_cols:\r\n        st.warning(\"No numeric columns detected.\")\r\n        st.stop()\r\n    metric = st.selectbox(\"Numeric column\", num_cols, index=0)\r\n\r\n    st.header(\"Scaling & Filters\")\r\n    robust = st.checkbox(\"Use robust range (P5–P95) for axis/color\", value=True)\r\n    roll = st.slider(\"Rolling mean window\", 1, 60, 7, help=\"Applied on the line chart\")\r\n    norm = st.selectbox(\"Normalize\", [\"None\",\"MinMax (0–1)\",\"Z-score\"], index=0)\r\n    z_thresh = st.slider(\"Outlier |z|-threshold\", 2.0, 5.0, 3.0, 0.5)\r\n\r\n# Prepare DataFrame\r\ndf = df_raw.copy()\r\nif date_col != \"<none>\":\r\n    df = df.dropna(subset=[date_col]).sort_values(date_col)\r\nelse:\r\n    df = df.reset_index().rename(columns={\"index\":\"Index\"})\r\n    date_col = \"Index\"\r\n\r\n# Numeric series\r\ns = pd.to_numeric(df[metric], errors=\"coerce\").dropna()\r\ndf = df.loc[s.index].copy()\r\ndf[\"y\"] = s.values\r\n\r\n# Summary stats\r\ndesc = df[\"y\"].describe(percentiles=[.05,.10,.25,.50,.75,.90,.95]).to_frame(name=\"value\")\r\nymin, ymax = float(desc.loc[\"min\",\"value\"]), float(desc.loc[\"max\",\"value\"])\r\nmu, sd = float(desc.loc[\"mean\",\"value\"]), float(df[\"y\"].std(ddof=1))\r\np10, p50, p90 = (float(desc.loc[\"10%\",\"value\"]), float(desc.loc[\"50%\",\"value\"]), float(desc.loc[\"90%\",\"value\"]))\r\np5, p25, p75, p95 = (float(desc.loc[\"5%\",\"value\"]), float(desc.loc[\"25%\",\"value\"]),\r\n                     float(desc.loc[\"75%\",\"value\"]), float(desc.loc[\"95%\",\"value\"]))\r\n\r\n# Normalization for plotting\r\ny_plot = df[\"y\"].copy()\r\nif norm == \"MinMax (0–1)\":\r\n    lo, hi = y_plot.min(), y_plot.max()\r\n    y_plot = (y_plot - lo) / (hi - lo) if hi > lo else y_plot*0\r\nelif norm == \"Z-score\":\r\n    y_plot = (y_plot - mu) / sd if sd > 0 else y_plot*0\r\ndf[\"y_plot\"] = y_plot\r\n\r\n# Z-score outliers on RAW values\r\ndf[\"is_outlier\"] = (abs((df[\"y\"] - mu) / sd) >= z_thresh) if sd > 0 else False\r\n\r\n# Rolling mean (on plotted series for visual coherence)\r\nw = max(1, int(roll))\r\ndf[\"roll\"] = df[\"y_plot\"].rolling(w, min_periods=1).mean()\r\n\r\n# Robust axis range (for reporting)\r\nlo_rep, hi_rep = (p5, p95) if robust else (ymin, ymax)\r\n\r\n# ---------------- KPIs ----------------\r\nk1,k2,k3,k4,k5,k6 = st.columns(6)\r\nk1.metric(\"Min\", f\"{ymin:,.2f}\")\r\nk2.metric(\"P10 / Median / P90\", f\"{p10:,.2f} / {p50:,.2f} / {p90:,.2f}\")\r\nk3.metric(\"Max\", f\"{ymax:,.2f}\")\r\nk4.metric(\"Mean\", f\"{mu:,.2f}\")\r\nk5.metric(\"Std‑dev\", f\"{sd:,.2f}\")\r\nk6.metric(f\"Outliers (|z| ≥ {z_thresh:.1f})\", f\"{int(df['is_outlier'].sum()):,}\")\r\n\r\n# ---------------- Charts ----------------\r\nleft, right = st.columns([2,1], gap=\"large\")\r\n\r\n# Build a safe tooltip list (Altair v5 — no 'disabled' parameter)\r\nis_time = pd.api.types.is_datetime64_any_dtype(df[date_col])\r\nif is_time:\r\n    tooltips = [alt.Tooltip(f\"{date_col}:T\", title=\"Date\", format=\"%Y-%m-%d\"),\r\n                alt.Tooltip(\"y:Q\", title=metric, format=\",.2f\")]\r\n    x_enc = alt.X(f\"{date_col}:T\", title=None)\r\nelse:\r\n    tooltips = [alt.Tooltip(f\"{date_col}:Q\", title=\"Index\"),\r\n                alt.Tooltip(\"y:Q\", title=metric, format=\",.2f\")]\r\n    x_enc = alt.X(f\"{date_col}:Q\", title=None)\r\n\r\nwith left:\r\n    st.subheader(\"Time series\")\r\n    base = alt.Chart(df).encode(x=x_enc)\r\n\r\n    line = base.mark_line().encode(\r\n        y=alt.Y(\"y_plot:Q\", title=f\"{metric} ({'norm' if norm!='None' else 'raw'})\"),\r\n        tooltip=tooltips\r\n    )\r\n\r\n    roll_line = base.mark_line(strokeDash=[6,4]).encode(\r\n        y=\"roll:Q\",\r\n        tooltip=tooltips\r\n    )\r\n\r\n    points = base.mark_circle(size=64, color=\"#d62728\").encode(\r\n        y=\"y_plot:Q\",\r\n        tooltip=tooltips\r\n    ).transform_filter(\"datum.is_outlier == true\")\r\n\r\n    st.altair_chart((line + roll_line + points).interactive(), use_container_width=True)\r\n\r\n    st.subheader(\"Histogram\")\r\n    # Freedman–Diaconis bins (fallback to 30)\r\n    iqr = p75 - p25\r\n    n = len(df)\r\n    width = 2 * iqr * (n ** (-1/3)) if iqr > 0 else None\r\n    maxbins = int(np.clip((ymax - ymin)/width, 8, 80)) if width and width > 0 else 30\r\n    hist = alt.Chart(df).mark_bar().encode(\r\n        x=alt.X(\"y:Q\", bin=alt.Bin(maxbins=maxbins), title=metric),\r\n        y=alt.Y(\"count():Q\", title=\"Count\"),\r\n        tooltip=[alt.Tooltip(\"count():Q\", title=\"Count\")]\r\n    )\r\n    st.altair_chart(hist, use_container_width=True)\r\n\r\nwith right:\r\n    st.subheader(\"Box plot\")\r\n    box = alt.Chart(df).mark_boxplot(size=60).encode(y=alt.Y(\"y:Q\", title=metric))\r\n    st.altair_chart(box, use_container_width=True)\r\n\r\n    st.subheader(\"Axis / Color suggestion\")\r\n    st.code(f\"Use {'robust' if robust else 'full'} range: [{lo_rep:,.2f}, {hi_rep:,.2f}]\\n\"\r\n            \"Heatmaps: map colors via [P10, P50, P90] or similar.\", language=\"text\")\r\n\r\nst.subheader(\"Outliers\")\r\nst.caption(\"Rows flagged by |z| ≥ threshold (based on raw values).\")\r\nout = df.loc[df[\"is_outlier\"], [date_col, \"y\"]].rename(columns={date_col:\"Date\", \"y\":metric})\r\nst.dataframe(out, use_container_width=True)</pre>\r\n\r\n      <p><strong>Run it</strong></p>\r\n      <pre>pip install streamlit altair pandas numpy\r\nstreamlit run streamlit_stats_viz.py</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- PRACTICAL RECIPES -->\r\n  <section class=\"section-card\" id=\"recipes\">\r\n    <div class=\"banner\">\r\n      <small>Recipes</small>\r\n      <h1>Practical recipes that improve charts</h1>\r\n      <p>Small changes that make a big difference</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>Heatmap color domain:</strong> use <code class=\"inline\">[P10, P50, P90]</code> (or P5/P50/P95) instead of <code class=\"inline\">[min, mean, max]</code> to avoid outlier domination.</li>\r\n        <li><strong>Axis limits:</strong> clip to <code class=\"inline\">[P5, P95]</code> and annotate the clipping rule; retain tooltips for exact values.</li>\r\n        <li><strong>Rolling overlays:</strong> on time‑series, overlay a 7‑ or 14‑day rolling mean to reveal the signal trend.</li>\r\n        <li><strong>Outlier dots:</strong> mark |z|≥3 points as red circles on the line; don’t scale axes to accommodate them.</li>\r\n        <li><strong>Bins:</strong> pick bins with Freedman‑Diaconis (automatic) or provide a simple slider (8–80) for analyst control.</li>\r\n        <li><strong>Compare metrics:</strong> MinMax normalize to 0–1 and plot together; use a secondary scale only when absolutely necessary.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "d4510c4c-7d40-421b-87e9-a9bb349d7a04"
    },
    {
      "kind": "article",
      "order": 5,
      "title": "Different Statistical Views of Daily Data",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Calendar Heatmaps • 5 Statistical Views of Daily Data</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Grid boxes === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr)); gap: 14px; }\r\n.box  { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Visualization • Calendars</small>\r\n      <h1>Five Calendar Views — Same Data, Different Statistics</h1>\r\n      <p>Switch statistical lenses to answer different questions from daily data</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>1) Raw (P10–P50–P90)</h3>\r\n          <p>Absolute values with a robust color domain. Good for overall scale and extremes without letting outliers dominate.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>2) Month‑Relative % of Max</h3>\r\n          <p>Each month normalized to its own max (0–1). Great for seeing <em>relative peaks</em> within that month (seasonality removed).</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>3) Robust Z (Median & MAD)</h3>\r\n          <p>Deviations from the yearly median scaled by MAD (outlier‑resistant). Symmetric red↔green for “unusually low/high” days.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>4) 7‑Day Rolling Mean</h3>\r\n          <p>Smooths noise to reveal weekly trends. Use when daily volatility hides sustained increases/decreases.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>5) Deviation vs Day‑of‑Week Baseline</h3>\r\n          <p>Subtracts a DOW baseline (median Monday, Tuesday, …). Shows how a day performed vs its typical weekday.</p>\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:12px;\">Copy the app below to your repo and run it. Use the <strong>View</strong> selector in the sidebar to switch between the five statistical calendars.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Copy & Run</small>\r\n      <h1>app_calendar_5_views.py — Streamlit + Altair</h1>\r\n      <p>Faceted (3×4) monthly calendars with multiple statistical encodings</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre># app_calendar_5_views.py\r\n# Five statistical calendar views of daily data (red → white → green)\r\n# Default CSV: /workspaces/learningexamples/bank_visits_2024.csv\r\n# Columns (case-insensitive): date, total_visit/total_visits/visits/visit/count/value\r\n\r\nimport streamlit as st\r\nimport pandas as pd\r\nimport numpy as np\r\nimport altair as alt\r\n\r\nst.set_page_config(page_title=\"Calendar Heatmaps — 5 Statistical Views\", layout=\"wide\")\r\nst.title(\"📅 Calendar Heatmaps — Five Statistical Views\")\r\n\r\nDEFAULT_PATH = \"/workspaces/learningexamples/bank_visits_2024.csv\"\r\n\r\n# ---------------- Sidebar ----------------\r\nst.sidebar.header(\"Data & View\")\r\ncsv_path = st.sidebar.text_input(\"CSV path\", DEFAULT_PATH)\r\nview = st.sidebar.selectbox(\r\n    \"Calendar view\",\r\n    [\r\n        \"Raw (P10–P50–P90)\",\r\n        \"Month‑Relative % of Max (0–1)\",\r\n        \"Robust Z (Median & MAD)\",\r\n        \"7‑Day Rolling Mean\",\r\n        \"Deviation vs Day‑of‑Week Baseline\",\r\n    ],\r\n    index=0\r\n)\r\n\r\n# Shared appearance\r\nmissing_color = st.sidebar.color_picker(\"Outside‑month cell color\", \"#BDBDBD\")\r\ncell_border = st.sidebar.checkbox(\"Show cell borders\", value=True)\r\nmonth_label_style = st.sidebar.selectbox(\"Month label\", [\"Full (January)\", \"Short (Jan)\"], index=0)\r\ncell_size = st.sidebar.slider(\"Cell size (px)\", 16, 36, 24)\r\ncalendar_width  = 7 * cell_size + 30\r\ncalendar_height = 6 * cell_size + 20\r\n\r\n# View‑specific controls\r\nst.sidebar.header(\"Statistics\")\r\npivot_pct = None\r\nlimit = None\r\nroll_window = None\r\ndow_stat = None\r\n\r\nif view in [\"Raw (P10–P50–P90)\", \"7‑Day Rolling Mean\"]:\r\n    pivot_pct = st.sidebar.slider(\"White pivot (percentile)\", 0.0, 1.0, 0.50, 0.01)\r\nif view == \"Robust Z (Median & MAD)\":\r\n    limit = st.sidebar.slider(\"Diverging limit (±)\", 1.0, 6.0, 3.0, 0.5, help=\"Clamps color domain to [−L, 0, +L].\")\r\nif view == \"7‑Day Rolling Mean\":\r\n    roll_window = st.sidebar.slider(\"Rolling window (days)\", 3, 30, 7, 1)\r\nif view == \"Deviation vs Day‑of‑Week Baseline\":\r\n    dow_stat = st.sidebar.selectbox(\"Baseline statistic\", [\"Median\", \"Mean\"], index=0)\r\n    limit = st.sidebar.slider(\"Diverging limit (±)\", 5.0, 200.0, 50.0, 5.0,\r\n                              help=\"Clamps color domain for deviation from DOW baseline.\")\r\n\r\n# ---------------- Data Load ----------------\r\n@st.cache_data(show_spinner=False)\r\ndef load_csv(path: str) -> pd.DataFrame:\r\n    df = pd.read_csv(path)\r\n    cols = {c.lower().strip(): c for c in df.columns}\r\n    date_col = next((cols[c] for c in [\"date\",\"day\"] if c in cols), None)\r\n    val_col  = next((cols[c] for c in [\"total_visit\",\"total_visits\",\"visits\",\"visit\",\"count\",\"value\"] if c in cols), None)\r\n    if not date_col or not val_col:\r\n        raise ValueError(\"CSV must have 'date' and a visits column (e.g., 'total_visit').\")\r\n    df = df[[date_col, val_col]].rename(columns={date_col: \"date\", val_col: \"visits\"})\r\n    df[\"date\"] = pd.to_datetime(df[\"date\"], errors=\"coerce\")\r\n    df[\"visits\"] = pd.to_numeric(df[\"visits\"], errors=\"coerce\")\r\n    df = df.dropna(subset=[\"date\"]).sort_values(\"date\").reset_index(drop=True)\r\n    return df\r\n\r\ntry:\r\n    raw = load_csv(csv_path)\r\nexcept Exception as e:\r\n    st.error(f\"Failed to read CSV: {e}\")\r\n    st.stop()\r\n\r\nyears = sorted(raw[\"date\"].dt.year.unique().tolist())\r\nyear  = st.sidebar.selectbox(\"Year\", years, index=(0 if len(years)==1 else len(years)-1))\r\nyear_data = raw[raw[\"date\"].dt.year == year][[\"date\",\"visits\"]].copy()\r\nif year_data.empty:\r\n    st.warning(f\"No data for {year}.\")\r\n    st.stop()\r\n\r\n# ---------------- Calendar Grid Builder ----------------\r\ndef build_year_calendar(year_df: pd.DataFrame, year: int) -> pd.DataFrame:\r\n    frames = []\r\n    for month in range(1, 13):\r\n        first = pd.Timestamp(year, month, 1)\r\n        start_sun = first - pd.Timedelta(days=(first.weekday() + 1) % 7)\r\n        grid_dates = pd.date_range(start_sun, periods=42, freq=\"D\")\r\n        dfm = pd.DataFrame({\"date\": grid_dates})\r\n        dfm[\"month_num\"] = month\r\n        dfm[\"in_month\"]  = dfm[\"date\"].dt.month.eq(month)\r\n        dfm[\"dow\"] = ((dfm[\"date\"].dt.weekday + 1) % 7).astype(int)  # Sun=0\r\n        dfm[\"wom\"] = ((dfm[\"date\"] - start_sun).dt.days // 7).astype(int)\r\n        dfm[\"day\"] = dfm[\"date\"].dt.day.where(dfm[\"in_month\"], other=None)\r\n        dfm[\"month_name\"] = first.strftime(\"%B\") if month_label_style.startswith(\"Full\") else first.strftime(\"%b\")\r\n        frames.append(dfm)\r\n    cal = pd.concat(frames, ignore_index=True)\r\n    cal = cal.merge(year_df, on=\"date\", how=\"left\")  # adds 'visits'\r\n    dow_names = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\r\n    cal[\"dow_name\"] = cal[\"dow\"].map(dict(enumerate(dow_names)))\r\n    return cal\r\n\r\ncal = build_year_calendar(year_data, year)\r\n\r\n# ---------------- Value Encoding per View ----------------\r\nlegend_title = \"\"\r\ncolor_scale = None\r\n\r\ndef seq_scale(lo, mid, hi):\r\n    return alt.Scale(domain=[float(lo), float(mid), float(hi)],\r\n                     range=[\"#d73027\",\"#ffffff\",\"#1a9850\"], clamp=True)\r\n\r\ndef div_scale(limit):\r\n    L = float(limit)\r\n    return alt.Scale(domain=[-L, 0.0, +L],\r\n                     range=[\"#d73027\",\"#ffffff\",\"#1a9850\"], clamp=True)\r\n\r\nif view == \"Raw (P10–P50–P90)\":\r\n    vals = cal.loc[cal[\"in_month\"] & cal[\"visits\"].notna(), \"visits\"].to_numpy()\r\n    p10 = np.quantile(vals, 0.10) if vals.size else 0\r\n    p50 = np.quantile(vals, float(pivot_pct)) if vals.size else 0  # pivot can be any quantile; default 0.50\r\n    p90 = np.quantile(vals, 0.90) if vals.size else 1\r\n    cal[\"value\"] = cal[\"visits\"]\r\n    legend_title = \"Visits\"\r\n    color_scale = seq_scale(p10, p50, p90)\r\n\r\nelif view == \"Month‑Relative % of Max (0–1)\":\r\n    # per-month normalization (within this year)\r\n    month_max = year_data.assign(month=year_data[\"date\"].dt.month) \\\r\n                         .groupby(\"month\")[\"visits\"].max()\r\n    cal = cal.join(month_max, on=cal[\"month_num\"], rsuffix=\"_mmax\")\r\n    denom = cal[\"visits_mmax\"].replace({0: np.nan})\r\n    cal[\"value\"] = (cal[\"visits\"] / denom).clip(0, 1)\r\n    cal.loc[denom.isna(), \"value\"] = np.nan  # if month had no data\r\n    cal = cal.drop(columns=[\"visits_mmax\"])\r\n    legend_title = \"% of month max\"\r\n    color_scale = seq_scale(0.0, 0.5, 1.0)\r\n\r\nelif view == \"Robust Z (Median & MAD)\":\r\n    # robust z = 0.6745 * (x - median) / MAD\r\n    x = year_data[\"visits\"].to_numpy()\r\n    med = float(np.median(x))\r\n    mad = float(np.median(np.abs(x - med)))\r\n    if mad == 0:\r\n        rz = (year_data[\"visits\"] - med) * 0.0\r\n    else:\r\n        rz = 0.6745 * (year_data[\"visits\"] - med) / mad\r\n    year_rz = year_data.assign(value=rz)[[\"date\",\"value\"]]\r\n    cal = cal.drop(columns=[\"value\"], errors=\"ignore\").merge(year_rz, on=\"date\", how=\"left\")\r\n    legend_title = \"Robust z\"\r\n    color_scale = div_scale(limit)\r\n\r\nelif view == \"7‑Day Rolling Mean\":\r\n    # trailing centered=False rolling mean on complete year series\r\n    ydf = year_data.sort_values(\"date\").copy()\r\n    ydf[\"value\"] = ydf[\"visits\"].rolling(int(roll_window), min_periods=1).mean()\r\n    cal = cal.drop(columns=[\"value\"], errors=\"ignore\").merge(ydf[[\"date\",\"value\"]], on=\"date\", how=\"left\")\r\n    vals = cal.loc[cal[\"in_month\"] & cal[\"value\"].notna(), \"value\"].to_numpy()\r\n    p10 = np.quantile(vals, 0.10) if vals.size else 0\r\n    p50 = np.quantile(vals, float(pivot_pct)) if vals.size else 0\r\n    p90 = np.quantile(vals, 0.90) if vals.size else 1\r\n    legend_title = f\"{int(roll_window)}‑day mean\"\r\n    color_scale = seq_scale(p10, p50, p90)\r\n\r\nelse:  # Deviation vs DOW Baseline\r\n    ydf = year_data.assign(dow=((year_data[\"date\"].dt.weekday + 1) % 7))\r\n    if dow_stat == \"Median\":\r\n        base = ydf.groupby(\"dow\")[\"visits\"].median()\r\n    else:\r\n        base = ydf.groupby(\"dow\")[\"visits\"].mean()\r\n    cal = cal.join(base, on=\"dow\", rsuffix=\"_base\")\r\n    cal[\"value\"] = cal[\"visits\"] - cal[\"visits_base\"]\r\n    cal = cal.drop(columns=[\"visits_base\"])\r\n    legend_title = f\"Δ vs {dow_stat} DOW\"\r\n    color_scale = div_scale(limit)\r\n\r\n# ---------------- Chart ----------------\r\ndow_order = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\r\nwom_order = [0,1,2,3,4,5]\r\nmonth_full  = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\r\nmonth_short = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\r\nfacet_order = month_full if month_label_style.startswith(\"Full\") else month_short\r\n\r\nbase = (\r\n    alt.Chart(cal)\r\n    .mark_rect(stroke=\"#E0E0E0\" if cell_border else None, strokeWidth=0.5)\r\n    .encode(\r\n        x=alt.X(\"dow_name:N\", sort=dow_order, axis=alt.Axis(title=None, labelAngle=0, labelPadding=6)),\r\n        y=alt.Y(\"wom:O\",      sort=wom_order, axis=alt.Axis(title=None, ticks=False, labels=False)),\r\n        color=alt.condition(\"datum.in_month\", alt.value(\"#FFFFFF\"), alt.value(missing_color)),\r\n    )\r\n    .properties(width=calendar_width, height=calendar_height)\r\n)\r\n\r\nvals_layer = (\r\n    alt.Chart(cal)\r\n    .transform_filter(\"datum.in_month && isValid(datum.value)\")\r\n    .mark_rect(stroke=\"#E0E0E0\" if cell_border else None, strokeWidth=0.5)\r\n    .encode(\r\n        x=alt.X(\"dow_name:N\", sort=dow_order, axis=None),\r\n        y=alt.Y(\"wom:O\", sort=wom_order, axis=None),\r\n        color=alt.Color(\"value:Q\", scale=color_scale, legend=alt.Legend(title=legend_title, gradientLength=120)),\r\n        tooltip=[\r\n            alt.Tooltip(\"date:T\",   title=\"Date\"),\r\n            alt.Tooltip(\"visits:Q\", title=\"Visits\", format=\",.0f\"),\r\n            alt.Tooltip(\"value:Q\",  title=legend_title)\r\n        ],\r\n    )\r\n    .properties(width=calendar_width, height=calendar_height)\r\n)\r\n\r\nday_text = (\r\n    alt.Chart(cal)\r\n    .mark_text(baseline=\"middle\", align=\"center\", dy=0, fontSize=11)\r\n    .encode(\r\n        x=alt.X(\"dow_name:N\", sort=dow_order, axis=None),\r\n        y=alt.Y(\"wom:O\", sort=wom_order, axis=None),\r\n        text=alt.condition(\"datum.in_month\", \"day:Q\", alt.value(\"\")),\r\n        color=alt.condition(\"datum.in_month\", alt.value(\"#333333\"), alt.value(\"#999999\")),\r\n    )\r\n    .properties(width=calendar_width, height=calendar_height)\r\n)\r\n\r\nchart = alt.layer(base, vals_layer, day_text).facet(\r\n    facet=alt.Facet(\"month_name:N\", sort=facet_order, title=None),\r\n    columns=3\r\n)\r\n\r\n# ---------------- Layout ----------------\r\nleft, right = st.columns([4,1], gap=\"large\")\r\nwith left:\r\n    st.subheader(f\"Calendars — {year}\")\r\n    st.caption(f\"View: **{view}**\")\r\n    st.altair_chart(chart, use_container_width=True)\r\n\r\nwith right:\r\n    st.subheader(\"Legend / Notes\")\r\n    if view in [\"Raw (P10–P50–P90)\", \"7‑Day Rolling Mean\"]:\r\n        st.markdown(f\"- Red → low (≈ P10)\\n- White → {int(pivot_pct*100)}th percentile\\n- Green → high (≈ P90)\")\r\n    elif view == \"Month‑Relative % of Max (0–1)\":\r\n        st.markdown(\"- Red → 0 (low for that month)\\n- White → 0.5\\n- Green → 1.0 (month peak)\")\r\n    elif view == \"Robust Z (Median & MAD)\":\r\n        st.markdown(f\"- Diverging domain: ±{limit}\\n- Red → below median · Green → above median\")\r\n    else:\r\n        st.markdown(f\"- Δ vs {dow_stat} DOW baseline\\n- Diverging domain: ±{limit}\")\r\n\r\nst.divider()\r\nwith st.expander(\"Show underlying data (this year)\"):\r\n    st.dataframe(cal[[\"date\",\"month_name\",\"in_month\",\"day\",\"visits\",\"value\"]].sort_values(\"date\"),\r\n                 use_container_width=True)</pre>\r\n\r\n      <p><strong>Run it</strong></p>\r\n      <pre>pip install streamlit altair pandas numpy\r\nstreamlit run app_calendar_5_views.py</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "59585d1b-ab42-4813-bdbf-8f16ec98c8ed"
    },
    {
      "kind": "article",
      "order": 6,
      "title": "D3.js Once • Always Fresh via SQL",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>D3.js Built Once • Auto‑Updating with SQL Data (Workflow)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small {\r\n  font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF;\r\n}\r\n.section-card .banner h1 {\r\n  margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF;\r\n}\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Diagram styles === */\r\n.lane {\r\n  border: 1px solid #EBEBEB; border-radius: 12px; padding: 14px; margin-top: 14px; background: #fff;\r\n}\r\n.lane-title {\r\n  font-weight: 700; color: #000; margin-bottom: 10px; display: flex; align-items: center; gap: 8px;\r\n}\r\n.badge { font-size: 12px; font-weight: 700; padding: 3px 8px; border-radius: 999px; border: 1px solid #A3A3A3; }\r\n.badge-once { background: #000000; color: #EBEBEB; border-color: #000000; }\r\n.badge-cycle { background: #BDBDBD; color: #000000; border-color: #A3A3A3; }\r\n\r\n.flow {\r\n  display: flex; flex-wrap: wrap; gap: 10px; align-items: center;\r\n}\r\n.node {\r\n  min-width: 170px;\r\n  border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 12px;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04);\r\n}\r\n.node .t { font-weight: 700; color: #000; margin-bottom: 4px; }\r\n.node .s { font-size: 13px; color: #777; }\r\n\r\n.arrow {\r\n  font-size: 20px; color: #A3A3A3; line-height: 1; padding: 0 4px;\r\n}\r\n\r\n/* === Legend & tips === */\r\n.legend {\r\n  display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\r\n  gap: 14px; margin-top: 10px;\r\n}\r\n.legend .item {\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 12px; background: #fff;\r\n}\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>D3.js • SQL • Ops</small>\r\n      <h1>Build Once, Update Forever — D3.js fed by SQL</h1>\r\n      <p>Your D3 chart is a <strong>final outcome</strong>: one-time build; data changes flow from SQL to the same chart automatically.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        The key idea: <strong>separate the visualization from the data pipeline</strong>. You compile and deploy your D3.js chart\r\n        <em>once</em> (static assets), and you expose data from SQL via a stable <strong>JSON/CSV endpoint</strong>. As data changes,\r\n        the endpoint returns fresh values — the chart updates on load (or on a lightweight timer) without rebuilding the D3 code.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DIAGRAM 1: One-time Build vs Continuous Data -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Workflow</small>\r\n      <h1>One‑Time Build • Continuous Data Updates</h1>\r\n      <p>Two tracks: <em>build</em> (once) and <em>data</em> (forever)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n\r\n      <div class=\"lane\">\r\n        <div class=\"lane-title\">A) One‑time build <span class=\"badge badge-once\">One‑time</span></div>\r\n        <div class=\"flow\">\r\n          <div class=\"node\">\r\n            <div class=\"t\">Design & Develop</div>\r\n            <div class=\"s\">D3 chart (axes, scales, tooltips, legend)</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Static Assets</div>\r\n            <div class=\"s\"><em>index.html</em> • <em>bundle.js</em> • <em>styles.css</em></div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Host</div>\r\n            <div class=\"s\">Static hosting / CDN (e.g., GitHub Pages, Netlify, S3+CloudFront)</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"lane\">\r\n        <div class=\"lane-title\">B) Continuous data path <span class=\"badge badge-cycle\">Recurring</span></div>\r\n        <div class=\"flow\">\r\n          <div class=\"node\">\r\n            <div class=\"t\">Data Entry</div>\r\n            <div class=\"s\">App forms • CSV uploads • Integrations</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">SQL Database</div>\r\n            <div class=\"s\">Postgres/Neon • SQLite • (your choice)</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Transform Layer</div>\r\n            <div class=\"s\">Views / Materialized Views • Validation</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">API / Feed</div>\r\n            <div class=\"s\">JSON / CSV endpoint with stable schema</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">D3 Fetch</div>\r\n            <div class=\"s\">Chart reads endpoint at runtime</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"legend\">\r\n        <div class=\"item\">\r\n          <strong>Build track</strong>: you only redo this if you change visual design or logic (new chart type, fields, interactivity).\r\n        </div>\r\n        <div class=\"item\">\r\n          <strong>Data track</strong>: runs forever. New rows enter SQL → transformed view → endpoint → chart loads fresh data.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DIAGRAM 2: Update Loop -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Lifecycle</small>\r\n      <h1>Update Loop — from new row to visible change</h1>\r\n      <p>What happens after you insert new data</p>\r\n    </div>\r\n    <div class=\"body\">\r\n\r\n      <div class=\"lane\">\r\n        <div class=\"lane-title\">C) Data → Chart propagation <span class=\"badge badge-cycle\">Recurring</span></div>\r\n        <div class=\"flow\">\r\n          <div class=\"node\">\r\n            <div class=\"t\">Insert/Update</div>\r\n            <div class=\"s\">New facts written to raw tables</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Refresh</div>\r\n            <div class=\"s\">View recompute / MatView refresh (cron, trigger, webhook)</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Cache Policy</div>\r\n            <div class=\"s\">API TTL / CDN TTL (invalidate or let expire)</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Fetch in Browser</div>\r\n            <div class=\"s\">On load or timed refresh (e.g., every 5–15 min)</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Re‑render</div>\r\n            <div class=\"s\">D3 scales update • marks transition</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"legend\">\r\n        <div class=\"item\">\r\n          <strong>No redeploy needed</strong>: the chart file does not change. Only the <em>data response</em> changes.\r\n        </div>\r\n        <div class=\"item\">\r\n          <strong>Observability</strong>: log refresh jobs, expose <em>last_updated</em> in your endpoint, surface it in the chart footer.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DIAGRAM 3: Roles & Responsibilities -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Architecture</small>\r\n      <h1>Who owns what? (Separation of concerns)</h1>\r\n      <p>Keep each responsibility focused for reliability</p>\r\n    </div>\r\n    <div class=\"body\">\r\n\r\n      <div class=\"lane\">\r\n        <div class=\"lane-title\">D) Responsibilities map</div>\r\n        <div class=\"flow\">\r\n          <div class=\"node\">\r\n            <div class=\"t\">Data Producers</div>\r\n            <div class=\"s\">Create/ingest records; ensure data quality at source</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Data Modelers</div>\r\n            <div class=\"s\">SQL views/matviews; schema versioning; business logic</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">API / Platform</div>\r\n            <div class=\"s\">Stable endpoints; auth; caching; pagination</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">D3 Visualization</div>\r\n            <div class=\"s\">Rendering logic; scales; accessibility; UX</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">Ops / SRE</div>\r\n            <div class=\"s\">Monitoring, alerts, uptime, budgets</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <ul style=\"margin-top:12px;\">\r\n        <li><strong>Stable contract</strong>: the endpoint is a contract — fields, types, units. Backward‑compatible changes keep charts stable.</li>\r\n        <li><strong>Versioning</strong>: if you must break the contract, create <em>/v2</em> (charts adopt it when ready).</li>\r\n        <li><strong>Performance</strong>: pre‑aggregate in SQL; send only what the chart needs (filters, date windows).</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DIAGRAM 4: Deployment Topology -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Deployment</small>\r\n      <h1>Minimal topology for sustainable updates</h1>\r\n      <p>Decouple static front‑end from live data back‑end</p>\r\n    </div>\r\n    <div class=\"body\">\r\n\r\n      <div class=\"lane\">\r\n        <div class=\"lane-title\">E) Topology</div>\r\n        <div class=\"flow\">\r\n          <div class=\"node\">\r\n            <div class=\"t\">Static Hosting (CDN)</div>\r\n            <div class=\"s\">D3 assets cached globally • cheap & fast</div>\r\n          </div>\r\n          <div class=\"arrow\">⇄</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">API Gateway</div>\r\n            <div class=\"s\">HTTPS JSON/CSV • auth • rate limits • TTL</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">App/Service</div>\r\n            <div class=\"s\">Transforms & serves DB results (or direct SQL read‑only)</div>\r\n          </div>\r\n          <div class=\"arrow\">→</div>\r\n          <div class=\"node\">\r\n            <div class=\"t\">SQL Database</div>\r\n            <div class=\"s\">Tables • Views/MatViews • Indexes • Jobs</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <ul style=\"margin-top:12px;\">\r\n        <li><strong>Security</strong>: keep write access behind the API; D3 reads public, read‑only data.</li>\r\n        <li><strong>Latency</strong>: cache at the API and CDN; expose <em>ttl</em> policy; support query params for date range.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DIAGRAM 5: Reliability Checklist (No code) -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Checklist</small>\r\n      <h1>“Build once” sustainability checklist</h1>\r\n      <p>No code — just operating rules</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li>✔️ <strong>Endpoint contract</strong>: document field names, units, null policy, sort order.</li>\r\n        <li>✔️ <strong>Include metadata</strong>: <em>last_updated</em>, <em>source</em>, <em>window</em>, <em>version</em>.</li>\r\n        <li>✔️ <strong>Pre‑aggregate</strong>: give D3 chart <em>exactly</em> the granularity it needs.</li>\r\n        <li>✔️ <strong>Refresh strategy</strong>: cron for matviews; webhook on ingest; set CDN/API TTLs.</li>\r\n        <li>✔️ <strong>Backfill safe</strong>: re‑runs shouldn’t break; idempotent loaders; primary keys + constraints.</li>\r\n        <li>✔️ <strong>Observability</strong>: logs, error budgets, alerts on stale data or endpoint errors.</li>\r\n        <li>✔️ <strong>A11y & UX</strong>: fallback text for empty data; show “as of” timestamp; keyboard navigation.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "8c1e316d-9c9e-4fbf-8587-07ceb651eb87"
    },
    {
      "kind": "article",
      "order": 7,
      "title": "D3 Module — Conclusion & Where to Use It",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>D3 Module — Conclusion & Where to Use It</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #ffffff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Grid cards === */\r\n.quick-grid {\r\n  display: grid; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));\r\n  gap: 14px; margin: 12px 0 4px;\r\n}\r\n.quick-grid .box {\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #ffffff; color: #555;\r\n}\r\n.quick-grid .box > div { font-weight: 700; margin-bottom: 6px; color: #000000; }\r\n\r\n/* === Pill roadmap === */\r\n.roadmap-label { margin: 16px 0 6px; font-weight: 700; color: #000000; }\r\n.roadmap { display: flex; flex-wrap: wrap; gap: 8px; }\r\n.roadmap span {\r\n  padding: 6px 10px; border: 1px solid #A3A3A3; border-radius: 999px;\r\n  background: #BDBDBD; color: #000000; font-size: 14px;\r\n}\r\n\r\n/* === Inline code chip (uses #BDBDBD as requested) === */\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- CONCLUSION SUMMARY -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Conclusion</small>\r\n      <h1>D3.js: Build Once, Tell Better Stories with Your Data</h1>\r\n      <p>From statistics‑first thinking to sustainable, auto‑updating visuals</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        In this module you learned to treat visualization as a <strong>pipeline</strong>, not a one‑off graphic. You:\r\n      </p>\r\n      <ul>\r\n        <li>Applied <strong>robust statistics</strong> (percentiles, rolling means, baseline comparisons) to make honest scales and color domains.</li>\r\n        <li>Built <strong>calendar heatmaps</strong> in multiple statistical “views” to answer different business questions from the same data.</li>\r\n        <li>Separated concerns: <strong>SQL → API/feed → D3</strong>, so charts are compiled once and <em>update themselves</em> as new data arrives.</li>\r\n      </ul>\r\n      <p>\r\n        The result is a sustainable system: D3 handles <em>custom, high‑fidelity visuals</em>, while your data backend (SQL/ETL) keeps feeding the latest truth.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHAT DATA CAN D3 VISUALIZE -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Scope</small>\r\n      <h1>What kinds of data can D3 visualize?</h1>\r\n      <p>Almost anything you can put into arrays, objects, and coordinates</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <div>Time Series</div>\r\n          Regular or irregular timestamps: sales, sensor readings, web traffic, energy use. Patterns: line/area charts, multi‑series, rolling trends, calendar grids, anomaly markers.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Categorical & Numerical</div>\r\n          Counts, rates, distributions, ranks. Patterns: bars, stacked bars, dot plots, box/violin, ridgelines, beeswarms.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Geospatial</div>\r\n          Points, polygons, raster tiles. Patterns: choropleths, dot/heat maps, hex bins, flow maps, tiled/zoomable maps.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Networks & Hierarchies</div>\r\n          Entities + relationships, taxonomies, org charts. Patterns: node‑link, chord diagrams, sankey, sunburst, treemap, edge bundling.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Text‑Derived</div>\r\n          Token counts, topics, sentiment timelines. Patterns: annotated timelines, matrices, clustered scatter, word‑related layouts (when meaningful).\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Event/Log Data</div>\r\n          Clickstreams, operations, incidents. Patterns: timelines, swimlanes, calendar heatmaps, small‑multiples.\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:10px;\">\r\n        D3 is a <em>low‑level visualization toolkit</em>: it binds data to DOM/SVG/Canvas and gives you fine control over scales, projections, transitions, and interaction.\r\n        That flexibility makes it ideal for custom visuals and storytelling beyond template dashboards.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHO BENEFITS / FIELDS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Fit</small>\r\n      <h1>Who is D3 especially good for?</h1>\r\n      <p>Teams that need custom visuals, high control, and narrative interaction</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <div>Businesses</div>\r\n          <ul>\r\n            <li><strong>Finance & Fintech:</strong> time‑series, risk, intraday views, order flow.</li>\r\n            <li><strong>Retail & E‑commerce:</strong> funnels, cohorts, geospatial demand, product mix.</li>\r\n            <li><strong>SaaS & Growth:</strong> activation, retention, A/B results, feature usage maps.</li>\r\n            <li><strong>Operations & Supply Chain:</strong> SLAs, logistics flows, capacity calendars.</li>\r\n            <li><strong>Energy & Utilities:</strong> load curves, outages, geospatial assets, ATES/UTES performance.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Expertise & Roles</div>\r\n          <ul>\r\n            <li><strong>Data Scientists / Analysts:</strong> bespoke analyses with statistical nuance.</li>\r\n            <li><strong>Data/BI Engineers:</strong> custom front‑ends on top of lakes/warehouses.</li>\r\n            <li><strong>Designers / Data Journalists:</strong> narrative, scrollytelling, explainers.</li>\r\n            <li><strong>GIS / Earth Sciences:</strong> maps, cross‑sections, geology/groundwater models.</li>\r\n            <li><strong>Research & Academia:</strong> experimental results, interactive figures.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Fields & Domains</div>\r\n          <ul>\r\n            <li><strong>Healthcare:</strong> outcomes over time, patient flows (de‑identified).</li>\r\n            <li><strong>Manufacturing:</strong> SPC charts, downtime analysis, sensor telemetry.</li>\r\n            <li><strong>Climate & Environment:</strong> weather, hydrology, emissions geospatial layers.</li>\r\n            <li><strong>Education:</strong> learning analytics, curriculum maps, cohort trends.</li>\r\n            <li><strong>Public Policy:</strong> open data portals, regional indicators, demographics.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:10px;\">\r\n        If you only need standard charts fast, consider higher‑level libraries (Altair/Vega‑Lite, Plotly, ECharts). When you need\r\n        <strong>pixel‑level control, bespoke interaction, or narrative polish</strong>, D3 is the right tool.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- CHOOSING PATTERNS / WHEN TO USE WHAT -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Patterns</small>\r\n      <h1>Choose the right pattern for the question</h1>\r\n      <p>Match data type → visual grammar → statistical treatment</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <div>Time series → Trends / Anomalies</div>\r\n          Line/area + <code class=\"inline\">rolling mean</code> + <code class=\"inline\">z‑outliers</code>; calendar heatmaps for daily rhythm; small‑multiples for comparisons.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Distribution → Range / Skew</div>\r\n          Histograms (IQR‑based bins), box/violin; clip axes to <code class=\"inline\">[P5,P95]</code> to avoid outlier bias.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Part‑to‑whole → Composition</div>\r\n          Stacked bars, treemap/sunburst; annotate totals and % share; avoid 3D or exploded pies.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Geospatial → Where & density</div>\r\n          Choropleth for rates, dot/hex bins for counts, flows for movement; always include a scale/legend.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Relationships → Structure</div>\r\n          Node‑link, sankey, chord, edge bundling; tooltips and highlighting to reduce clutter.\r\n        </div>\r\n        <div class=\"box\">\r\n          <div>Text → Evolution</div>\r\n          Topic timelines, matrices, concept networks; use <code class=\"inline\">percentiles</code> for color and avoid raw count skew.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- NEXT STEPS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Next</small>\r\n      <h1>Where to go from here</h1>\r\n      <p>Turn one dataset into a living, auto‑updating story</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"roadmap-label\">Action plan</div>\r\n      <div class=\"roadmap\">\r\n        <span>Pick a KPI or dataset</span>\r\n        <span>Define the question</span>\r\n        <span>Choose a statistical view</span>\r\n        <span>Expose a stable JSON/CSV feed</span>\r\n        <span>Build one D3 chart</span>\r\n        <span>Deploy static + set TTL</span>\r\n        <span>Instrument & annotate “as of”</span>\r\n      </div>\r\n      <p style=\"margin-top:10px;\">\r\n        Use D3 when the <strong>story matters</strong> and off‑the‑shelf visuals aren’t enough. Keep your chart code stable; keep your data fresh.\r\n        That’s how you get visuals that earn trust and drive decisions.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "afd8ace8-711e-4375-847d-25d2c2e8787c"
    }
  ]
}