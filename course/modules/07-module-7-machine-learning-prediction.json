{
  "order": 7,
  "title": "Module 7: Machine Learning Prediction",
  "lessons": [
    {
      "kind": "article",
      "order": 1,
      "title": "Machine Learning Prediction — Supervised & Unsupervised",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Unsupervised ML — Stable Clustering App (K‑Means, Agglo, DBSCAN, GMM)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n*{box-sizing:border-box;word-wrap:break-word;overflow-wrap:break-word}\r\nbody{font:16px/1.55 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#555;margin:0;background:#fff}\r\nimg{max-width:100%;height:auto;display:block;border-radius:10px}\r\n\r\n/* === Page wrap === */\r\n.wrap{max-width:1080px;margin:0 auto;padding:18px}\r\n\r\n/* === Card container === */\r\n.section-card{\r\n  border:1px solid #EBEBEB;border-radius:14px;overflow:hidden;\r\n  box-shadow:0 1px 2px rgba(0,0,0,.04);margin-bottom:24px;background:#ffffff\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner{\r\n  background:linear-gradient(120deg,#555555,#000000);\r\n  color:#FFFFFF;padding:18px 20px\r\n}\r\n.section-card .banner small{\r\n  font-size:12px;letter-spacing:.08em;opacity:.9;text-transform:uppercase;color:#FFFFFF\r\n}\r\n.section-card .banner h1{\r\n  margin:6px 0 4px;font-size:26px;line-height:1.2;color:#FFFFFF\r\n}\r\n.section-card .banner p{margin:0;opacity:.95;color:#FFFFFF}\r\n\r\n/* === Body === */\r\n.section-card .body{padding:20px}\r\n.section-card p,.section-card li{font-size:16px;margin-top:0;color:#555}\r\n\r\n/* === Inline chips & pills (use #BDBDBD as requested) === */\r\n.pill{display:inline-block;padding:4px 10px;border:1px solid #A3A3A3;border-radius:999px;background:#BDBDBD;color:#000;font-size:12px;font-weight:700}\r\ncode.inline{background:#BDBDBD;padding:2px 6px;border-radius:4px}\r\n\r\n/* === Side-by-side grids === */\r\n.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:14px}\r\n.box{border:1px solid #EBEBEB;border-radius:10px;background:#fff;padding:14px}\r\n.box h3{margin:0 0 8px;color:#000;font-size:18px}\r\n\r\n/* === Code blocks === */\r\npre{margin:0}\r\npre code{\r\n  display:block;white-space:pre;overflow:auto;padding:14px;border-radius:10px;\r\n  border:1px solid #EBEBEB;background:#fafafa;color:#222;font-family:ui-monospace,SFMono-Regular,Menlo,Consolas,monospace;font-size:14px\r\n}\r\n\r\n/* === Figure / caption === */\r\n.figure{margin-top:10px}\r\n.figcap{font-size:13px;color:#777;margin-top:6px}\r\n\r\n/* === Footer === */\r\n.footer-note{font-size:13px;color:#777;text-align:center;margin:30px 0 10px}\r\na{color:#000;text-decoration:underline}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Machine Learning Prediction</small>\r\n      <h1>Unsupervised Clustering — Bullet‑Proof Streamlit App</h1>\r\n      <p>Explore segments & anomalies with <strong>K‑Means</strong>, <strong>Agglomerative</strong>, <strong>DBSCAN</strong>, and <strong>Gaussian Mixture</strong> — built to avoid crashes and keep your session alive.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        <span class=\"pill\">No labels required</span> Unsupervised learning discovers structure in your data when you don’t have a target column.\r\n        Typical outcomes: <em>customer segments</em>, <em>device cohorts</em>, <em>behavior patterns</em>, and <em>anomaly candidates</em>.\r\n      </p>\r\n      <div class=\"grid\" style=\"margin-top:8px\">\r\n        <div class=\"box\">\r\n          <h3>Algorithms (when to use)</h3>\r\n          <ul>\r\n            <li><strong>K‑Means</strong> — compact, spherical clusters; fast; requires <code class=\"inline\">k</code>.</li>\r\n            <li><strong>Agglomerative</strong> — hierarchical grouping; different <em>linkage</em> styles.</li>\r\n            <li><strong>DBSCAN</strong> — arbitrary shapes; flags noise (<code class=\"inline\">label = -1</code>); no need to set <code class=\"inline\">k</code>.</li>\r\n            <li><strong>Gaussian Mixture</strong> — soft clustering (probabilities); ellipsoidal shapes.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Quality metrics</h3>\r\n          <ul>\r\n            <li><strong>Silhouette</strong> (↑ better separation)</li>\r\n            <li><strong>Davies–Bouldin</strong> (↓ tighter clusters)</li>\r\n            <li><strong>Calinski–Harabasz</strong> (↑ well‑defined clusters)</li>\r\n          </ul>\r\n          <p style=\"margin-top:6px\">The app computes metrics safely and skips invalid cases (e.g., single cluster or all noise).</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Dataset</h3>\r\n          <p>Use the sample bank operations dataset (daily visits + features):</p>\r\n          <p><a href=\"https://github.com/AIforimpact22/learningexamples/blob/main/bank_visits_complete_2024.csv\" target=\"_blank\" rel=\"noopener\">bank_visits_complete_2024.csv</a></p>\r\n          <p>Pick multiple columns (numeric/categorical). If you include a <code class=\"inline\">date</code> column, the app converts it to an ordinal feature automatically.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- OUTCOME SNAPSHOT -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Outcome</small>\r\n      <h1>Example Clustering Result (PCA scatter)</h1>\r\n      <p>Colored points = discovered clusters; use this to sanity‑check separation</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"figure\">\r\n        <a href=\"https://i.imgur.com/8lUwQhO.png\" target=\"_blank\" rel=\"noopener\">\r\n          <img src=\"https://i.imgur.com/8lUwQhO.png\" alt=\"Example clustering outcome: PCA scatter colored by cluster\" />\r\n        </a>\r\n        <div class=\"figcap\">\r\n          A quick visual inspection helps validate cluster separation and spot outliers/noise before you act on segments.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- THE APP: CODE -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Code</small>\r\n      <h1>1) Save as <code class=\"inline\">app.py</code></h1>\r\n      <p>Stable, defensive Streamlit app (handles edge cases & keeps UI responsive)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre><code># app.py\r\nimport os\r\nimport time\r\nimport numpy as np\r\nimport pandas as pd\r\nimport streamlit as st\r\n\r\n# Try Plotly; fall back to Streamlit's built-in chart if not available\r\ntry:\r\n    import plotly.express as px\r\n    HAS_PLOTLY = True\r\nexcept Exception:\r\n    HAS_PLOTLY = False\r\n\r\nfrom typing import List, Tuple\r\n\r\nfrom sklearn.compose import ColumnTransformer\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler, MinMaxScaler\r\nfrom sklearn.impute import SimpleImputer\r\nfrom sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering\r\nfrom sklearn.mixture import GaussianMixture\r\nfrom sklearn.decomposition import PCA\r\nfrom sklearn.metrics import silhouette_score, davies_bouldin_score, calinski_harabasz_score\r\n\r\nst.set_page_config(page_title=\"Unsupervised Clustering\", layout=\"wide\")\r\nDEFAULT_SAVE_DIR = r\"C:\\Users\\sourc\\OneDrive\\Desktop\\Python\\Erbil Air Polution\"\r\n\r\n# ----------------- Session State (no auto-blank after click) -----------------\r\nif \"run_clicked\" not in st.session_state:\r\n    st.session_state.run_clicked = False\r\nif \"df_cache\" not in st.session_state:\r\n    st.session_state.df_cache = None\r\n\r\n# ------------------------------- Utilities -----------------------------------\r\ndef safe_read_csv(file_or_path) -> pd.DataFrame:\r\n    df = pd.read_csv(file_or_path)\r\n    return df\r\n\r\ndef coerce_selected_features(df: pd.DataFrame, selected: List[str]) -> Tuple[pd.DataFrame, List[str], List[str]]:\r\n    \"\"\"Convert 'date' to ordinal; attempt numeric coercion; split num vs cat.\"\"\"\r\n    df = df.copy()\r\n    sel = selected.copy()\r\n\r\n    if \"date\" in sel and \"date\" in df.columns:\r\n        df[\"date\"] = pd.to_datetime(df[\"date\"], errors=\"coerce\")\r\n        df[\"date_ordinal\"] = df[\"date\"].map(lambda x: x.toordinal() if pd.notnull(x) else np.nan)\r\n        sel = [\"date_ordinal\" if c == \"date\" else c for c in sel]\r\n\r\n    # Try numeric conversion where possible (without breaking true categorical)\r\n    for c in sel:\r\n        if c in df.columns and df[c].dtype == \"object\":\r\n            try:\r\n                sample = df[c].dropna().astype(str).head(50)\r\n                numeric_like = sample.str.match(r\"^-?\\d+(\\.\\d+)?$\").mean() >= 0.7\r\n            except Exception:\r\n                numeric_like = False\r\n            if numeric_like:\r\n                df[c] = pd.to_numeric(df[c], errors=\"coerce\")\r\n\r\n    num_cols = df[sel].select_dtypes(include=[np.number]).columns.tolist()\r\n    cat_cols = [c for c in sel if c not in num_cols]\r\n    return df, num_cols, cat_cols\r\n\r\ndef make_preprocessor(num_cols, cat_cols, impute_strategy=\"median\", scaler=\"StandardScaler\"):\r\n    num_steps = [(\"imputer\", SimpleImputer(strategy=impute_strategy))]\r\n    if scaler == \"StandardScaler\":\r\n        num_steps.append((\"scaler\", StandardScaler()))\r\n    elif scaler == \"MinMaxScaler\":\r\n        num_steps.append((\"scaler\", MinMaxScaler()))\r\n\r\n    num_pipe = Pipeline(steps=num_steps)\r\n    cat_pipe = Pipeline(steps=[\r\n        (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\r\n        (\"onehot\", OneHotEncoder(handle_unknown=\"ignore\"))\r\n    ])\r\n\r\n    pre = ColumnTransformer(\r\n        transformers=[\r\n            (\"num\", num_pipe, num_cols),\r\n            (\"cat\", cat_pipe, cat_cols)\r\n        ],\r\n        remainder=\"drop\",\r\n        sparse_threshold=0.0  # force dense for PCA\r\n    )\r\n    return pre\r\n\r\ndef fit_cluster(X, algo, params, random_state=42):\r\n    if algo == \"KMeans\":\r\n        model = KMeans(n_clusters=int(params[\"n_clusters\"]), n_init=10, random_state=random_state)\r\n        labels = model.fit_predict(X)\r\n    elif algo == \"Agglomerative\":\r\n        n_clusters = int(params[\"n_clusters\"])\r\n        linkage = params[\"linkage\"]\r\n        try:\r\n            model = AgglomerativeClustering(n_clusters=n_clusters, linkage=linkage, metric=\"euclidean\")\r\n        except TypeError:\r\n            model = AgglomerativeClustering(n_clusters=n_clusters, linkage=linkage, affinity=\"euclidean\")\r\n        labels = model.fit_predict(X)\r\n    elif algo == \"DBSCAN\":\r\n        model = DBSCAN(eps=float(params[\"eps\"]), min_samples=int(params[\"min_samples\"]), metric=\"euclidean\")\r\n        labels = model.fit_predict(X)\r\n    elif algo == \"GaussianMixture\":\r\n        model = GaussianMixture(\r\n            n_components=int(params[\"n_components\"]),\r\n            covariance_type=params[\"covariance_type\"],\r\n            random_state=random_state\r\n        )\r\n        model.fit(X)\r\n        labels = model.predict(X)\r\n    else:\r\n        raise ValueError(\"Unknown algorithm\")\r\n    return model, labels\r\n\r\ndef compute_metrics(X, labels, algo_name):\r\n    labels = np.asarray(labels)\r\n    metrics = {}\r\n    uniq = set(labels.tolist())\r\n    if algo_name == \"DBSCAN\":\r\n        core_labels = [l for l in uniq if l != -1]\r\n        n_clusters = len(core_labels)\r\n        metrics[\"n_clusters\"] = n_clusters\r\n        mask = labels != -1\r\n        X_eval = X[mask]\r\n        labels_eval = labels[mask]\r\n    else:\r\n        n_clusters = len(uniq)\r\n        metrics[\"n_clusters\"] = n_clusters\r\n        X_eval, labels_eval = X, labels\r\n\r\n    def safe_metric(func):\r\n        try:\r\n            if n_clusters >= 2 and len(np.unique(labels_eval)) >= 2 and len(labels_eval) >= 10:\r\n                return float(func(X_eval, labels_eval))\r\n            return None\r\n        except Exception:\r\n            return None\r\n\r\n    metrics[\"silhouette\"] = safe_metric(silhouette_score)\r\n    metrics[\"davies_bouldin\"] = safe_metric(davies_bouldin_score)\r\n    metrics[\"calinski_harabasz\"] = safe_metric(calinski_harabasz_score)\r\n    return metrics\r\n\r\ndef pca_embedding(X, dims=2, random_state=42):\r\n    n_features = X.shape[1]\r\n    n_comp = min(dims, n_features if n_features > 0 else 1)\r\n    pca = PCA(n_components=n_comp, random_state=random_state)\r\n    emb = pca.fit_transform(X)\r\n    cols = [\"x\",\"y\"] if n_comp == 2 else [\"x\",\"y\",\"z\"][:n_comp]\r\n    return pd.DataFrame(emb, columns=cols)\r\n\r\ndef cluster_profiles(df: pd.DataFrame, labels, sel_cols, num_cols, cat_cols):\r\n    out = df.copy()\r\n    out[\"cluster\"] = labels\r\n    grp = out.groupby(\"cluster\", dropna=False)\r\n    num_means = grp[num_cols].mean(numeric_only=True).round(3) if num_cols else pd.DataFrame()\r\n\r\n    top_cats = []\r\n    for c in cat_cols:\r\n        try:\r\n            mode_series = grp[c].agg(lambda s: s.mode().iloc[0] if s.dropna().size else np.nan)\r\n            top_cats.append(mode_series.rename(c))\r\n        except Exception:\r\n            pass\r\n    top_cats = pd.concat(top_cats, axis=1) if top_cats else pd.DataFrame()\r\n    sizes = out[\"cluster\"].value_counts(dropna=False).rename_axis(\"cluster\").reset_index(name=\"count\")\r\n    return out, sizes, num_means, top_cats\r\n\r\n# -------------------------------- UI: Load Data --------------------------------\r\nst.title(\"🏦 Unsupervised Clustering (Multiple Columns) — Stable Build\")\r\n\r\nst.sidebar.header(\"1) Load Data\")\r\nuploaded = st.sidebar.file_uploader(\"Upload CSV\", type=[\"csv\"], help=\"Or use the file path below.\")\r\ndefault_path = os.path.join(DEFAULT_SAVE_DIR, \"bank_visits_complete_2024.csv\")\r\npath_text = st.sidebar.text_input(\"CSV file path\", value=default_path)\r\nload_clicked = st.sidebar.button(\"Load\")\r\n\r\ndf = st.session_state.df_cache\r\nload_msg = st.empty()\r\n\r\nif load_clicked or (df is None and os.path.exists(path_text)):\r\n    try:\r\n        if uploaded is not None:\r\n            df = safe_read_csv(uploaded)\r\n        else:\r\n            df = safe_read_csv(path_text)\r\n        st.session_state.df_cache = df\r\n        load_msg.success(f\"Loaded data: {df.shape[0]} rows × {df.shape[1]} columns\")\r\n    except Exception as e:\r\n        load_msg.error(f\"Failed to load CSV: {e}\")\r\n        df = None\r\n\r\nif df is None:\r\n    st.info(\"📄 Upload a CSV or enter a valid file path, then click **Load**.\")\r\nelse:\r\n    st.subheader(\"Preview\")\r\n    st.dataframe(df.head(20), use_container_width=True)\r\n\r\n# ------------------------------ Feature Selection ------------------------------\r\nif df is not None:\r\n    st.sidebar.header(\"2) Select Features\")\r\n    all_cols = df.columns.tolist()\r\n    recommended = [\r\n        \"is_weekend\",\"is_holiday\",\"branch_open_hours\",\"staff_on_duty\",\"is_payday\",\r\n        \"marketing_campaign\",\"promo_strength\",\"atm_outage\",\"temp_c\",\"rain_mm\",\"aqi\",\"dust_event\",\r\n        \"total_visit\",\"teller_visits\",\"atm_visits\",\"service_visits\",\"transactions_total\",\r\n        \"avg_wait_time_min\",\"new_accounts_opened\",\"loan_inquiries\",\"complaints\",\r\n        \"cash_deposits\",\"cash_withdrawals\",\"fx_transactions\"\r\n    ]\r\n    default_sel = [c for c in recommended if c in all_cols] or df.select_dtypes(include=[np.number]).columns.tolist()\r\n    selected = st.sidebar.multiselect(\"Columns to use\", options=all_cols, default=default_sel)\r\n\r\n    st.sidebar.header(\"3) Preprocessing\")\r\n    impute_strategy = st.sidebar.selectbox(\"Numeric imputation\", [\"median\",\"mean\"], index=0)\r\n    scaler_choice = st.sidebar.selectbox(\"Scaling\", [\"StandardScaler\",\"MinMaxScaler\",\"None\"], index=0)\r\n\r\n    st.sidebar.header(\"4) Algorithm\")\r\n    algo = st.sidebar.selectbox(\"Method\", [\"KMeans\",\"Agglomerative\",\"DBSCAN\",\"GaussianMixture\"], index=0)\r\n\r\n    params = {}\r\n    if algo in (\"KMeans\",\"Agglomerative\"):\r\n        params[\"n_clusters\"] = st.sidebar.slider(\"n_clusters\", 2, 20, 5, 1)\r\n        if algo == \"Agglomerative\":\r\n            params[\"linkage\"] = st.sidebar.selectbox(\"linkage\", [\"ward\",\"complete\",\"average\",\"single\"], index=0)\r\n    elif algo == \"DBSCAN\":\r\n        params[\"eps\"] = st.sidebar.slider(\"eps\", 0.1, 10.0, 1.5, 0.1)\r\n        params[\"min_samples\"] = st.sidebar.slider(\"min_samples\", 2, 50, 5, 1)\r\n    elif algo == \"GaussianMixture\":\r\n        params[\"n_components\"] = st.sidebar.slider(\"n_components\", 2, 20, 5, 1)\r\n        params[\"covariance_type\"] = st.sidebar.selectbox(\"covariance_type\", [\"full\",\"diag\",\"tied\",\"spherical\"], index=0)\r\n\r\n    st.sidebar.header(\"5) Run\")\r\n    seed = st.sidebar.number_input(\"Random seed\", min_value=0, value=42, step=1)\r\n    if st.sidebar.button(\"Run Clustering\"):\r\n        st.session_state.run_clicked = True\r\n\r\n    # ------------------------------- Run Block --------------------------------\r\n    if st.session_state.run_clicked:\r\n        if not selected:\r\n            st.error(\"Please select at least one column.\")\r\n        else:\r\n            try:\r\n                with st.spinner(\"Running clustering...\"):\r\n                    df_proc, num_cols, cat_cols = coerce_selected_features(df, selected)\r\n                    pre = make_preprocessor(num_cols, cat_cols, impute_strategy=impute_strategy, scaler=scaler_choice if scaler_choice!=\"None\" else None)\r\n                    X = pre.fit_transform(df_proc[num_cols + cat_cols])\r\n                    model, labels = fit_cluster(X, algo, params, random_state=int(seed))\r\n                    metrics = compute_metrics(X, labels, algo)\r\n                    dims = 3 if HAS_PLOTLY else 2\r\n                    try:\r\n                        emb_df = pca_embedding(X, dims=dims, random_state=int(seed))\r\n                    except Exception:\r\n                        emb_df = pca_embedding(X, dims=2, random_state=int(seed))\r\n                    df_labeled, sizes, num_means, top_cats = cluster_profiles(df_proc, labels, selected, num_cols, cat_cols)\r\n\r\n                m1,m2,m3,m4 = st.columns(4)\r\n                m1.metric(\"Clusters\", metrics.get(\"n_clusters\", None))\r\n                m2.metric(\"Silhouette\", f\"{metrics['silhouette']:.3f}\" if metrics.get(\"silhouette\") is not None else \"—\")\r\n                m3.metric(\"Davies–Bouldin ↓\", f\"{metrics['davies_bouldin']:.3f}\" if metrics.get(\"davies_bouldin\") is not None else \"—\")\r\n                m4.metric(\"Calinski–Harabasz ↑\", f\"{metrics['calinski_harabasz']:.1f}\" if metrics.get(\"calinski_harabasz\") is not None else \"—\")\r\n\r\n                st.subheader(\"Cluster Sizes\")\r\n                st.dataframe(sizes, use_container_width=True)\r\n\r\n                st.subheader(\"Visualization (PCA)\")\r\n                plot_df = emb_df.copy()\r\n                plot_df[\"cluster\"] = labels.astype(str)\r\n                if HAS_PLOTLY and plot_df.shape[1]==3:\r\n                    fig = px.scatter_3d(plot_df, x=\"x\", y=\"y\", z=\"z\", color=\"cluster\", opacity=0.85, title=f\"{algo} Clusters (PCA 3D)\")\r\n                    st.plotly_chart(fig, use_container_width=True)\r\n                elif HAS_PLOTLY:\r\n                    fig = px.scatter(plot_df, x=\"x\", y=\"y\", color=\"cluster\", opacity=0.9, title=f\"{algo} Clusters (PCA 2D)\")\r\n                    st.plotly_chart(fig, use_container_width=True)\r\n                else:\r\n                    st.caption(\"Plotly not found. Showing basic 2D chart.\")\r\n                    st.scatter_chart(plot_df, x=\"x\", y=\"y\", color=\"cluster\")\r\n\r\n                st.subheader(\"Cluster Profiles\")\r\n                if not num_means.empty:\r\n                    st.write(\"**Numeric means by cluster**\")\r\n                    st.dataframe(num_means, use_container_width=True)\r\n                if not top_cats.empty:\r\n                    st.write(\"**Top categorical values by cluster**\")\r\n                    st.dataframe(top_cats, use_container_width=True)\r\n\r\n                st.subheader(\"Labeled Data (first 200 rows)\")\r\n                st.dataframe(df_labeled.assign(cluster=labels).head(200), use_container_width=True)\r\n\r\n                st.subheader(\"Export\")\r\n                os.makedirs(DEFAULT_SAVE_DIR, exist_ok=True)\r\n                default_out = os.path.join(DEFAULT_SAVE_DIR, f\"clustered_{algo}_{int(time.time())}.csv\")\r\n                save_path = st.text_input(\"Save path\", value=default_out, key=\"savepath_input\")\r\n                col_a, col_b = st.columns([0.4,0.6])\r\n                with col_a:\r\n                    if st.button(\"Save CSV to Disk\"):\r\n                        try:\r\n                            df_labeled.assign(cluster=labels).to_csv(save_path, index=False, encoding=\"utf-8\")\r\n                            st.success(f\"Saved: {save_path}\")\r\n                        except Exception as e:\r\n                            st.error(f\"Save failed: {e}\")\r\n                with col_b:\r\n                    st.download_button(\r\n                        \"Download labeled CSV\",\r\n                        data=df_labeled.assign(cluster=labels).to_csv(index=False).encode(\"utf-8\"),\r\n                        file_name=os.path.basename(save_path),\r\n                        mime=\"text/csv\"\r\n                    )\r\n\r\n            except Exception as e:\r\n                st.error(f\"Clustering failed: {e}\")\r\n\r\n    if st.sidebar.button(\"Reset\"):\r\n        st.session_state.run_clicked = False\r\n        st.experimental_rerun()\r\n</code></pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- REQUIREMENTS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Deps</small>\r\n      <h1>2) <code class=\"inline\">requirements.txt</code></h1>\r\n      <p>Plotly is optional (app will fall back to basic charts)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre><code>streamlit\r\npandas\r\nnumpy\r\nscikit-learn\r\n# plotly   <-- optional (uncomment if you want Plotly charts)\r\n</code></pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- HOW TO RUN -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Run</small>\r\n      <h1>3) Launch the app</h1>\r\n      <p>Windows / PowerShell example</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre><code># In the folder with app.py and requirements.txt\r\npython -m venv .venv\r\n.\\.venv\\Scripts\\Activate.ps1\r\npip install -r requirements.txt\r\n\r\n# (Optional) For nicer charts\r\npip install plotly\r\n\r\n# Launch\r\nstreamlit run app.py\r\n</code></pre>\r\n      <p style=\"margin-top:10px\">\r\n        The app defaults to saving labeled files in:\r\n        <code class=\"inline\">C:\\Users\\sourc\\OneDrive\\Desktop\\Python\\Erbil Air Polution</code>.\r\n        If you’re on macOS/Linux or Codespaces, change <code class=\"inline\">DEFAULT_SAVE_DIR</code> near the top of <code class=\"inline\">app.py</code>.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHY THIS IS STABLE -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Reliability</small>\r\n      <h1>Why this build doesn’t “kick you out”</h1>\r\n      <p>Defensive patterns throughout the pipeline</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li>No <code class=\"inline\">st.stop()</code> — UI stays mounted after Run.</li>\r\n        <li>All heavy steps are wrapped in <code class=\"inline\">try/except</code> with clear messages.</li>\r\n        <li>Automatic handling of <em>date</em> → ordinal, numeric coercion for “number‑like” strings, and robust missing‑value imputation.</li>\r\n        <li><strong>ColumnTransformer</strong> with One‑Hot + scaling returns dense matrices (PCA‑safe across versions).</li>\r\n        <li>Metrics computed only when valid (e.g., DBSCAN’s noise points excluded).</li>\r\n        <li>Optional Plotly; falls back to Streamlit chart if Plotly isn’t installed.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DATA EXAMPLES -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Data</small>\r\n      <h1>What to feed the model?</h1>\r\n      <p>Examples that cluster well</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Bank operations (daily)</h3>\r\n          <p>Visits, transactions, staffing, weather, promo flags, holidays.</p>\r\n          <p>Find traffic patterns, promotional lift cohorts, anomaly days.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Sensors & IoT</h3>\r\n          <p>Pressure/temperature series, derived rates & rolling stats.</p>\r\n          <p>Detect device cohorts and early fault signatures.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Customer usage</h3>\r\n          <p>Clicks, session lengths, features used, NPS, support contact.</p>\r\n          <p>Define product personas and tailor onboarding.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Text embeddings</h3>\r\n          <p>Ticket titles or reviews encoded to vectors.</p>\r\n          <p>Find topic clusters and route intelligently.</p>\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:8px\">\r\n        Start with the provided dataset:\r\n        <a href=\"https://github.com/AIforimpact22/learningexamples/blob/main/bank_visits_complete_2024.csv\" target=\"_blank\" rel=\"noopener\">bank_visits_complete_2024.csv</a>.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">© <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span></div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now=new Date();\r\n  document.getElementById('y').textContent=now.getFullYear();\r\n  document.getElementById('d').textContent=now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "fe27719c-c928-493f-a956-cbe2a1bcd2c6"
    },
    {
      "kind": "article",
      "order": 2,
      "title": "Unsupervised ML",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Unsupervised ML — Stable Clustering App (K‑Means, Agglo, DBSCAN, GMM)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n*{box-sizing:border-box;word-wrap:break-word;overflow-wrap:break-word}\r\nbody{font:16px/1.55 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#555;margin:0;background:#fff}\r\nimg{max-width:100%;height:auto;display:block;border-radius:10px}\r\n\r\n/* === Page wrap === */\r\n.wrap{max-width:1080px;margin:0 auto;padding:18px}\r\n\r\n/* === Card container === */\r\n.section-card{\r\n  border:1px solid #EBEBEB;border-radius:14px;overflow:hidden;\r\n  box-shadow:0 1px 2px rgba(0,0,0,.04);margin-bottom:24px;background:#ffffff\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner{\r\n  background:linear-gradient(120deg,#555555,#000000);\r\n  color:#FFFFFF;padding:18px 20px\r\n}\r\n.section-card .banner small{\r\n  font-size:12px;letter-spacing:.08em;opacity:.9;text-transform:uppercase;color:#FFFFFF\r\n}\r\n.section-card .banner h1{\r\n  margin:6px 0 4px;font-size:26px;line-height:1.2;color:#FFFFFF\r\n}\r\n.section-card .banner p{margin:0;opacity:.95;color:#FFFFFF}\r\n\r\n/* === Body === */\r\n.section-card .body{padding:20px}\r\n.section-card p,.section-card li{font-size:16px;margin-top:0;color:#555}\r\n\r\n/* === Inline chips & pills (use #BDBDBD as requested) === */\r\n.pill{display:inline-block;padding:4px 10px;border:1px solid #A3A3A3;border-radius:999px;background:#BDBDBD;color:#000;font-size:12px;font-weight:700}\r\ncode.inline{background:#BDBDBD;padding:2px 6px;border-radius:4px}\r\n\r\n/* === Side-by-side grids === */\r\n.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:14px}\r\n.box{border:1px solid #EBEBEB;border-radius:10px;background:#fff;padding:14px}\r\n.box h3{margin:0 0 8px;color:#000;font-size:18px}\r\n\r\n/* === Code blocks === */\r\npre{margin:0}\r\npre code{\r\n  display:block;white-space:pre;overflow:auto;padding:14px;border-radius:10px;\r\n  border:1px solid #EBEBEB;background:#fafafa;color:#222;font-family:ui-monospace,SFMono-Regular,Menlo,Consolas,monospace;font-size:14px\r\n}\r\n\r\n/* === Figure / caption === */\r\n.figure{margin-top:10px}\r\n.figcap{font-size:13px;color:#777;margin-top:6px}\r\n\r\n/* === Footer === */\r\n.footer-note{font-size:13px;color:#777;text-align:center;margin:30px 0 10px}\r\na{color:#000;text-decoration:underline}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Machine Learning Prediction</small>\r\n      <h1>Unsupervised Clustering — Bullet‑Proof Streamlit App</h1>\r\n      <p>Explore segments & anomalies with <strong>K‑Means</strong>, <strong>Agglomerative</strong>, <strong>DBSCAN</strong>, and <strong>Gaussian Mixture</strong> — built to avoid crashes and keep your session alive.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        <span class=\"pill\">No labels required</span> Unsupervised learning discovers structure in your data when you don’t have a target column.\r\n        Typical outcomes: <em>customer segments</em>, <em>device cohorts</em>, <em>behavior patterns</em>, and <em>anomaly candidates</em>.\r\n      </p>\r\n      <div class=\"grid\" style=\"margin-top:8px\">\r\n        <div class=\"box\">\r\n          <h3>Algorithms (when to use)</h3>\r\n          <ul>\r\n            <li><strong>K‑Means</strong> — compact, spherical clusters; fast; requires <code class=\"inline\">k</code>.</li>\r\n            <li><strong>Agglomerative</strong> — hierarchical grouping; different <em>linkage</em> styles.</li>\r\n            <li><strong>DBSCAN</strong> — arbitrary shapes; flags noise (<code class=\"inline\">label = -1</code>); no need to set <code class=\"inline\">k</code>.</li>\r\n            <li><strong>Gaussian Mixture</strong> — soft clustering (probabilities); ellipsoidal shapes.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Quality metrics</h3>\r\n          <ul>\r\n            <li><strong>Silhouette</strong> (↑ better separation)</li>\r\n            <li><strong>Davies–Bouldin</strong> (↓ tighter clusters)</li>\r\n            <li><strong>Calinski–Harabasz</strong> (↑ well‑defined clusters)</li>\r\n          </ul>\r\n          <p style=\"margin-top:6px\">The app computes metrics safely and skips invalid cases (e.g., single cluster or all noise).</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Dataset</h3>\r\n          <p>Use the sample bank operations dataset (daily visits + features):</p>\r\n          <p><a href=\"https://github.com/AIforimpact22/learningexamples/blob/main/bank_visits_complete_2024.csv\" target=\"_blank\" rel=\"noopener\">bank_visits_complete_2024.csv</a></p>\r\n          <p>Pick multiple columns (numeric/categorical). If you include a <code class=\"inline\">date</code> column, the app converts it to an ordinal feature automatically.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- OUTCOME SNAPSHOT -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Outcome</small>\r\n      <h1>Example Clustering Result (PCA scatter)</h1>\r\n      <p>Colored points = discovered clusters; use this to sanity‑check separation</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"figure\">\r\n        <a href=\"https://i.imgur.com/8lUwQhO.png\" target=\"_blank\" rel=\"noopener\">\r\n          <img src=\"https://i.imgur.com/8lUwQhO.png\" alt=\"Example clustering outcome: PCA scatter colored by cluster\" />\r\n        </a>\r\n        <div class=\"figcap\">\r\n          A quick visual inspection helps validate cluster separation and spot outliers/noise before you act on segments.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- THE APP: CODE -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Code</small>\r\n      <h1>1) Save as <code class=\"inline\">app.py</code></h1>\r\n      <p>Stable, defensive Streamlit app (handles edge cases & keeps UI responsive)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre><code># app.py\r\nimport os\r\nimport time\r\nimport numpy as np\r\nimport pandas as pd\r\nimport streamlit as st\r\n\r\n# Try Plotly; fall back to Streamlit's built-in chart if not available\r\ntry:\r\n    import plotly.express as px\r\n    HAS_PLOTLY = True\r\nexcept Exception:\r\n    HAS_PLOTLY = False\r\n\r\nfrom typing import List, Tuple\r\n\r\nfrom sklearn.compose import ColumnTransformer\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler, MinMaxScaler\r\nfrom sklearn.impute import SimpleImputer\r\nfrom sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering\r\nfrom sklearn.mixture import GaussianMixture\r\nfrom sklearn.decomposition import PCA\r\nfrom sklearn.metrics import silhouette_score, davies_bouldin_score, calinski_harabasz_score\r\n\r\nst.set_page_config(page_title=\"Unsupervised Clustering\", layout=\"wide\")\r\nDEFAULT_SAVE_DIR = r\"C:\\Users\\sourc\\OneDrive\\Desktop\\Python\\Erbil Air Polution\"\r\n\r\n# ----------------- Session State (no auto-blank after click) -----------------\r\nif \"run_clicked\" not in st.session_state:\r\n    st.session_state.run_clicked = False\r\nif \"df_cache\" not in st.session_state:\r\n    st.session_state.df_cache = None\r\n\r\n# ------------------------------- Utilities -----------------------------------\r\ndef safe_read_csv(file_or_path) -> pd.DataFrame:\r\n    df = pd.read_csv(file_or_path)\r\n    return df\r\n\r\ndef coerce_selected_features(df: pd.DataFrame, selected: List[str]) -> Tuple[pd.DataFrame, List[str], List[str]]:\r\n    \"\"\"Convert 'date' to ordinal; attempt numeric coercion; split num vs cat.\"\"\"\r\n    df = df.copy()\r\n    sel = selected.copy()\r\n\r\n    if \"date\" in sel and \"date\" in df.columns:\r\n        df[\"date\"] = pd.to_datetime(df[\"date\"], errors=\"coerce\")\r\n        df[\"date_ordinal\"] = df[\"date\"].map(lambda x: x.toordinal() if pd.notnull(x) else np.nan)\r\n        sel = [\"date_ordinal\" if c == \"date\" else c for c in sel]\r\n\r\n    # Try numeric conversion where possible (without breaking true categorical)\r\n    for c in sel:\r\n        if c in df.columns and df[c].dtype == \"object\":\r\n            try:\r\n                sample = df[c].dropna().astype(str).head(50)\r\n                numeric_like = sample.str.match(r\"^-?\\d+(\\.\\d+)?$\").mean() >= 0.7\r\n            except Exception:\r\n                numeric_like = False\r\n            if numeric_like:\r\n                df[c] = pd.to_numeric(df[c], errors=\"coerce\")\r\n\r\n    num_cols = df[sel].select_dtypes(include=[np.number]).columns.tolist()\r\n    cat_cols = [c for c in sel if c not in num_cols]\r\n    return df, num_cols, cat_cols\r\n\r\ndef make_preprocessor(num_cols, cat_cols, impute_strategy=\"median\", scaler=\"StandardScaler\"):\r\n    num_steps = [(\"imputer\", SimpleImputer(strategy=impute_strategy))]\r\n    if scaler == \"StandardScaler\":\r\n        num_steps.append((\"scaler\", StandardScaler()))\r\n    elif scaler == \"MinMaxScaler\":\r\n        num_steps.append((\"scaler\", MinMaxScaler()))\r\n\r\n    num_pipe = Pipeline(steps=num_steps)\r\n    cat_pipe = Pipeline(steps=[\r\n        (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\r\n        (\"onehot\", OneHotEncoder(handle_unknown=\"ignore\"))\r\n    ])\r\n\r\n    pre = ColumnTransformer(\r\n        transformers=[\r\n            (\"num\", num_pipe, num_cols),\r\n            (\"cat\", cat_pipe, cat_cols)\r\n        ],\r\n        remainder=\"drop\",\r\n        sparse_threshold=0.0  # force dense for PCA\r\n    )\r\n    return pre\r\n\r\ndef fit_cluster(X, algo, params, random_state=42):\r\n    if algo == \"KMeans\":\r\n        model = KMeans(n_clusters=int(params[\"n_clusters\"]), n_init=10, random_state=random_state)\r\n        labels = model.fit_predict(X)\r\n    elif algo == \"Agglomerative\":\r\n        n_clusters = int(params[\"n_clusters\"])\r\n        linkage = params[\"linkage\"]\r\n        try:\r\n            model = AgglomerativeClustering(n_clusters=n_clusters, linkage=linkage, metric=\"euclidean\")\r\n        except TypeError:\r\n            model = AgglomerativeClustering(n_clusters=n_clusters, linkage=linkage, affinity=\"euclidean\")\r\n        labels = model.fit_predict(X)\r\n    elif algo == \"DBSCAN\":\r\n        model = DBSCAN(eps=float(params[\"eps\"]), min_samples=int(params[\"min_samples\"]), metric=\"euclidean\")\r\n        labels = model.fit_predict(X)\r\n    elif algo == \"GaussianMixture\":\r\n        model = GaussianMixture(\r\n            n_components=int(params[\"n_components\"]),\r\n            covariance_type=params[\"covariance_type\"],\r\n            random_state=random_state\r\n        )\r\n        model.fit(X)\r\n        labels = model.predict(X)\r\n    else:\r\n        raise ValueError(\"Unknown algorithm\")\r\n    return model, labels\r\n\r\ndef compute_metrics(X, labels, algo_name):\r\n    labels = np.asarray(labels)\r\n    metrics = {}\r\n    uniq = set(labels.tolist())\r\n    if algo_name == \"DBSCAN\":\r\n        core_labels = [l for l in uniq if l != -1]\r\n        n_clusters = len(core_labels)\r\n        metrics[\"n_clusters\"] = n_clusters\r\n        mask = labels != -1\r\n        X_eval = X[mask]\r\n        labels_eval = labels[mask]\r\n    else:\r\n        n_clusters = len(uniq)\r\n        metrics[\"n_clusters\"] = n_clusters\r\n        X_eval, labels_eval = X, labels\r\n\r\n    def safe_metric(func):\r\n        try:\r\n            if n_clusters >= 2 and len(np.unique(labels_eval)) >= 2 and len(labels_eval) >= 10:\r\n                return float(func(X_eval, labels_eval))\r\n            return None\r\n        except Exception:\r\n            return None\r\n\r\n    metrics[\"silhouette\"] = safe_metric(silhouette_score)\r\n    metrics[\"davies_bouldin\"] = safe_metric(davies_bouldin_score)\r\n    metrics[\"calinski_harabasz\"] = safe_metric(calinski_harabasz_score)\r\n    return metrics\r\n\r\ndef pca_embedding(X, dims=2, random_state=42):\r\n    n_features = X.shape[1]\r\n    n_comp = min(dims, n_features if n_features > 0 else 1)\r\n    pca = PCA(n_components=n_comp, random_state=random_state)\r\n    emb = pca.fit_transform(X)\r\n    cols = [\"x\",\"y\"] if n_comp == 2 else [\"x\",\"y\",\"z\"][:n_comp]\r\n    return pd.DataFrame(emb, columns=cols)\r\n\r\ndef cluster_profiles(df: pd.DataFrame, labels, sel_cols, num_cols, cat_cols):\r\n    out = df.copy()\r\n    out[\"cluster\"] = labels\r\n    grp = out.groupby(\"cluster\", dropna=False)\r\n    num_means = grp[num_cols].mean(numeric_only=True).round(3) if num_cols else pd.DataFrame()\r\n\r\n    top_cats = []\r\n    for c in cat_cols:\r\n        try:\r\n            mode_series = grp[c].agg(lambda s: s.mode().iloc[0] if s.dropna().size else np.nan)\r\n            top_cats.append(mode_series.rename(c))\r\n        except Exception:\r\n            pass\r\n    top_cats = pd.concat(top_cats, axis=1) if top_cats else pd.DataFrame()\r\n    sizes = out[\"cluster\"].value_counts(dropna=False).rename_axis(\"cluster\").reset_index(name=\"count\")\r\n    return out, sizes, num_means, top_cats\r\n\r\n# -------------------------------- UI: Load Data --------------------------------\r\nst.title(\"🏦 Unsupervised Clustering (Multiple Columns) — Stable Build\")\r\n\r\nst.sidebar.header(\"1) Load Data\")\r\nuploaded = st.sidebar.file_uploader(\"Upload CSV\", type=[\"csv\"], help=\"Or use the file path below.\")\r\ndefault_path = os.path.join(DEFAULT_SAVE_DIR, \"bank_visits_complete_2024.csv\")\r\npath_text = st.sidebar.text_input(\"CSV file path\", value=default_path)\r\nload_clicked = st.sidebar.button(\"Load\")\r\n\r\ndf = st.session_state.df_cache\r\nload_msg = st.empty()\r\n\r\nif load_clicked or (df is None and os.path.exists(path_text)):\r\n    try:\r\n        if uploaded is not None:\r\n            df = safe_read_csv(uploaded)\r\n        else:\r\n            df = safe_read_csv(path_text)\r\n        st.session_state.df_cache = df\r\n        load_msg.success(f\"Loaded data: {df.shape[0]} rows × {df.shape[1]} columns\")\r\n    except Exception as e:\r\n        load_msg.error(f\"Failed to load CSV: {e}\")\r\n        df = None\r\n\r\nif df is None:\r\n    st.info(\"📄 Upload a CSV or enter a valid file path, then click **Load**.\")\r\nelse:\r\n    st.subheader(\"Preview\")\r\n    st.dataframe(df.head(20), use_container_width=True)\r\n\r\n# ------------------------------ Feature Selection ------------------------------\r\nif df is not None:\r\n    st.sidebar.header(\"2) Select Features\")\r\n    all_cols = df.columns.tolist()\r\n    recommended = [\r\n        \"is_weekend\",\"is_holiday\",\"branch_open_hours\",\"staff_on_duty\",\"is_payday\",\r\n        \"marketing_campaign\",\"promo_strength\",\"atm_outage\",\"temp_c\",\"rain_mm\",\"aqi\",\"dust_event\",\r\n        \"total_visit\",\"teller_visits\",\"atm_visits\",\"service_visits\",\"transactions_total\",\r\n        \"avg_wait_time_min\",\"new_accounts_opened\",\"loan_inquiries\",\"complaints\",\r\n        \"cash_deposits\",\"cash_withdrawals\",\"fx_transactions\"\r\n    ]\r\n    default_sel = [c for c in recommended if c in all_cols] or df.select_dtypes(include=[np.number]).columns.tolist()\r\n    selected = st.sidebar.multiselect(\"Columns to use\", options=all_cols, default=default_sel)\r\n\r\n    st.sidebar.header(\"3) Preprocessing\")\r\n    impute_strategy = st.sidebar.selectbox(\"Numeric imputation\", [\"median\",\"mean\"], index=0)\r\n    scaler_choice = st.sidebar.selectbox(\"Scaling\", [\"StandardScaler\",\"MinMaxScaler\",\"None\"], index=0)\r\n\r\n    st.sidebar.header(\"4) Algorithm\")\r\n    algo = st.sidebar.selectbox(\"Method\", [\"KMeans\",\"Agglomerative\",\"DBSCAN\",\"GaussianMixture\"], index=0)\r\n\r\n    params = {}\r\n    if algo in (\"KMeans\",\"Agglomerative\"):\r\n        params[\"n_clusters\"] = st.sidebar.slider(\"n_clusters\", 2, 20, 5, 1)\r\n        if algo == \"Agglomerative\":\r\n            params[\"linkage\"] = st.sidebar.selectbox(\"linkage\", [\"ward\",\"complete\",\"average\",\"single\"], index=0)\r\n    elif algo == \"DBSCAN\":\r\n        params[\"eps\"] = st.sidebar.slider(\"eps\", 0.1, 10.0, 1.5, 0.1)\r\n        params[\"min_samples\"] = st.sidebar.slider(\"min_samples\", 2, 50, 5, 1)\r\n    elif algo == \"GaussianMixture\":\r\n        params[\"n_components\"] = st.sidebar.slider(\"n_components\", 2, 20, 5, 1)\r\n        params[\"covariance_type\"] = st.sidebar.selectbox(\"covariance_type\", [\"full\",\"diag\",\"tied\",\"spherical\"], index=0)\r\n\r\n    st.sidebar.header(\"5) Run\")\r\n    seed = st.sidebar.number_input(\"Random seed\", min_value=0, value=42, step=1)\r\n    if st.sidebar.button(\"Run Clustering\"):\r\n        st.session_state.run_clicked = True\r\n\r\n    # ------------------------------- Run Block --------------------------------\r\n    if st.session_state.run_clicked:\r\n        if not selected:\r\n            st.error(\"Please select at least one column.\")\r\n        else:\r\n            try:\r\n                with st.spinner(\"Running clustering...\"):\r\n                    df_proc, num_cols, cat_cols = coerce_selected_features(df, selected)\r\n                    pre = make_preprocessor(num_cols, cat_cols, impute_strategy=impute_strategy, scaler=scaler_choice if scaler_choice!=\"None\" else None)\r\n                    X = pre.fit_transform(df_proc[num_cols + cat_cols])\r\n                    model, labels = fit_cluster(X, algo, params, random_state=int(seed))\r\n                    metrics = compute_metrics(X, labels, algo)\r\n                    dims = 3 if HAS_PLOTLY else 2\r\n                    try:\r\n                        emb_df = pca_embedding(X, dims=dims, random_state=int(seed))\r\n                    except Exception:\r\n                        emb_df = pca_embedding(X, dims=2, random_state=int(seed))\r\n                    df_labeled, sizes, num_means, top_cats = cluster_profiles(df_proc, labels, selected, num_cols, cat_cols)\r\n\r\n                m1,m2,m3,m4 = st.columns(4)\r\n                m1.metric(\"Clusters\", metrics.get(\"n_clusters\", None))\r\n                m2.metric(\"Silhouette\", f\"{metrics['silhouette']:.3f}\" if metrics.get(\"silhouette\") is not None else \"—\")\r\n                m3.metric(\"Davies–Bouldin ↓\", f\"{metrics['davies_bouldin']:.3f}\" if metrics.get(\"davies_bouldin\") is not None else \"—\")\r\n                m4.metric(\"Calinski–Harabasz ↑\", f\"{metrics['calinski_harabasz']:.1f}\" if metrics.get(\"calinski_harabasz\") is not None else \"—\")\r\n\r\n                st.subheader(\"Cluster Sizes\")\r\n                st.dataframe(sizes, use_container_width=True)\r\n\r\n                st.subheader(\"Visualization (PCA)\")\r\n                plot_df = emb_df.copy()\r\n                plot_df[\"cluster\"] = labels.astype(str)\r\n                if HAS_PLOTLY and plot_df.shape[1]==3:\r\n                    fig = px.scatter_3d(plot_df, x=\"x\", y=\"y\", z=\"z\", color=\"cluster\", opacity=0.85, title=f\"{algo} Clusters (PCA 3D)\")\r\n                    st.plotly_chart(fig, use_container_width=True)\r\n                elif HAS_PLOTLY:\r\n                    fig = px.scatter(plot_df, x=\"x\", y=\"y\", color=\"cluster\", opacity=0.9, title=f\"{algo} Clusters (PCA 2D)\")\r\n                    st.plotly_chart(fig, use_container_width=True)\r\n                else:\r\n                    st.caption(\"Plotly not found. Showing basic 2D chart.\")\r\n                    st.scatter_chart(plot_df, x=\"x\", y=\"y\", color=\"cluster\")\r\n\r\n                st.subheader(\"Cluster Profiles\")\r\n                if not num_means.empty:\r\n                    st.write(\"**Numeric means by cluster**\")\r\n                    st.dataframe(num_means, use_container_width=True)\r\n                if not top_cats.empty:\r\n                    st.write(\"**Top categorical values by cluster**\")\r\n                    st.dataframe(top_cats, use_container_width=True)\r\n\r\n                st.subheader(\"Labeled Data (first 200 rows)\")\r\n                st.dataframe(df_labeled.assign(cluster=labels).head(200), use_container_width=True)\r\n\r\n                st.subheader(\"Export\")\r\n                os.makedirs(DEFAULT_SAVE_DIR, exist_ok=True)\r\n                default_out = os.path.join(DEFAULT_SAVE_DIR, f\"clustered_{algo}_{int(time.time())}.csv\")\r\n                save_path = st.text_input(\"Save path\", value=default_out, key=\"savepath_input\")\r\n                col_a, col_b = st.columns([0.4,0.6])\r\n                with col_a:\r\n                    if st.button(\"Save CSV to Disk\"):\r\n                        try:\r\n                            df_labeled.assign(cluster=labels).to_csv(save_path, index=False, encoding=\"utf-8\")\r\n                            st.success(f\"Saved: {save_path}\")\r\n                        except Exception as e:\r\n                            st.error(f\"Save failed: {e}\")\r\n                with col_b:\r\n                    st.download_button(\r\n                        \"Download labeled CSV\",\r\n                        data=df_labeled.assign(cluster=labels).to_csv(index=False).encode(\"utf-8\"),\r\n                        file_name=os.path.basename(save_path),\r\n                        mime=\"text/csv\"\r\n                    )\r\n\r\n            except Exception as e:\r\n                st.error(f\"Clustering failed: {e}\")\r\n\r\n    if st.sidebar.button(\"Reset\"):\r\n        st.session_state.run_clicked = False\r\n        st.experimental_rerun()\r\n</code></pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- REQUIREMENTS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Deps</small>\r\n      <h1>2) <code class=\"inline\">requirements.txt</code></h1>\r\n      <p>Plotly is optional (app will fall back to basic charts)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre><code>streamlit\r\npandas\r\nnumpy\r\nscikit-learn\r\n# plotly   <-- optional (uncomment if you want Plotly charts)\r\n</code></pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- HOW TO RUN -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Run</small>\r\n      <h1>3) Launch the app</h1>\r\n      <p>Windows / PowerShell example</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre><code># In the folder with app.py and requirements.txt\r\npython -m venv .venv\r\n.\\.venv\\Scripts\\Activate.ps1\r\npip install -r requirements.txt\r\n\r\n# (Optional) For nicer charts\r\npip install plotly\r\n\r\n# Launch\r\nstreamlit run app.py\r\n</code></pre>\r\n      <p style=\"margin-top:10px\">\r\n        The app defaults to saving labeled files in:\r\n        <code class=\"inline\">C:\\Users\\sourc\\OneDrive\\Desktop\\Python\\Erbil Air Polution</code>.\r\n        If you’re on macOS/Linux or Codespaces, change <code class=\"inline\">DEFAULT_SAVE_DIR</code> near the top of <code class=\"inline\">app.py</code>.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHY THIS IS STABLE -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Reliability</small>\r\n      <h1>Why this build doesn’t “kick you out”</h1>\r\n      <p>Defensive patterns throughout the pipeline</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li>No <code class=\"inline\">st.stop()</code> — UI stays mounted after Run.</li>\r\n        <li>All heavy steps are wrapped in <code class=\"inline\">try/except</code> with clear messages.</li>\r\n        <li>Automatic handling of <em>date</em> → ordinal, numeric coercion for “number‑like” strings, and robust missing‑value imputation.</li>\r\n        <li><strong>ColumnTransformer</strong> with One‑Hot + scaling returns dense matrices (PCA‑safe across versions).</li>\r\n        <li>Metrics computed only when valid (e.g., DBSCAN’s noise points excluded).</li>\r\n        <li>Optional Plotly; falls back to Streamlit chart if Plotly isn’t installed.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DATA EXAMPLES -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Data</small>\r\n      <h1>What to feed the model?</h1>\r\n      <p>Examples that cluster well</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Bank operations (daily)</h3>\r\n          <p>Visits, transactions, staffing, weather, promo flags, holidays.</p>\r\n          <p>Find traffic patterns, promotional lift cohorts, anomaly days.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Sensors & IoT</h3>\r\n          <p>Pressure/temperature series, derived rates & rolling stats.</p>\r\n          <p>Detect device cohorts and early fault signatures.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Customer usage</h3>\r\n          <p>Clicks, session lengths, features used, NPS, support contact.</p>\r\n          <p>Define product personas and tailor onboarding.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Text embeddings</h3>\r\n          <p>Ticket titles or reviews encoded to vectors.</p>\r\n          <p>Find topic clusters and route intelligently.</p>\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:8px\">\r\n        Start with the provided dataset:\r\n        <a href=\"https://github.com/AIforimpact22/learningexamples/blob/main/bank_visits_complete_2024.csv\" target=\"_blank\" rel=\"noopener\">bank_visits_complete_2024.csv</a>.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">© <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span></div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now=new Date();\r\n  document.getElementById('y').textContent=now.getFullYear();\r\n  document.getElementById('d').textContent=now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "4b4a02fc-227b-4393-a947-7b14802317eb"
    },
    {
      "kind": "article",
      "order": 3,
      "title": "When to Use Unsupervised Machine Learning",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>When to Use Unsupervised Machine Learning</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #ffffff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Pills & chips (use #BDBDBD as requested) === */\r\n.pill { display: inline-block; padding: 4px 10px; border: 1px solid #A3A3A3; border-radius: 999px; background: #BDBDBD; color: #000; font-size: 12px; font-weight: 700; }\r\n\r\n/* === Grids === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(260px,1fr)); gap: 14px; }\r\n.box  { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Step list === */\r\n.steps { display: grid; grid-template-columns: 34px 1fr; gap: 8px 12px; align-items: start; }\r\n.step-num { width: 34px; height: 34px; border-radius: 999px; background: #BDBDBD; color: #000; font-weight: 800; display: flex; align-items: center; justify-content: center; border: 1px solid #A3A3A3; }\r\n.step-body { padding-top: 4px; }\r\n\r\n/* === Tables === */\r\n.table { width: 100%; border-collapse: collapse; }\r\n.table th, .table td { border: 1px solid #EBEBEB; padding: 10px 12px; text-align: left; }\r\n.table th { background: #f9f9f9; color: #000; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Machine Learning</small>\r\n      <h1>When to Use Unsupervised Machine Learning</h1>\r\n      <p>Know the situations where clustering, anomaly detection, topic discovery, and dimensionality reduction add the most value.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        Unsupervised ML is for learning structure from data <em>without labels</em>. Use it to\r\n        discover groups, reduce dimensionality for visualization, or surface odd behavior that\r\n        warrants action. It is often the <strong>first step</strong> before supervised models and a\r\n        practical tool when labels are expensive, slow, or ambiguous.\r\n      </p>\r\n      <p>\r\n        Common families: <span class=\"pill\">Clustering</span> <span class=\"pill\">Anomaly Detection</span>\r\n        <span class=\"pill\">Topic/Embeddings</span> <span class=\"pill\">Dimensionality Reduction</span>.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- PRIME USE-CASES -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Use‑Cases</small>\r\n      <h1>Situations where unsupervised ML shines</h1>\r\n      <p>Clear triggers that justify it, with examples from business and science</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>No labels, but you need structure</h3>\r\n          <ul>\r\n            <li>Segment customers by behavior (visits, products, channels).</li>\r\n            <li>Group wells/sensors by operating patterns.</li>\r\n            <li>Organize documents by topic without human tagging.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Labels are costly or slow</h3>\r\n          <ul>\r\n            <li>Expert labeling (geology cores, medical charts) is scarce.</li>\r\n            <li>Outcomes arrive months later (churn, repayments).</li>\r\n            <li>Use clusters to pre‑label or prioritize review.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Anomaly or drift watch</h3>\r\n          <ul>\r\n            <li>Detect unusual device telemetry in real time.</li>\r\n            <li>Spot data pipeline drift before models degrade.</li>\r\n            <li>Find odd HR attendance patterns or fraud bursts.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>High‑dimensional → human insight</h3>\r\n          <ul>\r\n            <li>Reduce hundreds of features to 2–3D plots (PCA/UMAP).</li>\r\n            <li>Explore embeddings of text/images for QA or search.</li>\r\n            <li>Share intuitive dashboards with non‑technical teams.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Cold‑start or new markets</h3>\r\n          <ul>\r\n            <li>No labels in a new geography or product line.</li>\r\n            <li>Cluster to discover “look‑alike” patterns quickly.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Pre‑processing for supervised ML</h3>\r\n          <ul>\r\n            <li>Use cluster IDs or anomaly flags as features.</li>\r\n            <li>Balance datasets by sampling from clusters.</li>\r\n            <li>Compress correlated inputs to reduce noise.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DECISION GUIDE -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Guide</small>\r\n      <h1>Quick decision guide</h1>\r\n      <p>Select a technique based on the question and data shape</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <table class=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Situation</th>\r\n            <th>Technique</th>\r\n            <th>Why</th>\r\n            <th>Examples</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Discover natural groups</td>\r\n            <td>K‑Means / GMM / Agglomerative</td>\r\n            <td>Find compact or hierarchical structure</td>\r\n            <td>Customer cohorts, geoscience facies, product bundles</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Irregular shapes; noise matters</td>\r\n            <td>DBSCAN / HDBSCAN</td>\r\n            <td>Density‑based; flags outliers as noise</td>\r\n            <td>Sensor spikes, route clusters, spatial hot‑spots</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Show complex data on 2D</td>\r\n            <td>PCA / UMAP / t‑SNE</td>\r\n            <td>Dimensionality reduction for visualization</td>\r\n            <td>Ticket embeddings, well‑log vectors, genome data</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Early warnings</td>\r\n            <td>Isolation Forest / One‑Class SVM / z‑score</td>\r\n            <td>Outlier detection w/out labeled failures</td>\r\n            <td>Equip. faults, fraud spikes, traffic anomalies</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DATA PREREQS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Readiness</small>\r\n      <h1>Data prerequisites before you cluster</h1>\r\n      <p>Small checks that save big headaches</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"steps\">\r\n        <div class=\"step-num\">1</div>\r\n        <div class=\"step-body\"><strong>Right unit of analysis.</strong> Define one row = one entity/time window (e.g., branch‑day).</div>\r\n\r\n        <div class=\"step-num\">2</div>\r\n        <div class=\"step-body\"><strong>Robust features.</strong> Handle missing values; scale numerics; one‑hot encode categoricals; avoid obvious leakage from the future.</div>\r\n\r\n        <div class=\"step-num\">3</div>\r\n        <div class=\"step-body\"><strong>Manage dimensionality.</strong> Too many sparse columns ⇒ use PCA/UMAP or drop weak features first.</div>\r\n\r\n        <div class=\"step-num\">4</div>\r\n        <div class=\"step-body\"><strong>Sampling.</strong> If data are huge, start with a stratified sample; verify results on full data later.</div>\r\n\r\n        <div class=\"step-num\">5</div>\r\n        <div class=\"step-body\"><strong>Operational labels (optional).</strong> Decide how clusters/anomalies will be named and consumed by downstream teams.</div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- EVALUATION WITHOUT LABELS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Validation</small>\r\n      <h1>How to evaluate without labels</h1>\r\n      <p>Internal metrics + domain checks</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Internal metrics</h3>\r\n          <ul>\r\n            <li>Silhouette ↑, Calinski–Harabasz ↑, Davies–Bouldin ↓</li>\r\n            <li>Stability under re‑runs/bootstraps</li>\r\n            <li>Cluster size balance (avoid tiny shards unless they’re meaningful)</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>External sanity checks</h3>\r\n          <ul>\r\n            <li>Business separability (KPIs differ across clusters?)</li>\r\n            <li>Temporal consistency (do segments persist week to week?)</li>\r\n            <li>Explainability (top features that define each cluster)</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Human‑in‑the‑loop</h3>\r\n          <ul>\r\n            <li>Let SMEs rename/merge/split clusters</li>\r\n            <li>Promote stable clusters to “segments” and track as metadata</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- PITFALLS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Watch‑outs</small>\r\n      <h1>Common pitfalls & anti‑patterns</h1>\r\n      <p>Avoid misleading segments and brittle setups</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>Confusing noise for insight.</strong> Very small clusters may be data errors or rare events.</li>\r\n        <li><strong>Unscaled features.</strong> K‑Means is distance‑based; always scale or results skew toward large‑magnitude variables.</li>\r\n        <li><strong>Too many weak features.</strong> High‑dimensional noise kills separation — prune or compress first.</li>\r\n        <li><strong>Static snapshots only.</strong> For operations data, use rolling windows; cluster drift over time is expected.</li>\r\n        <li><strong>Acting without names.</strong> Assign clear labels (“High‑footfall weekdays”, “Weekend‑promo responders”) so teams can use them.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- EXAMPLES -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Examples</small>\r\n      <h1>Practical scenarios</h1>\r\n      <p>Where this belongs in your pipeline</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Bank operations</h3>\r\n          <p>Cluster branch‑days by load; feed staffing and opening‑hours policies; flag anomalies for incident review.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Geothermal / UTES</h3>\r\n          <p>Cluster wells by thermal/pressure behavior; detect drift; create features for performance prediction.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>E‑commerce</h3>\r\n          <p>Segment buyers by journey; build different recommendations; monitor outlier carts for fraud signals.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>HR & attendance</h3>\r\n          <p>Group teams by absence patterns; forecast risk of under‑staffing; investigate unusual check‑in/out sequences.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- QUICK PROMPTS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Prompts</small>\r\n      <h1>Useful prompts to accelerate work</h1>\r\n      <p>Copy–paste, then refine with your column names</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>Feature ideas:</strong> “Given columns <list>, propose 15 clustering features (lags, ratios, seasonality, binary flags) and justify each.”</li>\r\n        <li><strong>Method choice:</strong> “My data have mixed types and outliers. Compare K‑Means, GMM, and DBSCAN for this case and suggest defaults.”</li>\r\n        <li><strong>Stability check:</strong> “Generate a bootstrap plan to test cluster stability and report variation in Silhouette and cluster counts.”</li>\r\n        <li><strong>Naming:</strong> “Suggest descriptive names for these clusters given their top features and KPI means.”</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">© <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span></div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "6a0b4ca0-800e-466c-a5c0-7cc16fec803c"
    },
    {
      "kind": "article",
      "order": 4,
      "title": "Supervised ML - Random‑Forest Forecast",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Supervised ML — Random‑Forest Forecast • Download & Run in Codespaces</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n*{box-sizing:border-box;word-wrap:break-word;overflow-wrap:break-word}\r\nbody{font:16px/1.55 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#555;margin:0;background:#fff}\r\na{color:#000;text-decoration:underline}\r\ncode,pre{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace}\r\n\r\n/* === Page wrap === */\r\n.wrap{max-width:1080px;margin:0 auto;padding:18px}\r\n\r\n/* === Card container === */\r\n.section-card{\r\n  border:1px solid #EBEBEB;border-radius:14px;overflow:hidden;\r\n  box-shadow:0 1px 2px rgba(0,0,0,.04);margin-bottom:24px;background:#ffffff\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner{\r\n  background:linear-gradient(120deg,#555555,#000000);\r\n  color:#FFFFFF;padding:18px 20px\r\n}\r\n.section-card .banner small{font-size:12px;letter-spacing:.08em;opacity:.9;text-transform:uppercase;color:#FFFFFF}\r\n.section-card .banner h1{margin:6px 0 4px;font-size:26px;line-height:1.2;color:#FFFFFF}\r\n.section-card .banner p{margin:0;opacity:.95;color:#FFFFFF}\r\n\r\n/* === Body === */\r\n.section-card .body{padding:20px}\r\n.section-card p,.section-card li{font-size:16px;margin-top:0;color:#555}\r\n\r\n/* === Pills & chips (neutral per style) === */\r\n.pill{display:inline-block;padding:4px 10px;border:1px solid #A3A3A3;border-radius:999px;background:#BDBDBD;color:#000;font-size:12px;font-weight:700}\r\n\r\n/* === Grid (used where needed) === */\r\n.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:14px}\r\n.box{border:1px solid #EBEBEB;border-radius:10px;background:#fff;padding:14px}\r\n.box h3{margin:0 0 8px;color:#000;font-size:18px}\r\n\r\n/* === KV list === */\r\n.kv{display:grid;grid-template-columns:160px 1fr;gap:6px 12px}\r\n.kv div:first-child{color:#000;font-weight:700}\r\n\r\n/* === CTA row === */\r\n.cta-row{display:flex;gap:10px;flex-wrap:wrap;margin-top:12px}\r\n.cta-row a{display:inline-block;text-decoration:none;padding:10px 16px;border-radius:8px;font-weight:700;border:1px solid #000}\r\n.cta-primary{background:#000;color:#EBEBEB}\r\n.cta-secondary{background:#fff;color:#000}\r\n\r\n/* === Figures === */\r\nimg.fig{max-width:100%;height:auto;display:block;border-radius:12px;border:1px solid #EBEBEB}\r\n.figcap{font-size:13px;color:#777;margin-top:6px}\r\n\r\n/* === Footer === */\r\n.footer-note{font-size:13px;color:#777;text-align:center;margin:30px 0 10px}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Supervised Machine Learning</small>\r\n      <h1>Random‑Forest N‑Day Forecast — Download & Run in GitHub Codespaces</h1>\r\n      <p>Grab the ready‑made app, update two paths for Linux (Codespaces), and forecast your next <strong>N</strong> days.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        The script <code>rf_forecast_app.py</code> is a stable Streamlit app that learns from a daily time series\r\n        (e.g., <code>total_visit</code>) and predicts the next <em>N</em> days. It keeps state, engineers safe features\r\n        (calendar cycles, lags, rolling means), evaluates on a recent test window, and exports CSVs.\r\n      </p>\r\n      <p>\r\n        <span class=\"pill\">Goal</span> Simple language: “Load a CSV with a <b>date</b> and a <b>number per day</b>,\r\n        train a <b>Random Forest</b>, and <b>predict the next N days</b> without breaking on reruns.”\r\n      </p>\r\n      <div class=\"cta-row\">\r\n        <a class=\"cta-primary\" href=\"https://github.com/AIforimpact22/learningexamples/blob/main/rf_forecast_app.py\" target=\"_blank\" rel=\"noopener\">Open script on GitHub</a>\r\n        <a class=\"cta-secondary\" href=\"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/rf_forecast_app.py\" target=\"_blank\" rel=\"noopener\">Download RAW (.py)</a>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 1: DOWNLOAD -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Step 1</small>\r\n      <h1>Download the script into your Codespace</h1>\r\n      <p>Two simple ways</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>A) Copy & paste</h3>\r\n          <ol>\r\n            <li>Open the RAW link: <a href=\"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/rf_forecast_app.py\" target=\"_blank\" rel=\"noopener\">rf_forecast_app.py (raw)</a>.</li>\r\n            <li>Select all → copy.</li>\r\n            <li>In Codespaces, create a new file at your repo root named <code>rf_forecast_app.py</code> and paste.</li>\r\n            <li>Save the file.</li>\r\n          </ol>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>B) Use terminal (curl)</h3>\r\n          <pre><code>curl -L -o rf_forecast_app.py \\\r\n  \"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/rf_forecast_app.py\"</code></pre>\r\n          <p class=\"figcap\">Run this in the <b>repo root</b> inside your Codespace terminal.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 2: UPDATE PATHS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Step 2</small>\r\n      <h1>Update the save/data paths for Linux (Codespaces)</h1>\r\n      <p>Replace Windows paths with your Codespace workspace path</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        In the script, find the config block near the top and <b>replace the two variables</b>.\r\n        Your Codespace root is usually <code>/workspaces/<your-repo-name></code>.\r\n      </p>\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Before (Windows example)</h3>\r\n          <pre><code>DEFAULT_SAVE_DIR  = r\"C:\\Users\\sourc\\OneDrive\\Desktop\\Python\\Erbil Air Polution\"\r\nDEFAULT_DATA_PATH = os.path.join(DEFAULT_SAVE_DIR, \"bank_visits_complete_2024.csv\")</code></pre>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>After (Codespaces / Linux)</h3>\r\n          <pre><code># Example if your repo is named \"learningexamples\"\r\nDEFAULT_SAVE_DIR  = \"/workspaces/learningexamples\"\r\nDEFAULT_DATA_PATH = os.path.join(DEFAULT_SAVE_DIR, \"bank_visits_complete_2024.csv\")</code></pre>\r\n          <p class=\"figcap\">If your repo is named differently, change <code>learningexamples</code> to your repo name.</p>\r\n        </div>\r\n      </div>\r\n      <p>\r\n        You can also leave <code>DEFAULT_DATA_PATH</code> alone and simply upload the CSV from the UI — but setting the\r\n        path is convenient for repeat runs and exporting.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 3: GET THE SAMPLE DATA -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Step 3</small>\r\n      <h1>Add the sample dataset</h1>\r\n      <p>Place it next to your script or in your workspace folder</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>Download the sample CSV:</p>\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>From GitHub</h3>\r\n          <p><a href=\"https://github.com/AIforimpact22/learningexamples/blob/main/bank_visits_complete_2024.csv\" target=\"_blank\" rel=\"noopener\">Open on GitHub</a> and click <b>Download raw file</b>.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>From terminal (curl)</h3>\r\n          <pre><code>curl -L -o bank_visits_complete_2024.csv \\\r\n  \"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/bank_visits_complete_2024.csv\"</code></pre>\r\n        </div>\r\n      </div>\r\n      <p class=\"figcap\">Make sure the CSV path in the app matches where you saved it (or upload via the sidebar at runtime).</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 4: INSTALL & RUN -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Step 4</small>\r\n      <h1>Install dependencies & launch Streamlit</h1>\r\n      <p>One‑time install, then run</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Install (inside Codespaces)</h3>\r\n          <pre><code>pip install streamlit pandas numpy scikit-learn plotly</code></pre>\r\n          <p class=\"figcap\">Plotly is optional; the app falls back to Streamlit charts if it’s not installed.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Run the app</h3>\r\n          <pre><code>streamlit run rf_forecast_app.py</code></pre>\r\n          <p class=\"figcap\">Open the forwarded port when prompted. Use the sidebar to load the CSV and train.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHAT IT DOES -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>What it does</small>\r\n      <h1>Plain‑English summary</h1>\r\n      <p>Exactly what this script is aiming to do</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><b>Learn from daily numbers</b> — the app reads one number per day (e.g., customers).</li>\r\n        <li><b>Builds time‑aware features</b> — recent days (lags), recent averages (rolling means), weekends/paydays, seasonal cycles.</li>\r\n        <li><b>Fits a Random Forest</b> — a sturdy model that handles non‑linear patterns and mixed signals.</li>\r\n        <li><b>Checks its work</b> — holds out the most recent days to compare predictions vs. reality (MAE, RMSE, R², MAPE).</li>\r\n        <li><b>Predicts the future</b> — steps forward one day at a time, using the last predictions to form tomorrow’s features.</li>\r\n        <li><b>Keeps you safe</b> — stable session state, unique keys, and guarded code paths to avoid “app kicked me out” moments.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- SNAPSHOTS (STACKED VERTICAL, FULL-WIDTH) -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Snapshots</small>\r\n      <h1>Expected screens (stacked)</h1>\r\n      <p>Full-width previews — no side-by-side shrinking</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"box\" style=\"margin-bottom:14px;\">\r\n        <h3>Training results (metrics & test plot)</h3>\r\n        <a href=\"https://i.imgur.com/PpT1X1a.png\" target=\"_blank\" rel=\"noopener\">\r\n          <img class=\"fig\" src=\"https://i.imgur.com/PpT1X1a.png\" alt=\"Training results: metrics + test window chart\" />\r\n        </a>\r\n        <div class=\"figcap\">MAE / RMSE / R² / MAPE; plus “Actual vs Predicted” on the held‑out test window.</div>\r\n      </div>\r\n\r\n      <div class=\"box\">\r\n        <h3>Forecast (history + next N days)</h3>\r\n        <a href=\"https://i.imgur.com/e7YNdHi.png\" target=\"_blank\" rel=\"noopener\">\r\n          <img class=\"fig\" src=\"https://i.imgur.com/e7YNdHi.png\" alt=\"Forecast chart: last ~200 days + next N days\" />\r\n        </a>\r\n        <div class=\"figcap\">Full‑width view so the lines and axis labels are easy to read.</div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- TROUBLESHOOT -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Tips</small>\r\n      <h1>Common quick fixes</h1>\r\n      <p>Solutions to typical hiccups</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><b>File not found:</b> confirm <code>DEFAULT_DATA_PATH</code> or use the upload box.</li>\r\n        <li><b>Target not found:</b> pick the correct numeric column (e.g., <code>total_visit</code>) in the sidebar.</li>\r\n        <li><b>Too few rows for lags:</b> reduce lags/rolling windows or supply a longer history.</li>\r\n        <li><b>Charts not showing:</b> install Plotly or rely on the Streamlit fallback charts.</li>\r\n      </ul>\r\n      <div class=\"cta-row\">\r\n        <a class=\"cta-primary\" href=\"https://github.com/AIforimpact22/learningexamples/blob/main/rf_forecast_app.py\" target=\"_blank\" rel=\"noopener\">View on GitHub</a>\r\n        <a class=\"cta-secondary\" href=\"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/bank_visits_complete_2024.csv\" target=\"_blank\" rel=\"noopener\">Download sample CSV</a>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">© <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span></div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now=new Date();\r\n  document.getElementById('y').textContent=now.getFullYear();\r\n  document.getElementById('d').textContent=now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "36012585-6bd0-45a2-a153-94059fbba07b"
    },
    {
      "kind": "article",
      "order": 5,
      "title": "Supervised ML — HistGradientBoosting Forecast",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Supervised ML — HistGradientBoosting Forecast • Download & Run in Codespaces</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n*{box-sizing:border-box;word-wrap:break-word;overflow-wrap:break-word}\r\nbody{font:16px/1.55 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#555;margin:0;background:#fff}\r\na{color:#000;text-decoration:underline}\r\ncode,pre{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace}\r\n\r\n/* === Page wrap === */\r\n.wrap{max-width:1080px;margin:0 auto;padding:18px}\r\n\r\n/* === Card container === */\r\n.section-card{\r\n  border:1px solid #EBEBEB;border-radius:14px;overflow:hidden;\r\n  box-shadow:0 1px 2px rgba(0,0,0,.04);margin-bottom:24px;background:#ffffff\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner{\r\n  background:linear-gradient(120deg,#555555,#000000);\r\n  color:#FFFFFF;padding:18px 20px\r\n}\r\n.section-card .banner small{font-size:12px;letter-spacing:.08em;opacity:.9;text-transform:uppercase;color:#FFFFFF}\r\n.section-card .banner h1{margin:6px 0 4px;font-size:26px;line-height:1.2;color:#FFFFFF}\r\n.section-card .banner p{margin:0;opacity:.95;color:#FFFFFF}\r\n\r\n/* === Body === */\r\n.section-card .body{padding:20px}\r\n.section-card p,.section-card li{font-size:16px;margin-top:0;color:#555}\r\n\r\n/* === Pills === */\r\n.pill{display:inline-block;padding:4px 10px;border:1px solid #A3A3A3;border-radius:999px;background:#BDBDBD;color:#000;font-size:12px;font-weight:700}\r\n\r\n/* === Grid & boxes === */\r\n.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:14px}\r\n.box{border:1px solid #EBEBEB;border-radius:10px;background:#fff;padding:14px}\r\n.box h3{margin:0 0 8px;color:#000;font-size:18px}\r\n\r\n/* === KV metrics === */\r\n.kv{display:grid;grid-template-columns:160px 1fr;gap:6px 12px}\r\n.kv div:first-child{color:#000;font-weight:700}\r\n\r\n/* === CTA row === */\r\n.cta-row{display:flex;gap:10px;flex-wrap:wrap;margin-top:12px}\r\n.cta-row a{display:inline-block;text-decoration:none;padding:10px 16px;border-radius:8px;font-weight:700;border:1px solid #000}\r\n.cta-primary{background:#000;color:#EBEBEB}\r\n.cta-secondary{background:#fff;color:#000}\r\n\r\n/* === Figures === */\r\nimg.fig{max-width:100%;height:auto;display:block;border-radius:12px;border:1px solid #EBEBEB}\r\n.figcap{font-size:13px;color:#777;margin-top:6px}\r\n\r\n/* === Footer === */\r\n.footer-note{font-size:13px;color:#777;text-align:center;margin:30px 0 10px}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Supervised Machine Learning</small>\r\n      <h1>HistGradientBoosting — N‑Day Forecast (fast, robust, numeric‑only)</h1>\r\n      <p>Another production‑ready path: train a Histogram‑based Gradient Boosting model and forecast the next <strong>N</strong> days.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        This app uses <b>HistGradientBoostingRegressor</b> (falls back to classic GradientBoosting if unavailable).\r\n        It builds <b>purely numeric features</b> (calendar cycles, lags, rolling means, optional lag‑1 regressors),\r\n        <b>time‑splits</b> the data (last N days as test), then performs a <b>recursive multi‑step forecast</b>.\r\n      </p>\r\n      <p>\r\n        <span class=\"pill\">Why HGB?</span> It’s typically <b>faster</b> than classic GB on medium/large datasets and handles non‑linear patterns well.\r\n      </p>\r\n      <div class=\"cta-row\">\r\n        <a class=\"cta-primary\" href=\"https://github.com/AIforimpact22/learningexamples/blob/main/histgradientboosting.py\" target=\"_blank\" rel=\"noopener\">Open script on GitHub</a>\r\n        <a class=\"cta-secondary\" href=\"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/histgradientboosting.py\" target=\"_blank\" rel=\"noopener\">Download RAW (.py)</a>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 1: DOWNLOAD -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Step 1</small>\r\n      <h1>Download the script into your Codespace</h1>\r\n      <p>Two straightforward options</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>A) Copy & paste</h3>\r\n          <ol>\r\n            <li>Open the RAW link: <a href=\"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/histgradientboosting.py\" target=\"_blank\" rel=\"noopener\">histgradientboosting.py (raw)</a>.</li>\r\n            <li>Select all → copy.</li>\r\n            <li>In Codespaces, create <code>histgradientboosting.py</code> at your repo root and paste.</li>\r\n            <li>Save the file.</li>\r\n          </ol>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>B) Use terminal</h3>\r\n          <pre><code>curl -L -o histgradientboosting.py \\\r\n  \"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/histgradientboosting.py\"</code></pre>\r\n          <p class=\"figcap\">Run from your repo root inside the Codespace terminal.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 2: UPDATE PATHS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Step 2</small>\r\n      <h1>Update save & data paths for Linux (Codespaces)</h1>\r\n      <p>Replace Windows paths with <code>/workspaces/<your-repo></code></p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>Find the config block near the top of <code>histgradientboosting.py</code> and edit the two constants:</p>\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Before (Windows)</h3>\r\n          <pre><code>DEFAULT_SAVE_DIR  = r\"C:\\Users\\sourc\\OneDrive\\Desktop\\Python\\Erbil Air Polution\"\r\nDEFAULT_DATA_PATH = os.path.join(DEFAULT_SAVE_DIR, \"bank_visits_complete_2024.csv\")</code></pre>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>After (Codespaces)</h3>\r\n          <pre><code># Example if your repo is named \"learningexamples\"\r\nDEFAULT_SAVE_DIR  = \"/workspaces/learningexamples\"\r\nDEFAULT_DATA_PATH = os.path.join(DEFAULT_SAVE_DIR, \"bank_visits_complete_2024.csv\")</code></pre>\r\n          <p class=\"figcap\">If your repo has another name, replace <code>learningexamples</code> accordingly.</p>\r\n        </div>\r\n      </div>\r\n      <p>You can also upload the CSV from the app’s sidebar instead of setting the path, but the path is convenient for repeat runs & exports.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 3: SAMPLE DATA -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Step 3</small>\r\n      <h1>Add the sample dataset</h1>\r\n      <p>Place it in your workspace or upload via the UI</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>From GitHub</h3>\r\n          <p><a href=\"https://github.com/AIforimpact22/learningexamples/blob/main/bank_visits_complete_2024.csv\" target=\"_blank\" rel=\"noopener\">Open the CSV</a> and download the raw file.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>From terminal</h3>\r\n          <pre><code>curl -L -o bank_visits_complete_2024.csv \\\r\n  \"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/bank_visits_complete_2024.csv\"</code></pre>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 4: INSTALL & RUN -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Step 4</small>\r\n      <h1>Install dependencies & launch Streamlit</h1>\r\n      <p>One‑time install, then run</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Install (inside Codespaces)</h3>\r\n          <pre><code>pip install streamlit pandas numpy scikit-learn plotly</code></pre>\r\n          <p class=\"figcap\">Plotly is optional; the app falls back to Streamlit charts if Plotly isn’t present.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Run the app</h3>\r\n          <pre><code>streamlit run histgradientboosting.py</code></pre>\r\n          <p class=\"figcap\">Open the forwarded port. Use the sidebar to load data, configure lags/rolls, choose the engine, and train.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHAT IT DOES -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>What it does</small>\r\n      <h1>Plain‑English summary</h1>\r\n      <p>Exactly what this script is aiming to do</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><b>Learn with HGB</b> — trains a Histogram‑based Gradient Boosting model (or classic GB as fallback).</li>\r\n        <li><b>Numeric‑only features</b> — calendar cycles (sin/cos), weekend/payday flags, lags, rolling means, optional lag‑1 regressors.</li>\r\n        <li><b>Forecasts next K days</b> — recursive multi‑step using its own predictions to build future features.</li>\r\n        <li><b>Stable UI</b> — unique button keys, no duplicate date inserts, no datetime sent into the model, guarded code paths.</li>\r\n        <li><b>Exports CSVs</b> — save test predictions and future forecasts to your workspace.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- TRAINING RESULT (SAMPLE) -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Sample result</small>\r\n      <h1>Training metrics (example)</h1>\r\n      <p>Your scores will vary depending on the data & settings</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\"><div class=\"kv\"><div>MAE</div><div><strong>33.09</strong></div></div></div>\r\n        <div class=\"box\"><div class=\"kv\"><div>RMSE</div><div><strong>47.62</strong></div></div></div>\r\n        <div class=\"box\"><div class=\"kv\"><div>R²</div><div><strong>0.620</strong></div></div></div>\r\n        <div class=\"box\"><div class=\"kv\"><div>MAPE %</div><div><strong>418586122.3</strong></div></div></div>\r\n      </div>\r\n      <p class=\"figcap\">These values are illustrative from one run; re‑training or different parameters will change results.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FORECAST SNAPSHOT -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Snapshot</small>\r\n      <h1>Forecast view</h1>\r\n      <p>History + next N days (overlay)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <a href=\"https://i.imgur.com/HW6xllV.png\" target=\"_blank\" rel=\"noopener\">\r\n        <img class=\"fig\" src=\"https://i.imgur.com/HW6xllV.png\" alt=\"HistGradientBoosting forecast chart\" />\r\n      </a>\r\n      <div class=\"figcap\">Example forecast produced by the app (your plot will reflect your data and settings).</div>\r\n\r\n      <div class=\"cta-row\" style=\"margin-top:12px\">\r\n        <a class=\"cta-primary\" href=\"https://github.com/AIforimpact22/learningexamples/blob/main/histgradientboosting.py\" target=\"_blank\" rel=\"noopener\">View on GitHub</a>\r\n        <a class=\"cta-secondary\" href=\"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/histgradientboosting.py\" target=\"_blank\" rel=\"noopener\">Download script</a>\r\n        <a class=\"cta-secondary\" href=\"https://raw.githubusercontent.com/AIforimpact22/learningexamples/refs/heads/main/bank_visits_complete_2024.csv\" target=\"_blank\" rel=\"noopener\">Download sample CSV</a>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">© <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span></div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now=new Date();\r\n  document.getElementById('y').textContent=now.getFullYear();\r\n  document.getElementById('d').textContent=now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "25a98301-8979-41f0-9fe0-dda5f8eacc6a"
    },
    {
      "kind": "article",
      "order": 6,
      "title": "Supervised Machine Learning — What It’s Good Fo",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Supervised Machine Learning — What It’s Good For (Data & Problems)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n*{box-sizing:border-box;word-wrap:break-word;overflow-wrap:break-word}\r\nbody{font:16px/1.55 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#555;margin:0;background:#fff}\r\na{color:#000;text-decoration:underline}\r\ncode,pre{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace}\r\n\r\n/* === Page wrap === */\r\n.wrap{max-width:1080px;margin:0 auto;padding:18px}\r\n\r\n/* === Card container === */\r\n.section-card{\r\n  border:1px solid #EBEBEB;border-radius:14px;overflow:hidden;\r\n  box-shadow:0 1px 2px rgba(0,0,0,.04);margin-bottom:24px;background:#ffffff\r\n}\r\n\r\n/* === Banner / header === (grey → white text) */\r\n.section-card .banner{\r\n  background:linear-gradient(120deg,#555555,#000000);\r\n  color:#FFFFFF;padding:18px 20px\r\n}\r\n.section-card .banner small{font-size:12px;letter-spacing:.08em;opacity:.9;text-transform:uppercase;color:#FFFFFF}\r\n.section-card .banner h1{margin:6px 0 4px;font-size:26px;line-height:1.2;color:#FFFFFF}\r\n.section-card .banner p{margin:0;opacity:.95;color:#FFFFFF}\r\n\r\n/* === Body === */\r\n.section-card .body{padding:20px}\r\n.section-card p,.section-card li{font-size:16px;margin-top:0;color:#555}\r\n\r\n/* === Pills & badges === */\r\n.pill{display:inline-block;padding:4px 10px;border:1px solid #A3A3A3;border-radius:999px;background:#BDBDBD;color:#000;font-size:12px;font-weight:700}\r\n\r\n/* === Grids & boxes (horizontal, no overflow) === */\r\n.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:14px}\r\n.box{border:1px solid #EBEBEB;border-radius:10px;background:#fff;padding:14px}\r\n.box h3{margin:0 0 8px;color:#000;font-size:18px}\r\n\r\n/* === Simple tables === */\r\n.table-wrap{overflow-x:auto}\r\ntable{width:100%;border-collapse:collapse;min-width:760px}\r\nth,td{border:1px solid #EBEBEB;padding:10px;text-align:left;vertical-align:top}\r\nth{background:#BDBDBD;color:#000}\r\n\r\n/* === Checklists === */\r\n.checks{display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:14px}\r\n.checks .box ul{margin:8px 0 0 18px}\r\n\r\n/* === Footer === */\r\n.footer-note{font-size:13px;color:#777;text-align:center;margin:30px 0 10px}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- OVERVIEW -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Supervised Machine Learning</small>\r\n      <h1>What Supervised ML Is Good For — Data & Problem Types</h1>\r\n      <p>Simple, end‑to‑end guidance on when and how to use supervised learning.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        <strong>Supervised machine learning</strong> learns a mapping from <em>inputs</em> (features) to a known\r\n        <em>target</em> (label). You provide past examples: <em>“features → correct answer”</em>. The model fits that\r\n        relationship and predicts the answer for new, unseen cases.\r\n      </p>\r\n      <p>\r\n        Typical tasks are summarized by these <span class=\"pill\">labels</span>:\r\n        <span class=\"pill\">Regression</span> (predict a number),\r\n        <span class=\"pill\">Classification</span> (pick a class),\r\n        <span class=\"pill\">Multi‑label</span> (multiple classes at once),\r\n        <span class=\"pill\">Ranking</span> (order items),\r\n        <span class=\"pill\">Forecasting</span> (predict future numeric values).\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DATA TYPES IT FITS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Data</small>\r\n      <h1>What kinds of data work well?</h1>\r\n      <p>Structured tables, time series, text, images/audio, and mixed modalities.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Structured / Tabular</h3>\r\n          <ul>\r\n            <li>Columns like <em>age, city, price, channel</em>, etc.</li>\r\n            <li>Great for business KPIs, risk scoring, churn, credit, QA.</li>\r\n            <li>Strong baselines: <b>Logistic/Linear models, Random Forest, XGBoost/GBMs, CatBoost</b>.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Time Series</h3>\r\n          <ul>\r\n            <li>Timestamped signals (daily sales, sensor readings).</li>\r\n            <li>Forecasting (next N steps), anomaly detection (often hybrid).</li>\r\n            <li>Approaches: <b>Feature‑engineered regressors</b>, GBMs, RF; or specialized models.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Text</h3>\r\n          <ul>\r\n            <li>Emails, tickets, reviews, documents.</li>\r\n            <li>Tasks: sentiment, topic, intent, entity extraction (NER), routing.</li>\r\n            <li>Approaches: classic TF‑IDF + linear, or <b>transformers</b>/LLM embeddings + classifier.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Images & Audio</h3>\r\n          <ul>\r\n            <li>Quality inspection, medical imaging, object detection, speech tags.</li>\r\n            <li>Approaches: CNNs/ViTs for images; spectrogram + CNNs or audio transformers.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Mixed / Multimodal</h3>\r\n          <ul>\r\n            <li>Combine text + tabular + images (e.g., e‑commerce product risk).</li>\r\n            <li>Stack or fuse embeddings with tabular features + GBM/NN classifier.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- PROBLEM → METRIC → ALGO CHEATSHEET -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Cheat sheet</small>\r\n      <h1>Match problem → labels → metrics → starter models</h1>\r\n      <p>Quick mapping you can apply directly.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"table-wrap\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Problem shape</th>\r\n              <th>Label type</th>\r\n              <th>Example</th>\r\n              <th>Good metrics</th>\r\n              <th>Starter models</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>Predict a number</td>\r\n              <td>Regression</td>\r\n              <td>Daily customers, revenue, energy use</td>\r\n              <td>MAE, RMSE, MAPE, R²</td>\r\n              <td>LinearReg, <strong>GBM (XGBoost/LightGBM/CatBoost)</strong>, RF</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Choose a class</td>\r\n              <td>Classification (binary/multiclass)</td>\r\n              <td>Approve/deny, defect type, lead quality</td>\r\n              <td>Accuracy, F1, ROC‑AUC, PR‑AUC</td>\r\n              <td>LogisticReg, <strong>GBM</strong>, RF, SVM</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Multiple tags per item</td>\r\n              <td>Multi‑label</td>\r\n              <td>Ticket topics, product attributes</td>\r\n              <td>Micro/Macro‑F1, subset accuracy</td>\r\n              <td>One‑vs‑rest linear/GBM; NN for text</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Order items by relevance</td>\r\n              <td>Ranking</td>\r\n              <td>Search results, recommenders</td>\r\n              <td>nDCG, MAP, MRR</td>\r\n              <td>GBM ranking variants, factorization</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Predict future values</td>\r\n              <td>Forecasting</td>\r\n              <td>Demand, footfall, CPU load</td>\r\n              <td>MAE, RMSE, MAPE, sMAPE</td>\r\n              <td>Feature‑engineered <strong>GBM/RF</strong>, Prophet/ARIMA, HGB</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <p style=\"margin-top:10px\" class=\"figcap\">\r\n        Tip: always start with a <strong>simple baseline</strong> (mean/last‑value for regression; majority class/logistic for classification),\r\n        then climb to RF/GBM and beyond.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHEN TO / NOT TO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Fit assessment</small>\r\n      <h1>When supervised ML is a good idea — and when it isn’t</h1>\r\n      <p>Use this quick checklist before you invest time.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"checks\">\r\n        <div class=\"box\">\r\n          <h3>Good fit ✅</h3>\r\n          <ul>\r\n            <li>You have <strong>labeled data</strong> (historical truth: “what happened”).</li>\r\n            <li>Labels are <strong>consistent</strong> and meaningful for decisions.</li>\r\n            <li>Inputs are available at prediction time (no leakage from the future).</li>\r\n            <li>Clear <strong>business action</strong> follows a prediction (approve, route, staff).</li>\r\n            <li>Performance can be measured with a specific <strong>metric</strong>.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Not a great fit ❌</h3>\r\n          <ul>\r\n            <li>No reliable labels (consider <strong>unsupervised</strong> or labeling first).</li>\r\n            <li>Labels change meaning frequently (concept drift) with no retraining plan.</li>\r\n            <li>Sample size is tiny for the task complexity (high risk of overfitting).</li>\r\n            <li>Data you’d need is <strong>not available</strong> at decision time.</li>\r\n            <li>Prediction doesn’t drive any decision (no ROI).</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- BY FIELD / USE CASES -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Applications</small>\r\n      <h1>Where supervised ML shines</h1>\r\n      <p>Business and domain examples you can map directly.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Operations & Planning</h3>\r\n          <ul>\r\n            <li>Forecast daily customers / demand / staffing needs.</li>\r\n            <li>Predict ticket resolution time; classify urgency.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Finance & Risk</h3>\r\n          <ul>\r\n            <li>Credit risk scoring; fraud likelihood.</li>\r\n            <li>Revenue/expense forecasting; late‑payment classification.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Sales & Marketing</h3>\r\n          <ul>\r\n            <li>Lead scoring; churn prediction; win probability.</li>\r\n            <li>Campaign response classification; LTV regression.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Geoscience & Engineering</h3>\r\n          <ul>\r\n            <li>Predict sensor drift, failure risk, production rates.</li>\r\n            <li>Classify facies/rock types from logs; quality flags.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Healthcare & Public Sector</h3>\r\n          <ul>\r\n            <li>Readmission risk; triage category; bed‑day forecasts.</li>\r\n            <li>Document routing, case category classification.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>E‑commerce & Content</h3>\r\n          <ul>\r\n            <li>Product categorization; return probability.</li>\r\n            <li>CTR prediction; abuse/spam classification.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- PRACTICAL GUARDRAILS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Practice</small>\r\n      <h1>Data quality, metrics, and deployment guardrails</h1>\r\n      <p>Avoid common pitfalls that sink projects.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Labels & Splits</h3>\r\n          <ul>\r\n            <li>Ensure labels are correct; reduce noise (clear definitions).</li>\r\n            <li>Use <strong>time‑based splits</strong> for time series; avoid leakage.</li>\r\n            <li>Track class imbalance; use stratified splits & proper metrics (PR‑AUC, F1).</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Metrics & Thresholds</h3>\r\n          <ul>\r\n            <li>Pick a metric that matches the decision (F1 vs ROC‑AUC, MAE vs MAPE).</li>\r\n            <li>Calibrate probability thresholds for business constraints (precision/recall trade‑off).</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Model Choice</h3>\r\n          <ul>\r\n            <li>Tabular baseline: <strong>GBM/RF</strong>; quick, strong, interpretable.</li>\r\n            <li>High‑dimensional text/image: embeddings or deep nets.</li>\r\n            <li>Always compare to a simple baseline.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Deployment & Monitoring</h3>\r\n          <ul>\r\n            <li>Batch (nightly) vs real‑time (API) depending on latency needs.</li>\r\n            <li>Monitor data drift, performance, and fairness; retrain on schedule.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- QUICK CHECKLIST -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Checklist</small>\r\n      <h1>Ready to use supervised ML? Do this:</h1>\r\n      <p>Minimal, robust path from idea to value.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li><strong>Define the label</strong> and how you’ll use the prediction.</li>\r\n        <li><strong>Assemble data</strong> you’ll have at prediction time; remove leakage.</li>\r\n        <li><strong>Pick metric(s)</strong> that match the decision cost.</li>\r\n        <li><strong>Baseline</strong> (majority/mean); then try RF/GBM; only go deeper if needed.</li>\r\n        <li><strong>Validate correctly</strong> (cross‑val; time split for time series).</li>\r\n        <li><strong>Calibrate & threshold</strong> for business targets.</li>\r\n        <li><strong>Deploy</strong> (batch or API) with monitoring & retraining plan.</li>\r\n      </ol>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">© <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span></div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now=new Date();\r\n  document.getElementById('y').textContent=now.getFullYear();\r\n  document.getElementById('d').textContent=now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "7dd72567-1b2a-4b7e-901d-339050a86d8a"
    },
    {
      "kind": "article",
      "order": 7,
      "title": "Machine Learning — Conclusion (Supervised & Unsupervised)",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Machine Learning — Conclusion (Supervised & Unsupervised)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n*{box-sizing:border-box;word-wrap:break-word;overflow-wrap:break-word}\r\nbody{font:16px/1.55 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;color:#555;margin:0;background:#fff}\r\na{color:#000;text-decoration:underline}\r\ncode,pre{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace}\r\n\r\n/* === Page wrap === */\r\n.wrap{max-width:1080px;margin:0 auto;padding:18px}\r\n\r\n/* === Card container === */\r\n.section-card{\r\n  border:1px solid #EBEBEB;border-radius:14px;overflow:hidden;\r\n  box-shadow:0 1px 2px rgba(0,0,0,.04);margin-bottom:24px;background:#ffffff\r\n}\r\n\r\n/* === Banner / header (dark gradient → white text) === */\r\n.section-card .banner{\r\n  background:linear-gradient(120deg,#555555,#000000);\r\n  color:#FFFFFF;padding:18px 20px\r\n}\r\n.section-card .banner small{font-size:12px;letter-spacing:.08em;opacity:.9;text-transform:uppercase;color:#FFFFFF}\r\n.section-card .banner h1{margin:6px 0 4px;font-size:26px;line-height:1.2;color:#FFFFFF}\r\n.section-card .banner p{margin:0;opacity:.95;color:#FFFFFF}\r\n\r\n/* === Body === */\r\n.section-card .body{padding:20px}\r\n.section-card p,.section-card li{font-size:16px;margin-top:0;color:#555}\r\n\r\n/* === Pills === */\r\n.pill{display:inline-block;padding:4px 10px;border:1px solid #A3A3A3;border-radius:999px;background:#BDBDBD;color:#000;font-size:12px;font-weight:700}\r\n\r\n/* === Grids & boxes (horizontal, no overflow) === */\r\n.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:14px}\r\n.box{border:1px solid #EBEBEB;border-radius:10px;background:#fff;padding:14px}\r\n.box h3{margin:0 0 8px;color:#000;font-size:18px}\r\n\r\n/* === Tables === */\r\n.table-wrap{overflow-x:auto}\r\ntable{width:100%;border-collapse:collapse;min-width:760px}\r\nth,td{border:1px solid #EBEBEB;padding:10px;text-align:left;vertical-align:top}\r\nth{background:#BDBDBD;color:#000}\r\n\r\n/* === Call-to-action buttons === */\r\n.cta-row{display:flex;gap:10px;margin-top:18px;flex-wrap:wrap}\r\n.cta-row a{text-decoration:none;padding:10px 16px;border-radius:8px;font-weight:700}\r\n.cta-primary{border:1px solid #000;background:#000;color:#EBEBEB}\r\n.cta-secondary{border:1px solid #000;color:#000;background:#ffffff}\r\n\r\n/* === Footer === */\r\n.footer-note{font-size:13px;color:#777;text-align:center;margin:30px 0 10px}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- CONCLUSION OVERVIEW -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Module • Machine Learning</small>\r\n      <h1>Conclusion — Supervised & Unsupervised, Together</h1>\r\n      <p>From raw data to decisions: what you learned, when to use each method, and what’s next.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        In this module you learned two complementary approaches:\r\n        <span class=\"pill\">Unsupervised</span> (discover structure without labels)\r\n        and <span class=\"pill\">Supervised</span> (predict a known target).\r\n        Used together, they move you from <em>exploration</em> → <em>explanation</em> → <em>action</em>.\r\n      </p>\r\n      <div class=\"grid\" style=\"margin-top:8px\">\r\n        <div class=\"box\">\r\n          <h3>Unsupervised → Explore</h3>\r\n          <ul>\r\n            <li>Reveal groups, segments, and anomalies.</li>\r\n            <li>Reduce dimensionality to what really matters.</li>\r\n            <li>Build intuition and create better features for supervised models.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Supervised → Predict</h3>\r\n          <ul>\r\n            <li>Forecast numbers (regression) and classify outcomes (classification).</li>\r\n            <li>Turn insights into deployable decisions with clear metrics.</li>\r\n            <li>Integrate into apps, dashboards, and operations.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Together → Operate</h3>\r\n          <ul>\r\n            <li>Use clustering to define segments, then predict segment behavior.</li>\r\n            <li>Automate monitoring & retraining with tracked metrics.</li>\r\n            <li>Close the loop with visualizations and stakeholder feedback.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHEN TO USE WHAT (SIDE-BY-SIDE) -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Decisions</small>\r\n      <h1>When to choose unsupervised vs. supervised</h1>\r\n      <p>Quick comparison to guide your next project.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"table-wrap\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Dimension</th>\r\n              <th>Unsupervised Learning</th>\r\n              <th>Supervised Learning</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>Label requirement</td>\r\n              <td>No labels needed; discover structure in raw data.</td>\r\n              <td>Requires labeled outcomes (ground truth) to learn mapping.</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Primary goal</td>\r\n              <td>Grouping, compression, anomaly surfacing, hypothesis generation.</td>\r\n              <td>Accurate predictions for numbers or classes; decision support.</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Typical outputs</td>\r\n              <td>Cluster IDs, embeddings, distance scores, outlier flags.</td>\r\n              <td>Predicted values/probabilities, ranked lists, forecasts.</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Great for</td>\r\n              <td>Customer segmentation, sensor pattern mining, pre‑label analysis.</td>\r\n              <td>Demand forecasting, risk scoring, routing, quality detection.</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Common methods</td>\r\n              <td>K‑Means, DBSCAN, Agglomerative, PCA/UMAP, GMM.</td>\r\n              <td>Linear/Logistic, Random Forest, Gradient Boosting, HGB, deep nets.</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Key metrics</td>\r\n              <td>Silhouette, DB index, stability/consistency, business interpretability.</td>\r\n              <td>MAE/RMSE/MAPE/R² for regression; Accuracy/F1/ROC‑AUC/PR‑AUC for classification.</td>\r\n            </tr>\r\n            <tr>\r\n              <td>How they connect</td>\r\n              <td>Creates features/segments that improve supervised performance.</td>\r\n              <td>Validates and operationalizes unsupervised discoveries.</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- QUALITY & OPERATIONS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Production mindset</small>\r\n      <h1>Quality, safety, and sustainability</h1>\r\n      <p>Guardrails that keep models useful after launch.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Data discipline</h3>\r\n          <ul>\r\n            <li>Prevent leakage (only use data available at decision time).</li>\r\n            <li>Track versions of data, features, and models.</li>\r\n            <li>Document label definitions and edge cases.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Evaluation</h3>\r\n          <ul>\r\n            <li>Choose metrics tied to decisions & costs.</li>\r\n            <li>Use time‑aware splits for time series; stratify for imbalanced classes.</li>\r\n            <li>Benchmark against simple baselines before “fancy.”</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Monitoring</h3>\r\n          <ul>\r\n            <li>Watch drift (data & labels), performance decay, and latency.</li>\r\n            <li>Schedule retraining; keep explainability artifacts updated.</li>\r\n            <li>Log predictions & decisions for audit and improvement.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Communication</h3>\r\n          <ul>\r\n            <li>Visualize results (calendars, trends, segments) for stakeholders.</li>\r\n            <li>Publish clear “how to act” rules for each prediction range.</li>\r\n            <li>Close the loop with feedback into data and labels.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHAT WE DELIBERATELY DID NOT COVER -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Scope</small>\r\n      <h1>Where are LLMs?</h1>\r\n      <p>Reserved for its own module to give it proper depth.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        We <strong>intentionally did not cover LLMs</strong> (Large Language Models) here. They deserve a dedicated module\r\n        where we’ll focus on <em>retrieval‑augmented generation (RAG)</em>, <em>prompt engineering</em>, <em>evaluation</em>,\r\n        and how LLMs can accelerate both supervised and unsupervised workflows (e.g., semi‑automatic labeling, feature\r\n        extraction from text/images, doc Q&A, agentic pipelines). You’ll get hands‑on with those next.\r\n      </p>\r\n      <p style=\"margin-top:8px\">\r\n        For now, you have a solid foundation: turn raw data into insight with unsupervised methods, then ship\r\n        predictions with supervised models—wrapped in reliable UX and databases.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- NEXT STEPS -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Next steps</small>\r\n      <h1>What you should do now</h1>\r\n      <p>Pick one dataset, one outcome, and push it to production.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li><strong>Choose a problem</strong> with a clear decision (staffing, risk, routing, demand).</li>\r\n        <li><strong>Explore</strong> with clustering/dimensionality reduction; define segments or anomalies.</li>\r\n        <li><strong>Engineer features</strong> (lags/rolls, calendar, segment flags) and train a baseline RF/GBM.</li>\r\n        <li><strong>Validate</strong> with the right metric; compare to simple baselines.</li>\r\n        <li><strong>Ship</strong> via Streamlit UI + your SQL/Neon backend; add monitoring.</li>\r\n        <li><strong>Iterate</strong> (small, continuous improvements: data, features, thresholds).</li>\r\n      </ol>\r\n      <div class=\"cta-row\">\r\n        <a class=\"cta-primary\" href=\"#llm-module\">Go to LLM Module (Next)</a>\r\n        <a class=\"cta-secondary\" href=\"#index\">Back to Module Index</a>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">© <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span></div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now=new Date();\r\n  document.getElementById('y').textContent=now.getFullYear();\r\n  document.getElementById('d').textContent=now.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "24be1952-087c-496b-ae09-fbc8278156ad"
    }
  ]
}