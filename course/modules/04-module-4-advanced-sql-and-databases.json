{
  "order": 4,
  "title": "Module 4: Advanced SQL and Databases",
  "lessons": [
    {
      "kind": "article",
      "order": 1,
      "title": "Data • SQL, Databases, and Storage Basics",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Data • SQL, Databases, and Storage Basics</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF;\r\n  padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Media row (cover + caption) === */\r\n.media-row { display: flex; gap: 18px; align-items: center; flex-wrap: wrap; }\r\n.media-row .media { flex: 1 1 280px; min-width: 260px; }\r\n.media-row .caption { flex: 2 1 340px; min-width: 260px; }\r\n\r\n/* === Horizontal compare row === */\r\n.compare-row { display: flex; gap: 14px; flex-wrap: wrap; }\r\n.compare-box {\r\n  flex: 1 1 340px;\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 16px; background: #fff;\r\n}\r\n.compare-box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n.compare-box ul { margin: 8px 0 0 18px; }\r\n\r\n/* === Quick grid (responsive) === */\r\n.quick-grid {\r\n  display: grid; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));\r\n  gap: 14px; margin: 18px 0 0;\r\n}\r\n.quick-grid .box {\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fff;\r\n}\r\n.quick-grid .box h3 { margin: 0 0 6px; font-size: 17px; color: #000; }\r\n\r\n/* === Code block === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #f0f0f0; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Simple SVG diagram container === */\r\n.diagram {\r\n  background: #F6F6F6; border: 1px solid #EBEBEB; border-radius: 10px; padding: 10px;\r\n}\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- HERO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Data</small>\r\n      <h1>SQL, Databases, and Storage Basics</h1>\r\n      <p>Understand how your data flows: from CSVs to databases, locally and in the cloud.</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"media-row\">\r\n        <div class=\"media\">\r\n          <img src=\"https://i.imgur.com/tiU6fGG.png\" alt=\"Data cover showing charts, tables, and analytics\" />\r\n        </div>\r\n        <div class=\"caption\">\r\n          <p><strong>Goal:</strong> Pick the right tools and storage for your data work. SQL gives you reliable querying, databases give you structure and speed, and the right storage choice keeps your work scalable.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHAT IS SQL -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Foundations</small>\r\n      <h1>What is SQL?</h1>\r\n      <p>The language of relational data</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p><strong>SQL</strong> (Structured Query Language) is a standard language used to create, read, update, and delete data in relational databases. It lets you <em>declare what you want</em> (e.g., “give me the average temperature per month”) and the database figures out how to compute it efficiently.</p>\r\n\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <h3>Why we use SQL</h3>\r\n          <ul>\r\n            <li>Powerful filtering, grouping, and joining across multiple tables</li>\r\n            <li>Speed and optimization via indexes and query planners</li>\r\n            <li>Data integrity with types, constraints, and transactions</li>\r\n            <li>Standardized — your skills transfer across many systems</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>A tiny example</h3>\r\n<pre>-- Average daily temp for 2025 by month\r\nSELECT strftime('%Y-%m', Date) AS month,\r\n       AVG(TempC) AS avg_temp\r\nFROM weather\r\nWHERE Date >= '2025-01-01' AND Date < '2026-01-01'\r\nGROUP BY 1\r\nORDER BY 1;</pre>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHAT IS A DB FILE -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Format</small>\r\n      <h1>What is a <code class=\"inline\">.db</code> File?</h1>\r\n      <p>Self‑contained database (often SQLite)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>A <code class=\"inline\">.db</code> file commonly refers to a <strong>SQLite database</strong>: a single file that stores tables, indexes, and metadata together. It supports transactions, constraints, and efficient queries — all without running a separate database server.</p>\r\n\r\n      <div class=\"diagram\" aria-label=\"SQLite db file visual\">\r\n        <svg viewBox=\"0 0 880 140\" width=\"100%\" height=\"140\" role=\"img\" aria-label=\"DB file diagram\">\r\n          <rect x=\"10\" y=\"20\" width=\"180\" height=\"100\" rx=\"10\" fill=\"#EDEDED\" stroke=\"#BDBDBD\"/>\r\n          <text x=\"100\" y=\"45\" text-anchor=\"middle\" font-size=\"14\" fill=\"#333\">weather.db</text>\r\n          <rect x=\"30\" y=\"60\" width=\"140\" height=\"18\" rx=\"4\" fill=\"#CFE8FF\" stroke=\"#8BB9E8\"/>\r\n          <text x=\"100\" y=\"74\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Table: weather</text>\r\n          <rect x=\"30\" y=\"86\" width=\"140\" height=\"18\" rx=\"4\" fill=\"#FFE0B2\" stroke=\"#E0AC6A\"/>\r\n          <text x=\"100\" y=\"100\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Index: Date</text>\r\n\r\n          <text x=\"450\" y=\"75\" text-anchor=\"middle\" font-size=\"14\" fill=\"#555\">SQL Engine inside a file → fast queries, ACID, indexes</text>\r\n\r\n          <line x1=\"200\" y1=\"70\" x2=\"700\" y2=\"70\" stroke=\"#999\" stroke-width=\"2\" marker-end=\"url(#arrow)\"/>\r\n          <defs>\r\n            <marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"6\" refY=\"3\" orient=\"auto\" markerUnits=\"strokeWidth\">\r\n              <path d=\"M0,0 L0,6 L6,3 z\" fill=\"#999\"></path>\r\n            </marker>\r\n          </defs>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DB vs CSV -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Comparison</small>\r\n      <h1>Database (<code class=\"inline\">.db</code>) vs CSV</h1>\r\n      <p>Pick the right tool for the job</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"compare-row\">\r\n        <div class=\"compare-box\">\r\n          <h3>Database (.db)</h3>\r\n          <ul>\r\n            <li>Multiple tables with relationships (joins)</li>\r\n            <li>Typed columns, constraints, transactions</li>\r\n            <li>Indexes → fast queries on large data</li>\r\n            <li>Concurrent access is safer</li>\r\n            <li>Great for production apps & analytics</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"compare-box\">\r\n          <h3>CSV (Comma-Separated Values)</h3>\r\n          <ul>\r\n            <li>Simple, universal, human-readable</li>\r\n            <li>One table per file; no schema enforcement</li>\r\n            <li>No indexing → slower queries at scale</li>\r\n            <li>Easy to share but prone to format drift</li>\r\n            <li>Great for exchange and quick inspection</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div class=\"quick-grid\" style=\"margin-top:14px;\">\r\n        <div class=\"box\">\r\n          <h3>When to use a DB</h3>\r\n          <p>When you need speed, joins, data integrity, or multiple users/apps querying the same source.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>When to use CSV</h3>\r\n          <p>When sharing a simple dataset, importing/exporting between tools, or prototyping quickly.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- WHERE TO STORE -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Storage</small>\r\n      <h1>Where Do We Store Our DB File?</h1>\r\n      <p>Local, server, and cloud options</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <h3>Local (Laptop/Codespace)</h3>\r\n          <ul>\r\n            <li><strong>Pros:</strong> Fast dev loop, offline, easy testing</li>\r\n            <li><strong>Cons:</strong> Single-user, harder to share/backup</li>\r\n            <li><strong>Good for:</strong> Prototypes, notebooks, small apps</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Server (On‑Prem/VPS)</h3>\r\n          <ul>\r\n            <li><strong>Pros:</strong> Centralized, controlled environment</li>\r\n            <li><strong>Cons:</strong> You maintain scaling, backups, security</li>\r\n            <li><strong>Good for:</strong> Internal tools, small teams</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Cloud‑Managed DB</h3>\r\n          <ul>\r\n            <li><strong>Pros:</strong> Scalability, backups, HA built‑in</li>\r\n            <li><strong>Cons:</strong> Cost, network latency, vendor lock‑in</li>\r\n            <li><strong>Good for:</strong> Production, multi‑team analytics</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Embedded / Edge</h3>\r\n          <ul>\r\n            <li><strong>Pros:</strong> Tiny footprint, offline first</li>\r\n            <li><strong>Cons:</strong> Limited concurrency, device constraints</li>\r\n            <li><strong>Good for:</strong> Mobile, IoT, field data‑logging</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"diagram\" style=\"margin-top:16px\" aria-label=\"Data flow diagram\">\r\n        <svg viewBox=\"0 0 980 140\" width=\"100%\" height=\"140\" role=\"img\" aria-label=\"Data pipeline flow\">\r\n          <!-- Sources -->\r\n          <rect x=\"10\" y=\"32\" width=\"150\" height=\"76\" rx=\"10\" fill=\"#E6F7E6\" stroke=\"#A8D5A8\"/>\r\n          <text x=\"85\" y=\"58\" text-anchor=\"middle\" font-size=\"13\" fill=\"#333\">Sources</text>\r\n          <text x=\"85\" y=\"78\" text-anchor=\"middle\" font-size=\"12\" fill=\"#555\">CSV • APIs • Sensors</text>\r\n          <!-- Arrow -->\r\n          <line x1=\"170\" y1=\"70\" x2=\"260\" y2=\"70\" stroke=\"#999\" stroke-width=\"2\" marker-end=\"url(#arrow)\"/>\r\n          <!-- Staging -->\r\n          <rect x=\"260\" y=\"32\" width=\"160\" height=\"76\" rx=\"10\" fill=\"#FFF3CD\" stroke=\"#E0C36C\"/>\r\n          <text x=\"340\" y=\"58\" text-anchor=\"middle\" font-size=\"13\" fill=\"#333\">Staging</text>\r\n          <text x=\"340\" y=\"78\" text-anchor=\"middle\" font-size=\"12\" fill=\"#555\">Clean/Validate</text>\r\n          <!-- Arrow -->\r\n          <line x1=\"420\" y1=\"70\" x2=\"520\" y2=\"70\" stroke=\"#999\" stroke-width=\"2\" marker-end=\"url(#arrow)\"/>\r\n          <!-- DB -->\r\n          <rect x=\"520\" y=\"22\" width=\"170\" height=\"96\" rx=\"10\" fill=\"#CFE8FF\" stroke=\"#8BB9E8\"/>\r\n          <text x=\"605\" y=\"48\" text-anchor=\"middle\" font-size=\"13\" fill=\"#333\">Database</text>\r\n          <text x=\"605\" y=\"68\" text-anchor=\"middle\" font-size=\"12\" fill=\"#555\">SQLite / Postgres / MySQL</text>\r\n          <text x=\"605\" y=\"86\" text-anchor=\"middle\" font-size=\"12\" fill=\"#555\">Tables + Indexes</text>\r\n          <!-- Arrow -->\r\n          <line x1=\"690\" y1=\"70\" x2=\"780\" y2=\"70\" stroke=\"#999\" stroke-width=\"2\" marker-end=\"url(#arrow)\"/>\r\n          <!-- Apps -->\r\n          <rect x=\"780\" y=\"32\" width=\"190\" height=\"76\" rx=\"10\" fill=\"#EDE7F6\" stroke=\"#C5B6E3\"/>\r\n          <text x=\"875\" y=\"58\" text-anchor=\"middle\" font-size=\"13\" fill=\"#333\">Apps & Analytics</text>\r\n          <text x=\"875\" y=\"78\" text-anchor=\"middle\" font-size=\"12\" fill=\"#555\">Dashboards • APIs • AI</text>\r\n\r\n          <defs>\r\n            <marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"6\" refY=\"3\" orient=\"auto\" markerUnits=\"strokeWidth\">\r\n              <path d=\"M0,0 L0,6 L6,3 z\" fill=\"#999\"></path>\r\n            </marker>\r\n          </defs>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- GETTING STARTED -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Hands‑On</small>\r\n      <h1>Getting Started (SQLite)</h1>\r\n      <p>Create a DB, import a CSV, and query it</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <h3>Create a database and a table (SQL)</h3>\r\n<pre>-- From a DB client or sqlite3 shell\r\nCREATE TABLE weather (\r\n  Date      TEXT,\r\n  TempC     REAL,\r\n  Rain_mm   REAL,\r\n  Wind_kmh  REAL\r\n);\r\n\r\n-- Insert a row\r\nINSERT INTO weather (Date, TempC, Rain_mm, Wind_kmh)\r\nVALUES ('2025-01-01', 14.2, 0.8, 11);</pre>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Load a CSV with Python</h3>\r\n<pre>import sqlite3, pandas as pd\r\n\r\ncon = sqlite3.connect(\"weather.db\")\r\ndf = pd.read_csv(\"data/weather.csv\")\r\ndf.to_sql(\"weather\", con, if_exists=\"append\", index=False)\r\n\r\nq = \"SELECT COUNT(*) FROM weather\"\r\nprint(pd.read_sql(q, con))</pre>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "acc5ab35-e406-4586-82a0-6e3a08c5c658"
    },
    {
      "kind": "article",
      "order": 2,
      "title": "Numerical Data • Discrete vs Continuous",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Numerical Data • Discrete vs Continuous (with Examples)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB;\r\n  border-radius: 14px;\r\n  overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04);\r\n  margin-bottom: 24px;\r\n  background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF;\r\n  padding: 18px 20px;\r\n}\r\n.section-card .banner small {\r\n  font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF;\r\n}\r\n.section-card .banner h1 {\r\n  margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF;\r\n}\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Media row === */\r\n.media-row { display: flex; gap: 18px; align-items: center; flex-wrap: wrap; }\r\n.media-row .media { flex: 1 1 320px; min-width: 260px; }\r\n.media-row .caption { flex: 2 1 360px; min-width: 260px; }\r\n\r\n/* === Quick grid === */\r\n.quick-grid {\r\n  display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\r\n  gap: 14px; margin: 18px 0 0;\r\n}\r\n.quick-grid .box {\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fff;\r\n}\r\n.quick-grid .box h3 { margin: 0 0 6px; font-size: 17px; color: #000; }\r\n\r\n/* === Compare row === */\r\n.compare-row { display: flex; gap: 14px; flex-wrap: wrap; }\r\n.compare-box {\r\n  flex: 1 1 320px;\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 16px; background: #fff;\r\n}\r\n.compare-box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n.compare-box ul { margin: 8px 0 0 18px; }\r\n\r\n/* === Tables === */\r\n.table-wrap { overflow-x: auto; margin-top: 10px; }\r\ntable { border-collapse: collapse; width: 100%; min-width: 520px; }\r\nth, td { border: 1px solid #EBEBEB; padding: 10px 12px; text-align: left; }\r\nth { background: #F6F6F6; color: #333; font-weight: 700; }\r\ntbody tr:nth-child(odd) { background: #FAFAFA; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- HERO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Data</small>\r\n      <h1>Numerical Data: Discrete vs Continuous</h1>\r\n      <p>What it is, how it differs, and practical examples with tables</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"media-row\">\r\n        <div class=\"media\">\r\n          <!-- You can replace the cover below with any relevant image if you like -->\r\n          <img src=\"https://i.imgur.com/tiU6fGG.png\" alt=\"Cover showing charts and numeric data visuals\" />\r\n        </div>\r\n        <div class=\"caption\">\r\n          <p><strong>Numerical data</strong> (also called quantitative data) represents quantities you can count or measure. It splits into two types:</p>\r\n          <div class=\"quick-grid\">\r\n            <div class=\"box\">\r\n              <h3>Discrete</h3>\r\n              <p>Counted, whole-number values (e.g., number of items, visits, defects). No fractions between adjacent values.</p>\r\n            </div>\r\n            <div class=\"box\">\r\n              <h3>Continuous</h3>\r\n              <p>Measured values on a scale (e.g., revenue, temperature, time). Can take any value within a range, including decimals.</p>\r\n            </div>\r\n          </div>\r\n          <p style=\"margin-top:12px;\"><strong>Examples:</strong> units sold (discrete), customers per day (discrete), order value (continuous), temperature (continuous), sensor readings (continuous).</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- DISCRETE DATA -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Type</small>\r\n      <h1>Discrete Data</h1>\r\n      <p>Counts: integers from counting events or items</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"media-row\" style=\"margin-bottom:10px;\">\r\n        <div class=\"media\">\r\n          <img src=\"https://i.imgur.com/BMMO4vX.png\" alt=\"Discrete data concept image with separated columns/bars\" />\r\n        </div>\r\n        <div class=\"caption\">\r\n          <p><strong>Discrete variables</strong> arise from counting. They jump between whole numbers: 0, 1, 2, 3… with no values in between.</p>\r\n          <div class=\"compare-row\">\r\n            <div class=\"compare-box\">\r\n              <h3>Common use cases</h3>\r\n              <ul>\r\n                <li>Website sign‑ups per day</li>\r\n                <li>Defects per batch</li>\r\n                <li>Support tickets per hour</li>\r\n                <li>Visits per customer</li>\r\n              </ul>\r\n            </div>\r\n            <div class=\"compare-box\">\r\n              <h3>Typical charts</h3>\r\n              <ul>\r\n                <li>Bar charts (counts per category)</li>\r\n                <li>Column charts by time period</li>\r\n                <li>Dot plots for frequency</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Discrete tables -->\r\n      <h3 style=\"margin-top:8px; color:#000;\">Table 1 — Website Sign‑ups (Daily)</h3>\r\n      <div class=\"table-wrap\">\r\n        <table aria-label=\"Website Sign-ups per day\">\r\n          <thead>\r\n            <tr><th>Date</th><th>SignUps</th><th>Marketing Channel</th></tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr><td>2025‑06‑01</td><td>42</td><td>Organic</td></tr>\r\n            <tr><td>2025‑06‑02</td><td>35</td><td>Paid Ads</td></tr>\r\n            <tr><td>2025‑06‑03</td><td>51</td><td>Referral</td></tr>\r\n            <tr><td>2025‑06‑04</td><td>47</td><td>Organic</td></tr>\r\n            <tr><td>2025‑06‑05</td><td>38</td><td>Email</td></tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <h3 style=\"margin-top:18px; color:#000;\">Table 2 — Defects per Batch (Manufacturing)</h3>\r\n      <div class=\"table-wrap\">\r\n        <table aria-label=\"Defects per batch\">\r\n          <thead>\r\n            <tr><th>BatchID</th><th>UnitsProduced</th><th>DefectCount</th><th>Line</th></tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr><td>B‑3101</td><td>1,200</td><td>7</td><td>L1</td></tr>\r\n            <tr><td>B‑3102</td><td>1,180</td><td>4</td><td>L1</td></tr>\r\n            <tr><td>B‑3103</td><td>1,260</td><td>9</td><td>L2</td></tr>\r\n            <tr><td>B‑3104</td><td>1,240</td><td>5</td><td>L2</td></tr>\r\n            <tr><td>B‑3105</td><td>1,300</td><td>6</td><td>L3</td></tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- CONTINUOUS DATA -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Type</small>\r\n      <h1>Continuous Data</h1>\r\n      <p>Measurements: values on a continuous scale, including decimals</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"media-row\" style=\"margin-bottom:10px;\">\r\n        <div class=\"media\">\r\n          <img src=\"https://i.imgur.com/OB7Cxkq.png\" alt=\"Continuous data concept image with smooth curve/line\" />\r\n        </div>\r\n        <div class=\"caption\">\r\n          <p><strong>Continuous variables</strong> come from measurement (time, temperature, revenue). They can take any value within an interval (e.g., 21.37°C, $152.49).</p>\r\n          <div class=\"compare-row\">\r\n            <div class=\"compare-box\">\r\n              <h3>Common use cases</h3>\r\n              <ul>\r\n                <li>Sales amounts and order values</li>\r\n                <li>Sensor readings (temperature, humidity, vibration)</li>\r\n                <li>Financial metrics (prices, returns)</li>\r\n                <li>Physical measurements (length, weight)</li>\r\n              </ul>\r\n            </div>\r\n            <div class=\"compare-box\">\r\n              <h3>Typical charts</h3>\r\n              <ul>\r\n                <li>Line charts over time (time series)</li>\r\n                <li>Histograms and KDE for distributions</li>\r\n                <li>Scatter plots for relationships</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Continuous tables -->\r\n      <h3 style=\"margin-top:8px; color:#000;\">Table 1 — Sales Data (Sample)</h3>\r\n      <div class=\"table-wrap\">\r\n        <table aria-label=\"Sales data table with continuous values\">\r\n          <thead>\r\n            <tr><th>Date</th><th>Product</th><th>RevenueUSD</th><th>DiscountPct</th></tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr><td>2025‑07‑01</td><td>GeoMap Pro</td><td>1,543.20</td><td>5.0</td></tr>\r\n            <tr><td>2025‑07‑02</td><td>ThermalX Suite</td><td>2,118.75</td><td>7.5</td></tr>\r\n            <tr><td>2025‑07‑03</td><td>HydroModeler</td><td>987.40</td><td>0.0</td></tr>\r\n            <tr><td>2025‑07‑04</td><td>ClimateLab</td><td>1,302.10</td><td>2.5</td></tr>\r\n            <tr><td>2025‑07‑05</td><td>Subsurface AI</td><td>3,452.95</td><td>10.0</td></tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <h3 style=\"margin-top:18px; color:#000;\">Table 2 — Sensor Data (Sample)</h3>\r\n      <div class=\"table-wrap\">\r\n        <table aria-label=\"Environmental sensor readings\">\r\n          <thead>\r\n            <tr><th>Timestamp</th><th>SensorID</th><th>TempC</th><th>HumidityPct</th><th>Vibration_g</th></tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr><td>2025‑07‑01 09:00</td><td>S‑101</td><td>21.6</td><td>44.2</td><td>0.015</td></tr>\r\n            <tr><td>2025‑07‑01 12:00</td><td>S‑101</td><td>24.1</td><td>40.8</td><td>0.018</td></tr>\r\n            <tr><td>2025‑07‑01 15:00</td><td>S‑101</td><td>25.3</td><td>38.9</td><td>0.021</td></tr>\r\n            <tr><td>2025‑07‑01 18:00</td><td>S‑101</td><td>23.4</td><td>42.7</td><td>0.016</td></tr>\r\n            <tr><td>2025‑07‑01 21:00</td><td>S‑101</td><td>20.9</td><td>47.5</td><td>0.014</td></tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- QUICK RECAP -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Recap</small>\r\n      <h1>Choosing the Right Treatment</h1>\r\n      <p>Match the analysis and charts to the data type</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <h3>Discrete</h3>\r\n          <p>Counts and integers. Use <strong>bar/column charts</strong>, frequencies, and Poisson/Binomial models.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Continuous</h3>\r\n          <p>Measured values with decimals. Use <strong>line charts, histograms, KDE</strong>, regression, time‑series models.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "9501c4bb-7612-4895-884f-6399282e4442"
    },
    {
      "kind": "article",
      "order": 3,
      "title": "Other Data Types • Geospatial, Text, Image, Synthetic",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Other Data Types • Geospatial, Text, Image, Synthetic</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF;\r\n  padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Media row === */\r\n.media-row { display: flex; gap: 18px; align-items: center; flex-wrap: wrap; }\r\n.media-row .media { flex: 1 1 340px; min-width: 280px; }\r\n.media-row .caption { flex: 2 1 420px; min-width: 280px; }\r\n\r\n/* === Quick grid === */\r\n.quick-grid {\r\n  display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\r\n  gap: 14px; margin: 18px 0 0;\r\n}\r\n.quick-grid .box {\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fff;\r\n}\r\n.quick-grid .box h3 { margin: 0 0 6px; font-size: 17px; color: #000; }\r\n\r\n/* === Compare row === */\r\n.compare-row { display: flex; gap: 14px; flex-wrap: wrap; }\r\n.compare-box {\r\n  flex: 1 1 320px;\r\n  border: 1px solid #EBEBEB; border-radius: 10px; padding: 16px; background: #fff;\r\n}\r\n.compare-box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n.compare-box ul { margin: 8px 0 0 18px; }\r\n\r\n/* === Tables === */\r\n.table-wrap { overflow-x: auto; margin-top: 10px; }\r\ntable { border-collapse: collapse; width: 100%; min-width: 560px; }\r\nth, td { border: 1px solid #EBEBEB; padding: 10px 12px; text-align: left; }\r\nth { background: #F6F6F6; color: #333; font-weight: 700; }\r\ntbody tr:nth-child(odd) { background: #FAFAFA; }\r\n\r\n/* === Code block === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #f0f0f0; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Simple SVG diagram container === */\r\n.diagram {\r\n  background: #F6F6F6; border: 1px solid #EBEBEB; border-radius: 10px; padding: 10px;\r\n}\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- HERO -->\r\n  <section class=\"section-card\">\r\n    <div class=\"banner\">\r\n      <small>Data</small>\r\n      <h1>Other Data Types</h1>\r\n      <p>Geospatial • Text • Image • Synthetic</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"media-row\">\r\n        <div class=\"media\">\r\n          <img src=\"https://i.imgur.com/RitiTk3.png\" alt=\"Cover collage of geospatial maps, text, and image data\" />\r\n        </div>\r\n        <div class=\"caption\">\r\n          <p>Beyond tables and CSVs, modern projects use specialized data types. Below are concise definitions, visuals, and practical examples so you can pick the right tools and workflows.</p>\r\n          <div class=\"quick-grid\">\r\n            <div class=\"box\"><h3>Geospatial</h3><p>Data tied to locations on Earth (coordinates, polygons, rasters).</p></div>\r\n            <div class=\"box\"><h3>Text</h3><p>Unstructured language (docs, chats, logs) requiring NLP/LLM tools.</p></div>\r\n            <div class=\"box\"><h3>Image</h3><p>Pixel-based data for classification, detection, segmentation.</p></div>\r\n            <div class=\"box\"><h3>Synthetic</h3><p>Artificially generated data to augment training or preserve privacy.</p></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- GEOSPATIAL DATA -->\r\n  <section class=\"section-card\" id=\"geospatial\">\r\n    <div class=\"banner\">\r\n      <small>Geospatial</small>\r\n      <h1>What is Geospatial Data?</h1>\r\n      <p>Data with a location: points, lines, polygons, rasters</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p><strong>Geospatial data</strong> describes features on Earth using coordinates and projections. It comes in two main forms:</p>\r\n      <div class=\"compare-row\">\r\n        <div class=\"compare-box\">\r\n          <h3>Vector</h3>\r\n          <ul>\r\n            <li>Points (wells, sensors), lines (roads, rivers), polygons (fields, basins)</li>\r\n            <li>Formats: GeoJSON, Shapefile, GPKG</li>\r\n            <li>Great for boundaries, networks, labeled assets</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"compare-box\">\r\n          <h3>Raster</h3>\r\n          <ul>\r\n            <li>Gridded surfaces (DEM, NDVI, temperature)</li>\r\n            <li>Formats: GeoTIFF, NetCDF, Cloud‑Optimized GeoTIFF</li>\r\n            <li>Great for continuous phenomena over space</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"diagram\" style=\"margin-top:14px\" aria-label=\"Geospatial layers diagram\">\r\n        <svg viewBox=\"0 0 980 160\" width=\"100%\" height=\"160\" role=\"img\">\r\n          <rect x=\"20\" y=\"20\" width=\"220\" height=\"120\" rx=\"10\" fill=\"#E6F7E6\" stroke=\"#A8D5A8\"/>\r\n          <text x=\"130\" y=\"50\" text-anchor=\"middle\" font-size=\"13\" fill=\"#333\">Layers</text>\r\n          <rect x=\"40\" y=\"70\" width=\"180\" height=\"20\" rx=\"4\" fill=\"#CFE8FF\" stroke=\"#8BB9E8\"/>\r\n          <text x=\"130\" y=\"85\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Polygons (fields)</text>\r\n          <rect x=\"40\" y=\"100\" width=\"180\" height=\"20\" rx=\"4\" fill=\"#FFE0B2\" stroke=\"#E0AC6A\"/>\r\n          <text x=\"130\" y=\"115\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Raster (NDVI)</text>\r\n\r\n          <line x1=\"260\" y1=\"80\" x2=\"460\" y2=\"80\" stroke=\"#999\" stroke-width=\"2\" marker-end=\"url(#arrow)\"/>\r\n          <rect x=\"460\" y=\"40\" width=\"220\" height=\"80\" rx=\"10\" fill=\"#EDE7F6\" stroke=\"#C5B6E3\"/>\r\n          <text x=\"570\" y=\"70\" text-anchor=\"middle\" font-size=\"13\" fill=\"#333\">Spatial Join / Analysis</text>\r\n\r\n          <line x1=\"680\" y1=\"80\" x2=\"940\" y2=\"80\" stroke=\"#999\" stroke-width=\"2\" marker-end=\"url(#arrow)\"/>\r\n          <rect x=\"820\" y=\"30\" width=\"140\" height=\"100\" rx=\"10\" fill=\"#FFF3CD\" stroke=\"#E0C36C\"/>\r\n          <text x=\"890\" y=\"60\" text-anchor=\"middle\" font-size=\"13\" fill=\"#333\">Map</text>\r\n          <text x=\"890\" y=\"90\" text-anchor=\"middle\" font-size=\"12\" fill=\"#555\">Dashboard/Report</text>\r\n\r\n          <defs>\r\n            <marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"6\" refY=\"3\" orient=\"auto\" markerUnits=\"strokeWidth\">\r\n              <path d=\"M0,0 L0,6 L6,3 z\" fill=\"#999\"></path>\r\n            </marker>\r\n          </defs>\r\n        </svg>\r\n      </div>\r\n\r\n      <div class=\"quick-grid\" style=\"margin-top:16px;\">\r\n        <div class=\"box\">\r\n          <h3>Google Earth Engine</h3>\r\n          <p><strong>GEE</strong> is a cloud platform for planetary‑scale analysis of satellite imagery and geospatial datasets. It hosts catalogs like Landsat and Sentinel and provides JavaScript and Python APIs for time‑series processing, classification, and visualization — without downloading massive rasters.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Typical Tools</h3>\r\n          <p>GIS (QGIS/ArcGIS), Python (GeoPandas, rasterio, shapely, GDAL), web maps (Leaflet).</p>\r\n        </div>\r\n      </div>\r\n\r\n<pre># Example: quick vector load and summary (Python)\r\nimport geopandas as gpd\r\nv = gpd.read_file(\"data/fields.geojson\")  # polygons\r\nprint(v.crs, len(v), v.head(2))</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- TEXT DATA -->\r\n  <section class=\"section-card\" id=\"text\">\r\n    <div class=\"banner\">\r\n      <small>Text</small>\r\n      <h1>What is Text Data?</h1>\r\n      <p>Unstructured language from documents, chats, logs</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p><strong>Text data</strong> consists of words, sentences, and paragraphs — rich in meaning but unstructured. To analyze it, we apply <strong>NLP</strong> (tokenization, embeddings, classification, extraction).</p>\r\n\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <h3>Labeling in Text</h3>\r\n          <p><em>Labeling</em> (annotation) assigns tags to spans or documents: topic, sentiment, intent, or entities (names, places, chemicals). Labeled sets train or evaluate models.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Generative AI APIs</h3>\r\n          <p>LLM‑based APIs help summarize, classify, extract entities, and answer questions. They accelerate prototyping and can work zero/few‑shot — still pair with guardrails, evals, and human review.</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"compare-row\" style=\"margin-top:10px;\">\r\n        <div class=\"compare-box\">\r\n          <h3>Applications</h3>\r\n          <ul>\r\n            <li>Chatbots & assistants (support, analytics)</li>\r\n            <li>Summarization of reports, emails, tickets</li>\r\n            <li>Semantic search & RAG over internal documents</li>\r\n            <li>Compliance screening & entity extraction</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"compare-box\">\r\n          <h3>Data Formats</h3>\r\n          <ul>\r\n            <li>CSV/JSONL (one text per row)</li>\r\n            <li>Markdown/HTML/PDF (convert to text)</li>\r\n            <li>Embeddings stored in DB/vector stores</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n<pre># Example: tiny labeling schema (JSONL)\r\n{\"text\":\"Pump #7 down for 3 hours\",\"labels\":{\"intent\":\"incident\",\"severity\":\"medium\"}}\r\n{\"text\":\"Need ERT monitoring report by Friday\",\"labels\":{\"intent\":\"request\",\"deadline\":\"Friday\"}}</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- IMAGE DATA -->\r\n  <section class=\"section-card\" id=\"image\">\r\n    <div class=\"banner\">\r\n      <small>Image</small>\r\n      <h1>What is Image Data?</h1>\r\n      <p>Grids of pixels (RGB/Multispectral) used for vision tasks</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p><strong>Image data</strong> is pixel‑based: 2D arrays (grayscale), 3‑channel RGB, or multispectral bands. Common tasks include:</p>\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\"><h3>Classification</h3><p>What is in the image? (e.g., rock sample type)</p></div>\r\n        <div class=\"box\"><h3>Detection</h3><p>Where are the objects? (bounding boxes)</p></div>\r\n        <div class=\"box\"><h3>Segmentation</h3><p>Pixel‑level regions (faults, lithologies, defects)</p></div>\r\n        <div class=\"box\"><h3>Enhancement</h3><p>Denoising, super‑resolution, contrast correction</p></div>\r\n      </div>\r\n\r\n<pre># Example: read & inspect with OpenCV (Python)\r\nimport cv2\r\nimg = cv2.imread(\"data/core_sample.png\")   # HxWxC\r\nh, w = img.shape[:2]\r\nprint(\"Resolution:\", w, \"x\", h)</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- SYNTHETIC DATA -->\r\n  <section class=\"section-card\" id=\"synthetic\">\r\n    <div class=\"banner\">\r\n      <small>Synthetic</small>\r\n      <h1>What is Synthetic (Synthesized) Data?</h1>\r\n      <p>Artificially generated data to augment training or protect privacy</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p><strong>Synthetic data</strong> is generated rather than collected from the real world. It can resemble the statistical properties of real data while controlling privacy and class balance.</p>\r\n\r\n      <div class=\"quick-grid\">\r\n        <div class=\"box\">\r\n          <h3>Why use it?</h3>\r\n          <ul>\r\n            <li><strong>Privacy:</strong> avoid exposing sensitive records</li>\r\n            <li><strong>Balance:</strong> create rare/edge cases for robust models</li>\r\n            <li><strong>Coverage:</strong> simulate conditions hard to capture</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>How it’s made</h3>\r\n          <ul>\r\n            <li>Rule‑based simulators (physics, process models)</li>\r\n            <li>Data augmentation (rotate, crop, noise for images)</li>\r\n            <li>Generative models (e.g., diffusion/GAN‑style) for text/images</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Quality checks</h3>\r\n          <ul>\r\n            <li>Preserve key distributions and correlations</li>\r\n            <li>Protect against leakage of real records</li>\r\n            <li>Evaluate on real‑world validation sets</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n<pre># Example: simple tabular synthesizer (concept)\r\nimport numpy as np, pandas as pd\r\nreal = pd.read_csv(\"data/sales.csv\")[[\"RevenueUSD\",\"DiscountPct\"]]\r\nmu, Sigma = real.mean(), real.cov()\r\nsyn = pd.DataFrame(np.random.multivariate_normal(mu, Sigma, size=500),\r\n                   columns=real.columns)\r\nsyn.clip(lower=0, inplace=True)</pre>\r\n      <p style=\"margin-top:10px;\">Synthetic text and images can be created with generative APIs or local models to expand training corpora (e.g., paraphrases, rare defect images). Always validate downstream performance and ethics.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- CHEAT SHEET -->\r\n  <section class=\"section-card\" id=\"cheatsheet\">\r\n    <div class=\"banner\">\r\n      <small>Cheat Sheet</small>\r\n      <h1>Formats & Tooling at a Glance</h1>\r\n      <p>Pick the right file type and library</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"table-wrap\">\r\n        <table aria-label=\"Formats and tools for different data types\">\r\n          <thead>\r\n            <tr>\r\n              <th>Type</th>\r\n              <th>Common Formats</th>\r\n              <th>Typical Tools</th>\r\n              <th>Typical Uses</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>Geospatial</td>\r\n              <td>GeoJSON, Shapefile, GeoTIFF, NetCDF</td>\r\n              <td>QGIS/ArcGIS, GeoPandas, rasterio, GDAL, Google Earth Engine</td>\r\n              <td>Mapping, land cover, site selection, environmental change</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Text</td>\r\n              <td>TXT, CSV, JSONL, PDF→text</td>\r\n              <td>spaCy, NLTK, Transformers/LLMs, vector DBs</td>\r\n              <td>Chatbots, summarization, search, extraction, compliance</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Image</td>\r\n              <td>PNG, JPEG, TIFF (multi‑band)</td>\r\n              <td>OpenCV, PIL, scikit‑image, vision models</td>\r\n              <td>Classification, detection, segmentation, QA/inspection</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Synthetic</td>\r\n              <td>Same as target domain (tabular/image/text)</td>\r\n              <td>Augmentation libs, simulators, generative models</td>\r\n              <td>Class balance, privacy, rare scenarios, stress tests</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "1395b378-8b7e-4ef3-9cca-7a624801ab20"
    },
    {
      "kind": "article",
      "order": 4,
      "title": "Employee Attendance DB",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Employee Attendance DB • Scenario & Model</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF;\r\n  padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Layout helpers === */\r\n.row { display: flex; gap: 18px; flex-wrap: wrap; align-items: flex-start; }\r\n.col { flex: 1 1 340px; min-width: 280px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Diagram === */\r\n.diagram {\r\n  background: #F6F6F6; border: 1px solid #EBEBEB; border-radius: 10px; padding: 10px;\r\n}\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- HERO / SCENARIO -->\r\n  <section class=\"section-card\" id=\"scenario\">\r\n    <div class=\"banner\">\r\n      <small>Scenario</small>\r\n      <h1>Office Attendance: Check-In / Check-Out Tracking</h1>\r\n      <p>Design a database to record availability and daily attendance</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <img src=\"https://i.imgur.com/abqXEfO.png\" alt=\"Cover showing employees checking in and out system\" style=\"margin-bottom:16px; border-radius:10px;\" />\r\n      <p>\r\n        We have several employees in an office. A system records their <strong>check in</strong> and <strong>check out</strong>.\r\n        Our goal: build a small relational database that securely tracks <em>who</em> checked in/out and <em>when</em>,\r\n        and supports reporting (late arrivals, hours worked, who’s currently in the office, etc.).\r\n      </p>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col box\">\r\n          <h3>Table 1 — employees</h3>\r\n          <ul>\r\n            <li><code class=\"inline\">employee_id</code> (unique code, PK)</li>\r\n            <li><code class=\"inline\">first_name</code>, <code class=\"inline\">last_name</code></li>\r\n            <li><code class=\"inline\">date_of_birth</code>, <code class=\"inline\">gender</code></li>\r\n            <li><code class=\"inline\">phone_number</code>, <code class=\"inline\">email</code></li>\r\n            <li><code class=\"inline\">address</code>, <code class=\"inline\">city</code>, <code class=\"inline\">state / region</code></li>\r\n            <li><code class=\"inline\">department</code>, <code class=\"inline\">job_title</code></li>\r\n            <li><code class=\"inline\">hire_date</code>, <code class=\"inline\">salary</code></li>\r\n            <li><code class=\"inline\">status</code> (active / inactive)</li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div class=\"col box\">\r\n          <h3>Table 2 — attendance_log</h3>\r\n          <ul>\r\n            <li><code class=\"inline\">log_id</code> (PK, unique row ID)</li>\r\n            <li><code class=\"inline\">employee_id</code> (FK → employees.employee_id)</li>\r\n            <li><code class=\"inline\">date</code> (work day, e.g. 2025-09-12)</li>\r\n            <li><code class=\"inline\">check_in_time</code> (timestamp)</li>\r\n            <li><code class=\"inline\">check_out_time</code> (timestamp, nullable)</li>\r\n            <li><code class=\"inline\">status</code> (optional: Present, Absent, Late, On Leave)</li>\r\n            <li><code class=\"inline\">notes</code> (optional)</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:12px;\">\r\n        The common key tying both tables is <strong><code class=\"inline\">employee_id</code></strong>.\r\n        Each attendance row belongs to exactly one employee (1 → many).\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- ER DIAGRAM -->\r\n  <section class=\"section-card\" id=\"diagram\">\r\n    <div class=\"banner\">\r\n      <small>Model</small>\r\n      <h1>Entity-Relationship Overview</h1>\r\n      <p>One employee → many attendance logs</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"diagram\" aria-label=\"ER diagram employees to attendance_log\">\r\n        <svg viewBox=\"0 0 980 240\" width=\"100%\" height=\"240\" role=\"img\">\r\n          <!-- Employees box -->\r\n          <rect x=\"40\" y=\"40\" width=\"360\" height=\"160\" rx=\"10\" fill=\"#EDEDED\" stroke=\"#BDBDBD\"/>\r\n          <text x=\"220\" y=\"65\" text-anchor=\"middle\" font-size=\"16\" fill=\"#333\" font-weight=\"700\">employees</text>\r\n          <text x=\"60\" y=\"95\" font-size=\"13\" fill=\"#333\">employee_id (PK)</text>\r\n          <text x=\"60\" y=\"115\" font-size=\"13\" fill=\"#333\">first_name, last_name, email</text>\r\n          <text x=\"60\" y=\"135\" font-size=\"13\" fill=\"#333\">department, job_title</text>\r\n          <text x=\"60\" y=\"155\" font-size=\"13\" fill=\"#333\">hire_date, status</text>\r\n\r\n          <!-- Attendance box -->\r\n          <rect x=\"580\" y=\"40\" width=\"360\" height=\"160\" rx=\"10\" fill=\"#EDE7F6\" stroke=\"#C5B6E3\"/>\r\n          <text x=\"760\" y=\"65\" text-anchor=\"middle\" font-size=\"16\" fill=\"#333\" font-weight=\"700\">attendance_log</text>\r\n          <text x=\"600\" y=\"95\" font-size=\"13\" fill=\"#333\">log_id (PK)</text>\r\n          <text x=\"600\" y=\"115\" font-size=\"13\" fill=\"#333\">employee_id (FK)</text>\r\n          <text x=\"600\" y=\"135\" font-size=\"13\" fill=\"#333\">date, check_in_time, check_out_time</text>\r\n          <text x=\"600\" y=\"155\" font-size=\"13\" fill=\"#333\">status, notes</text>\r\n\r\n          <!-- Relationship line -->\r\n          <line x1=\"400\" y1=\"120\" x2=\"580\" y2=\"120\" stroke=\"#999\" stroke-width=\"2\" marker-end=\"url(#arrow)\"/>\r\n          <text x=\"490\" y=\"110\" text-anchor=\"middle\" font-size=\"12\" fill=\"#555\">1  →  many</text>\r\n\r\n          <defs>\r\n            <marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"6\" refY=\"3\" orient=\"auto\" markerUnits=\"strokeWidth\">\r\n              <path d=\"M0,0 L0,6 L6,3 z\" fill=\"#999\"></path>\r\n            </marker>\r\n          </defs>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "52199887-2c12-4f34-93e0-b09624bc5ddf"
    },
    {
      "kind": "article",
      "order": 5,
      "title": "Create a DB File",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Create a DB File • Employees & Attendance (SQLite)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1000px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #f0f0f0; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Grid === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fff; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n\r\n/* === Video embed styling === */\r\n.video-container {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n  text-align: center; padding: 20px;\r\n}\r\n\r\n.video-container h2 {\r\n  margin: 0 0 16px; color: #333; font-size: 20px; font-weight: 600;\r\n}\r\n\r\n.video-embed {\r\n  width: 100%; max-width: 1047px; height: auto; aspect-ratio: 1047/473;\r\n  border-radius: 8px; overflow: hidden; margin: 0 auto; display: block;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- VIDEO TUTORIAL -->\r\n  <section class=\"video-container\">\r\n    <h2>Video Tutorial: Create a DB File & View Your SQLite DB</h2>\r\n    <iframe class=\"video-embed\" src=\"https://www.youtube.com/embed/5AtSSKOKsP0\" title=\"Create a DB File & View Your SQLite DB\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n  </section>\r\n\r\n  <!-- PROMPT -->\r\n  <section class=\"section-card\" id=\"prompt\">\r\n    <div class=\"banner\">\r\n      <small>Prompt</small>\r\n      <h1>Create a Database File (SQLite)</h1>\r\n      <p>Use this exact prompt to generate a Python script and save the DB to a specific path</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre>'write a python script to create a db of two tables like below and save it here: /workspaces/portalaiforimpact/db_based\r\n\r\nTable 1 — employees\r\nemployee_id (unique code, PK)\r\nfirst_name, last_name\r\ndate_of_birth, gender\r\nphone_number, email\r\naddress, city, state / region\r\ndepartment, job_title\r\nhire_date, salary\r\nstatus (active / inactive)\r\n\r\nTable 2 — attendance_log\r\nlog_id (PK, unique row ID)\r\nemployee_id (FK → employees.employee_id)\r\ndate (work day, e.g. 2025-09-12)\r\ncheck_in_time (timestamp)\r\ncheck_out_time (timestamp, nullable)\r\nstatus (optional: Present, Absent, Late, On Leave)\r\nnotes (optional)'</pre>\r\n      <p><strong>Why two parts?</strong> The first line specifies the <em>save path</em> inside your Codespace. The table specs are the <em>brainstormed outcome</em> (the schema) you want implemented. Together they produce a runnable script that builds your database file.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- PATH IN CODESPACES -->\r\n  <section class=\"section-card\" id=\"path\">\r\n    <div class=\"banner\">\r\n      <small>Path</small>\r\n      <h1>Where is the DB saved?</h1>\r\n      <p>Working inside GitHub Codespaces</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Folder you created</h3>\r\n          <p>You made a folder in your Codespace and copied its absolute path:\r\n            <code class=\"inline\">/workspaces/portalaiforimpact/db_based</code></p>\r\n          <p>The script will ensure the folder exists and then save the DB file inside it.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Resulting file</h3>\r\n          <p>The SQLite database file will be created as:\r\n            <code class=\"inline\">/workspaces/portalaiforimpact/db_based/employees.db</code></p>\r\n          <p>After running, you can browse it in the VS Code Explorer or via SQLite extensions.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- PYTHON SCRIPT -->\r\n  <section class=\"section-card\" id=\"script\">\r\n    <div class=\"banner\">\r\n      <small>Script</small>\r\n      <h1>Python: Create DB & Two Tables</h1>\r\n      <p>Focus on the SQL logic; minor implementation differences are fine</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre>import os\r\nimport sqlite3\r\n\r\n# Target folder and DB file path (Codespaces)\r\nDB_DIR  = \"/workspaces/portalaiforimpact/db_based\"\r\nDB_FILE = os.path.join(DB_DIR, \"employees.db\")\r\n\r\n# Ensure the folder exists\r\nos.makedirs(DB_DIR, exist_ok=True)\r\n\r\n# Connect (creates file if not exists)\r\nconn = sqlite3.connect(DB_FILE)\r\ncur = conn.cursor()\r\n\r\n# employees table\r\ncur.execute(\"\"\"\r\nCREATE TABLE IF NOT EXISTS employees (\r\n    employee_id      TEXT PRIMARY KEY,\r\n    first_name       TEXT NOT NULL,\r\n    last_name        TEXT NOT NULL,\r\n    date_of_birth    DATE,\r\n    gender           TEXT CHECK (gender IN ('Male','Female','Other')),\r\n    phone_number     TEXT,\r\n    email            TEXT UNIQUE,\r\n    address          TEXT,\r\n    city             TEXT,\r\n    state_region     TEXT,\r\n    department       TEXT,\r\n    job_title        TEXT,\r\n    hire_date        DATE,\r\n    salary           NUMERIC,\r\n    status           TEXT NOT NULL DEFAULT 'active'\r\n                     CHECK (status IN ('active','inactive'))\r\n);\r\n\"\"\")\r\n\r\n# attendance_log table\r\ncur.execute(\"\"\"\r\nCREATE TABLE IF NOT EXISTS attendance_log (\r\n    log_id           INTEGER PRIMARY KEY AUTOINCREMENT,\r\n    employee_id      TEXT NOT NULL,\r\n    date             DATE NOT NULL,\r\n    check_in_time    TIMESTAMP NOT NULL,\r\n    check_out_time   TIMESTAMP,\r\n    status           TEXT CHECK (status IN ('Present','Absent','Late','On Leave')),\r\n    notes            TEXT,\r\n    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)\r\n);\r\n\"\"\")\r\n\r\nconn.commit()\r\nconn.close()\r\nprint(f\"Database created at: {DB_FILE}\")</pre>\r\n      <p><strong>Run it:</strong></p>\r\n<pre>python create_db.py</pre>\r\n      <p>If the script runs without errors, your <code class=\"inline\">employees.db</code> is created at the specified path.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- TABLE SPECS (REFERENCE) -->\r\n  <section class=\"section-card\" id=\"schema\">\r\n    <div class=\"banner\">\r\n      <small>Schema</small>\r\n      <h1>Table Reference (What You Asked For)</h1>\r\n      <p>Kept here for clarity during implementation & review</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Table 1 — employees</h3>\r\n          <ul>\r\n            <li>employee_id (PK, unique code)</li>\r\n            <li>first_name, last_name</li>\r\n            <li>date_of_birth, gender</li>\r\n            <li>phone_number, email</li>\r\n            <li>address, city, state_region</li>\r\n            <li>department, job_title</li>\r\n            <li>hire_date, salary</li>\r\n            <li>status (active/inactive)</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Table 2 — attendance_log</h3>\r\n          <ul>\r\n            <li>log_id (PK, unique row ID, AUTOINCREMENT)</li>\r\n            <li>employee_id (FK → employees.employee_id)</li>\r\n            <li>date (work day, e.g., 2025-09-12)</li>\r\n            <li>check_in_time (timestamp), check_out_time (timestamp, nullable)</li>\r\n            <li>status (Present, Absent, Late, On Leave)</li>\r\n            <li>notes (optional)</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <p style=\"margin-top:10px;\"><strong>SQL logic is the key:</strong> the exact Python structure can vary, but these constraints and relationships must be preserved.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "d610e442-b0ac-4b1c-975a-c5f5ef5a533a"
    },
    {
      "kind": "article",
      "order": 6,
      "title": "View Your SQLite DB",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>View Your SQLite DB • Online Viewer or Streamlit (Codespaces)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1000px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #f0f0f0; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Grid === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fff; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Database</small>\r\n      <h1>Two Easy Ways to View Your DB</h1>\r\n      <p>Online viewer or Streamlit inside your Codespace</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>Your SQLite database is generated on disk, so you won’t “see” it unless you open it with a viewer. Here are two simple options:</p>\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Option 1 — Online Viewer</h3>\r\n          <p>Use a browser tool such as <a href=\"https://sqliteviewer.app/\" target=\"_blank\" rel=\"noopener\">sqliteviewer.app</a> and drag-and-drop your <code class=\"inline\">.db</code> file.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Option 2 — Streamlit (Codespaces)</h3>\r\n          <p>Run a tiny Streamlit app that reads the DB file and shows each table interactively from your code space.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- OPTION 1: ONLINE VIEWER -->\r\n  <section class=\"section-card\" id=\"online\">\r\n    <div class=\"banner\">\r\n      <small>Option 1</small>\r\n      <h1>View Online (sqliteviewer.app)</h1>\r\n      <p>Drag and drop your file to inspect tables</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li>In VS Code (left Explorer) right-click your DB file and choose <em>Reveal in Finder/Explorer</em> (or <em>Download</em> from Codespaces).</li>\r\n        <li>Open <a href=\"https://sqliteviewer.app/\" target=\"_blank\" rel=\"noopener\">sqliteviewer.app</a>.</li>\r\n        <li>Drag <code class=\"inline\">employees.db</code> into the page and browse the tables (<code class=\"inline\">employees</code>, <code class=\"inline\">attendance_log</code>).</li>\r\n      </ol>\r\n      <p><strong>Note:</strong> For sensitive data, prefer local tools or your own Streamlit viewer.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- OPTION 2: STREAMLIT VIEWER -->\r\n  <section class=\"section-card\" id=\"streamlit\">\r\n    <div class=\"banner\">\r\n      <small>Option 2</small>\r\n      <h1>View in Streamlit (Inside Codespaces)</h1>\r\n      <p>Prompt → App → Run → Open Port</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"box\" style=\"margin-bottom:12px;\">\r\n        <h3>The prompt I used</h3>\r\n<pre>'write a streamlit that shows the db content'</pre>\r\n        <p>This is the follow-up prompt after creating the DB. It’s short on purpose — and produced the app below.</p>\r\n      </div>\r\n\r\n      <div class=\"box\">\r\n        <h3>Streamlit viewer script</h3>\r\n<pre>import streamlit as st\r\nimport sqlite3\r\nimport pandas as pd\r\nimport os\r\n\r\n# Path to your database\r\nDB_FILE = \"/workspaces/portalaiforimpact/db_based/employees.db\"\r\n\r\nst.set_page_config(page_title=\"Employee Database Viewer\", layout=\"wide\")\r\nst.title(\"📊 Employee Database Viewer\")\r\n\r\n# Check if DB exists\r\nif not os.path.exists(DB_FILE):\r\n    st.error(f\"Database not found at {DB_FILE}\")\r\nelse:\r\n    # Connect to DB\r\n    conn = sqlite3.connect(DB_FILE)\r\n\r\n    # Sidebar for table selection\r\n    table = st.sidebar.selectbox(\"Select Table\", [\"employees\", \"attendance_log\"])\r\n\r\n    def load_data(table_name: str) -> pd.DataFrame:\r\n        query = f\"SELECT * FROM {table_name}\"\r\n        return pd.read_sql_query(query, conn)\r\n\r\n    # Load and display\r\n    df = load_data(table)\r\n    st.subheader(f\"Contents of `{table}`\")\r\n    st.dataframe(df, use_container_width=True)\r\n\r\n    # Show row count\r\n    st.caption(f\"Total rows: {len(df)}\")\r\n\r\n    # Option to refresh\r\n    if st.button(\"🔄 Refresh Data\"):\r\n        st.experimental_rerun()\r\n\r\n    conn.close()</pre>\r\n      </div>\r\n\r\n      <div class=\"grid\" style=\"margin-top:12px;\">\r\n        <div class=\"box\">\r\n          <h3>Run it in Codespaces</h3>\r\n<pre>pip install streamlit pandas\r\nstreamlit run viewer.py --server.address 0.0.0.0 --server.port 8000</pre>\r\n          <ul>\r\n            <li>Codespaces will offer to open the forwarded port (e.g., <strong>8000</strong>).</li>\r\n            <li>If not, click the <strong>Ports</strong> panel → globe icon next to port 8000.</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>DB path reminder</h3>\r\n          <p>Your DB file path (created earlier):</p>\r\n          <p><code class=\"inline\">/workspaces/portalaiforimpact/db_based/employees.db</code></p>\r\n          <p>Put <code class=\"inline\">viewer.py</code> anywhere; just ensure <code class=\"inline\">DB_FILE</code> points to this absolute path.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- RESULT SCREENSHOT -->\r\n  <section class=\"section-card\" id=\"screenshot\">\r\n    <div class=\"banner\">\r\n      <small>Result</small>\r\n      <h1>What You’ll See</h1>\r\n      <p>Interactive table view with table switcher</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <img src=\"https://i.imgur.com/X1n9vxK.png\" alt=\"Streamlit viewer showing employees table content\" />\r\n      <p>The sidebar lets you toggle between <code class=\"inline\">employees</code> and <code class=\"inline\">attendance_log</code>. Use the Refresh button after making changes to the DB.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- TROUBLESHOOTING -->\r\n  <section class=\"section-card\" id=\"troubleshoot\">\r\n    <div class=\"banner\">\r\n      <small>Tips</small>\r\n      <h1>Troubleshooting & Notes</h1>\r\n      <p>Common fixes if the page looks empty</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>“Database not found”:</strong> Verify the path in <code class=\"inline\">DB_FILE</code> matches your Codespace folder.</li>\r\n        <li><strong>No rows:</strong> Did you insert any data yet? Run your seed or add rows manually.</li>\r\n        <li><strong>Locked DB:</strong> Ensure no other process is writing while reading; reconnect if needed.</li>\r\n        <li><strong>Port not opening:</strong> Use the <strong>Ports</strong> panel to open or make the port public if you want to share.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "741a9a82-7d29-416f-ad85-43b3f463b0c9"
    },
    {
      "kind": "article",
      "order": 7,
      "title": "What’s Next?",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>What’s Next? • Add Data Pages & New Tables (with Prompts)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1000px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Code / prompt blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #f0f0f0; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Grid === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fff; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Next Steps</small>\r\n      <h1>What’s Next? Add Data Pages & Extend Your DB</h1>\r\n      <p>From viewing → to entering data → to expanding tables (with a shared key)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>Your database is created and you can view it. Now make it useful for daily operations:</p>\r\n      <ul>\r\n        <li><strong>Add data pages in Streamlit</strong> — a form to insert individual rows, and a bulk CSV uploader.</li>\r\n        <li><strong>Add new tables</strong> — keep a <em>common key</em> (e.g., <code class=\"inline\">employee_id</code>) to relate new data to employees.</li>\r\n      </ul>\r\n      <p>Below are <strong>executive prompt templates</strong> you can paste into your assistant to generate production-ready pages quickly.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STREAMLIT: ADD DATA PAGES -->\r\n  <section class=\"section-card\" id=\"add-data\">\r\n    <div class=\"banner\">\r\n      <small>Streamlit</small>\r\n      <h1>Add Data Pages (Individual & Bulk)</h1>\r\n      <p>Create forms for one-by-one entries and a bulk CSV uploader</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Prompt — Individual Row (employees)</h3>\r\n<pre>Write a Streamlit page called \"Add Employee\" that inserts one row into the SQLite DB at:\r\n/workspaces/portalaiforimpact/db_based/employees.db\r\n\r\nTable: employees(employee_id PK, first_name, last_name, date_of_birth, gender, phone_number, email UNIQUE, address, city, state_region, department, job_title, hire_date, salary, status CHECK in ('active','inactive'))\r\n\r\nRequirements:\r\n- Use a form with validation (required: employee_id, first_name, last_name, hire_date, status).\r\n- Enforce email uniqueness (show a friendly error if duplicate).\r\n- On success: insert row, show a toast, and display the last inserted row.\r\n- Use parameterized SQL (no string concatenation) and handle exceptions.</pre>\r\n        </div>\r\n\r\n        <div class=\"box\">\r\n          <h3>Prompt — Individual Row (attendance)</h3>\r\n<pre>Write a Streamlit page \"Check In / Check Out\" that writes to attendance_log in:\r\n/workspaces/portalaiforimpact/db_based/employees.db\r\n\r\nTable: attendance_log(log_id PK autoinc, employee_id FK, date, check_in_time, check_out_time, status, notes)\r\n\r\nRequirements:\r\n- \"Check in\" button: insert employee_id, today's date, and current timestamp as check_in_time (check check-out is NULL).\r\n- \"Check out\" button: set current timestamp in check_out_time for today's open record.\r\n- Prevent multiple open shifts per employee per date (unique (employee_id, date)).\r\n- Show today's table for the selected employee.</pre>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"grid\" style=\"margin-top:14px;\">\r\n        <div class=\"box\">\r\n          <h3>Prompt — Bulk Upload (employees)</h3>\r\n<pre>Create a Streamlit page \"Bulk Upload Employees\" that uploads a CSV and inserts rows to employees in:\r\n/workspaces/portalaiforimpact/db_based/employees.db\r\n\r\nCSV columns: employee_id, first_name, last_name, email, department, job_title, hire_date, status (others optional).\r\nRequirements:\r\n- Preview first 100 rows with a mapping step (allow selecting which CSV column maps to each DB column).\r\n- Validate required fields; skip invalid rows and report counts (inserted / skipped).\r\n- Upsert mode: if employee_id exists, update selected fields; else insert.\r\n- Use transactions and parameterized SQL. Show a summary at the end.</pre>\r\n        </div>\r\n\r\n        <div class=\"box\">\r\n          <h3>Prompt — Bulk Upload (attendance)</h3>\r\n<pre>Create a Streamlit page \"Bulk Upload Attendance\" for attendance_log in:\r\n/workspaces/portalaiforimpact/db_based/employees.db\r\n\r\nRequirements:\r\n- CSV must contain: employee_id, date, check_in_time; optional: check_out_time, status, notes.\r\n- Prevent duplicates via unique(employee_id, date): update if an existing row is found.\r\n- Show a merged preview before writing, then commit with a single transaction.\r\n- Report inserted / updated / skipped with reasons.</pre>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- EXTEND DB: NEW TABLES WITH COMMON KEY -->\r\n  <section class=\"section-card\" id=\"extend\">\r\n    <div class=\"banner\">\r\n      <small>Schema</small>\r\n      <h1>Add New Tables to Your DB</h1>\r\n      <p>The golden rule: share a common key (e.g., employee_id)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>Your DB currently has <code class=\"inline\">employees</code> and <code class=\"inline\">attendance_log</code>. You can safely add more tables if they <strong>reference</strong> <code class=\"inline\">employees.employee_id</code>. This preserves relationships and enables powerful joins.</p>\r\n\r\n      <div class=\"grid\">\r\n        <div class=\"box\">\r\n          <h3>Idea 1 — departments</h3>\r\n          <ul>\r\n            <li><code class=\"inline\">department_id (PK)</code>, <code class=\"inline\">name</code>, <code class=\"inline\">location</code></li>\r\n            <li><code class=\"inline\">employees.department</code> references this table (or add <code class=\"inline\">department_id</code> in employees).</li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Idea 2 — leave_requests</h3>\r\n          <ul>\r\n            <li><code class=\"inline\">leave_id (PK)</code>, <code class=\"inline\">employee_id (FK)</code></li>\r\n            <li><code class=\"inline\">start_date</code>, <code class=\"inline\">end_date</code>, <code class=\"inline\">type</code>, <code class=\"inline\">status</code>, <code class=\"inline\">notes</code></li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Idea 3 — shifts</h3>\r\n          <ul>\r\n            <li><code class=\"inline\">shift_id (PK)</code>, <code class=\"inline\">employee_id (FK)</code>, <code class=\"inline\">date</code></li>\r\n            <li><code class=\"inline\">start_time</code>, <code class=\"inline\">end_time</code>, <code class=\"inline\">location</code></li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Idea 4 — salaries_history</h3>\r\n          <ul>\r\n            <li><code class=\"inline\">entry_id (PK)</code>, <code class=\"inline\">employee_id (FK)</code>, <code class=\"inline\">effective_date</code>, <code class=\"inline\">amount</code>, <code class=\"inline\">reason</code></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <h3 style=\"margin-top:16px;\">Executive prompt — Create a new table (leave_requests)</h3>\r\n<pre>Write a Python migration script (sqlite3) that adds a table leave_requests to:\r\n/workspaces/portalaiforimpact/db_based/employees.db\r\n\r\nSchema:\r\n- leave_id INTEGER PRIMARY KEY AUTOINCREMENT\r\n- employee_id TEXT NOT NULL REFERENCES employees(employee_id) ON UPDATE CASCADE ON DELETE RESTRICT\r\n- start_date DATE NOT NULL\r\n- end_date   DATE NOT NULL\r\n- type TEXT CHECK (type IN ('Annual','Sick','Unpaid','Other')) NOT NULL\r\n- status TEXT CHECK (status IN ('Pending','Approved','Rejected')) NOT NULL DEFAULT 'Pending'\r\n- notes TEXT\r\nConstraints:\r\n- CHECK (start_date <= end_date)\r\n- Index on (employee_id, start_date)\r\nUse transactions and print a success message when done.</pre>\r\n\r\n      <h3 style=\"margin-top:16px;\">Executive prompt — Streamlit CRUD for leave_requests</h3>\r\n<pre>Create a Streamlit page \"Leave Requests\" for the DB at:\r\n/workspaces/portalaiforimpact/db_based/employees.db\r\n\r\nFeatures:\r\n- Create: form to add a leave request (employee_id select from employees, validated dates)\r\n- Read: filterable table (by employee_id, date range, status)\r\n- Update: approve/reject with buttons; edit notes\r\n- Delete: allow deletion with confirmation dialog\r\n- All SQL parameterized; wrap writes in transactions; show toasts and row counts.</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- BEST PRACTICES -->\r\n  <section class=\"section-card\" id=\"tips\">\r\n    <div class=\"banner\">\r\n      <small>Principles</small>\r\n      <h1>Best Practices When Extending</h1>\r\n      <p>Keep data consistent and performant</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>Common key:</strong> new tables should include <code class=\"inline\">employee_id</code> (or another stable shared key) as an FK.</li>\r\n        <li><strong>Constraints:</strong> use <code class=\"inline\">NOT NULL</code>, <code class=\"inline\">CHECK</code>, <code class=\"inline\">UNIQUE</code>, and <code class=\"inline\">FOREIGN KEY</code> rules to prevent bad data.</li>\r\n        <li><strong>Indexes:</strong> add indexes for frequent filters (e.g., <code class=\"inline\">(employee_id, date)</code>).</li>\r\n        <li><strong>Transactions:</strong> group writes with <code class=\"inline\">BEGIN</code>/<code class=\"inline\">COMMIT</code> to avoid partial updates.</li>\r\n        <li><strong>Idempotent scripts:</strong> use <code class=\"inline\">IF NOT EXISTS</code> in migrations so repeated runs are safe.</li>\r\n        <li><strong>UI flow:</strong> in Streamlit, confirm destructive actions and show success/failure toasts.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "9c06094e-9a1e-4ad3-ad50-cee74f74b344"
    }
  ]
}