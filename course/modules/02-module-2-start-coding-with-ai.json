{
  "order": 2,
  "title": "Module 2: Start Coding with AI",
  "lessons": [
    {
      "kind": "article",
      "order": 1,
      "title": "GitHub for Beginners",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>GitHub for Beginners • Create a Repository (Online)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Steps === */\r\n.step { border-left: 4px solid #000; padding-left: 12px; margin: 14px 0; }\r\n.step h3 { margin: 0 0 6px; font-size: 18px; color: #000; }\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n\r\n/* === Responsive video embed (added) === */\r\n.video-embed { position: relative; width: 100%; height: 0; padding-bottom: 56.25%; background: #000; border-radius: 12px; overflow: hidden; }\r\n.video-embed iframe { position: absolute; inset: 0; width: 100%; height: 100%; border: 0; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO (added at top) -->\r\n    <section class=\"section-card\" id=\"video\">\r\n      <div class=\"body\">\r\n        <div class=\"video-embed\">\r\n          <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/NKXpnieI-lg\" title=\"GitHub for Beginners\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>GitHub 101</small>\r\n        <h1>Create Your First Repository (Online Only)</h1>\r\n        <p>The simplest path: create a repo on github.com in minutes</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          A <strong>repository</strong> (repo) is like a <em>folder on your computer</em>. You put files and subfolders inside it.\r\n          The difference: GitHub stores that folder on the internet so you can back it up, share it, and collaborate.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- OPTION A: CREATE VIA WEBSITE -->\r\n    <section class=\"section-card\" id=\"web\">\r\n      <div class=\"banner\">\r\n        <small>Online</small>\r\n        <h1>Create a Repository on GitHub.com</h1>\r\n        <p>No installs. Just your browser.</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>Step 1 — Open the “New repository” page</h3>\r\n          <p>\r\n            Go to <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a> and sign in.  \r\n            Click the <strong>+</strong> button (top-right) → <strong>New repository</strong>.\r\n          </p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>Step 2 — Name your repo</h3>\r\n          <p>\r\n            In <strong>Repository name</strong>, type something simple, e.g. <span class=\"inline\">my-first-repo</span>.<br/>\r\n            (Optional) Add a short <strong>Description</strong>.\r\n          </p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>Step 3 — Choose visibility</h3>\r\n          <p>\r\n            Select <strong>Public</strong> (anyone can see it) or <strong>Private</strong> (only you and invited people).\r\n          </p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>Step 4 — Initialize with a README</h3>\r\n          <p>\r\n            Check <strong>Add a README file</strong>. This gives your repo a helpful starting page and prevents it from being empty.\r\n          </p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>Step 5 — (Optional) Add .gitignore and License</h3>\r\n          <p>\r\n            You can skip these for your first repo. Later, you can add a <span class=\"inline\">.gitignore</span> (to ignore temp files)\r\n            and a <span class=\"inline\">LICENSE</span> (how others may use your work).\r\n          </p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>Step 6 — Create the repository</h3>\r\n          <p>Click <strong>Create repository</strong>. You’ll land on your new repo’s page.</p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>Step 7 — Add files (upload in the browser)</h3>\r\n          <p>\r\n            Click <strong>Add file → Upload files</strong> → drag & drop files from your computer → then click\r\n            <strong>Commit changes</strong> to save them in the repo.\r\n          </p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>Step 8 — Edit files online</h3>\r\n          <p>\r\n            Click a file (e.g., <span class=\"inline\">README.md</span>) → click the pencil icon → make edits → click\r\n            <strong>Commit changes</strong>. That’s it — you’ve updated your repo.\r\n          </p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>Step 9 — Share your repo</h3>\r\n          <p>\r\n            Copy the browser URL of your repo and share it. If it’s private, invite collaborators via\r\n            <strong>Settings → Collaborators</strong>.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "bafd0b81-5f40-4aa8-97d0-9edc1ad6abdd"
    },
    {
      "kind": "article",
      "order": 2,
      "title": "Use GitHub Codespaces • Build, Run, Push",
      "content": {
        "body_md": "<!DOCTYPE html> \r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Use GitHub Codespaces • Build, Run, Push</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Steps === */\r\n.step { border-left: 4px solid #000; padding-left: 12px; margin: 14px 0; }\r\n.step h3 { margin: 0 0 6px; font-size: 18px; color: #000; }\r\n\r\n/* === Code / terminal === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 14px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO (added) -->\r\n    <section class=\"section-card\" id=\"video\">\r\n      <div class=\"body\">\r\n        <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/uSrWCL0UPvs\" title=\"Use GitHub Codespaces • Build, Run, Push\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Codespaces 101</small>\r\n        <h1>Use GitHub Codespaces with Your Repository</h1>\r\n        <p>Open a cloud dev environment, run a Python script, and push changes to GitHub</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          <strong>GitHub Codespaces</strong> lets you code in the browser (or VS Code) without installing anything on your computer.\r\n          You’ll open your repo in a Codespace, create a simple Python script, run it, then commit & push back to GitHub.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- OPEN A CODESPACE -->\r\n    <section class=\"section-card\" id=\"open\">\r\n      <div class=\"banner\">\r\n        <small>Step 1</small>\r\n        <h1>Open a Codespace for Your Repo</h1>\r\n        <p>Launch a ready-to-code environment in the cloud</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>1.1 — Go to your repository</h3>\r\n          <p>Open <em>your repo page</em> on <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a>.</p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>1.2 — Open Codespaces</h3>\r\n          <p>\r\n            Click the green <strong>Code</strong> button → <strong>Codespaces</strong> tab → <strong>Create codespace on main</strong>.\r\n            (If asked, keep the defaults.)\r\n          </p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>1.3 — Wait for it to start</h3>\r\n          <p>GitHub will prepare your environment. You’ll see a VS Code-like interface in your browser with a built-in terminal.</p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- CREATE & RUN PYTHON SCRIPT -->\r\n    <section class=\"section-card\" id=\"python\">\r\n      <div class=\"banner\">\r\n        <small>Step 2</small>\r\n        <h1>Create and Run a Simple Python Script</h1>\r\n        <p>Test locally inside your Codespace</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>2.1 — Create a new file</h3>\r\n          <p>\r\n            In the Explorer (left sidebar), click <strong>New File</strong> and name it <span class=\"inline\">hello.py</span>.\r\n            Paste the code below and save (<span class=\"inline\">Ctrl/Cmd + S</span>).\r\n          </p>\r\n<pre># hello.py\r\nname = \"Hawkar\"\r\ntemps = [70, 75, 80]\r\navg = sum(temps) / len(temps)\r\nprint(f\"Hello {name}! Average temp is {avg:.1f}°F.\")</pre>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>2.2 — Run the script in the Terminal</h3>\r\n          <p>Open the terminal (<span class=\"inline\">Ctrl/Cmd + `</span>) and run:</p>\r\n<pre>python3 hello.py\r\n# or, depending on the image:\r\npython hello.py</pre>\r\n          <p>You should see the output printed below the command.</p>\r\n        </div>\r\n\r\n        <div class=\"step\">\r\n          <h3>2.3 — (Optional) Use packages</h3>\r\n          <p>If you need a library, install it with <span class=\"inline\">pip</span>:</p>\r\n<pre>pip install pandas</pre>\r\n          <p>Then import it in your script and run again.</p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- COMMIT & PUSH -->\r\n    <section class=\"section-card\" id=\"push\">\r\n      <div class=\"banner\">\r\n        <small>Step 3</small>\r\n        <h1>Save Changes to GitHub (Commit & Push)</h1>\r\n        <p>Use the built-in Source Control in Codespaces</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>3.1 — Stage your changes</h3>\r\n          <p>\r\n            Click the <strong>Source Control</strong> icon (left sidebar). You’ll see <span class=\"inline\">hello.py</span> listed as a change.\r\n            Click <strong>+</strong> (Stage Changes) next to it.\r\n          </p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>3.2 — Commit</h3>\r\n          <p>Enter a short message like <em>“Add hello.py test script”</em> and click <strong>Commit</strong>.</p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>3.3 — Push</h3>\r\n          <p>\r\n            Click <strong>Sync Changes</strong> or <strong>Push</strong> in the Source Control panel.\r\n            Your new file and commits are now on GitHub.\r\n          </p>\r\n        </div>\r\n\r\n        <p><em>Prefer the terminal?</em> You can run these commands instead:</p>\r\n<pre>git status\r\ngit add hello.py\r\ngit commit -m \"Add hello.py test script\"\r\ngit push</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- VERIFY -->\r\n    <section class=\"section-card\" id=\"verify\">\r\n      <div class=\"banner\">\r\n        <small>Step 4</small>\r\n        <h1>Verify on GitHub</h1>\r\n        <p>Confirm your file is in the repository</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>4.1 — Refresh your repo page</h3>\r\n          <p>\r\n            Open your repository on <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a> and refresh.\r\n            You should see <span class=\"inline\">hello.py</span> in the file list and your latest commit message.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- STOP / CLEANUP -->\r\n    <section class=\"section-card\" id=\"stop\">\r\n      <div class=\"banner\">\r\n        <small>Step 5</small>\r\n        <h1>Stop or Reopen Your Codespace</h1>\r\n        <p>Manage your environment easily</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>5.1 — Stop (to save resources)</h3>\r\n          <p>\r\n            Click the green <strong>Code</strong> button → You’ll see <strong>(Active)</strong> status → \r\n            click the three dots (⋯) → select <strong>Stop codespace</strong>. \r\n            You can reopen it anytime from the same menu.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "3aac05fc-76fc-478a-b53e-c45921e460c1"
    },
    {
      "kind": "article",
      "order": 3,
      "title": "Streamlit in GitHub Codespaces • Build & Run",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Streamlit in GitHub Codespaces • Build & Run</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Steps === */\r\n.step { border-left: 4px solid #000; padding-left: 12px; margin: 14px 0; }\r\n.step h3 { margin: 0 0 6px; font-size: 18px; color: #000; }\r\n\r\n/* === Code / terminal === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 14px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO (added at the very top) -->\r\n    <section class=\"section-card\" id=\"video\">\r\n      <div class=\"body\" style=\"padding:0;\">\r\n        <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/t6limpZZyQ4\" title=\"Streamlit in GitHub Codespaces • Build & Run\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen style=\"width:100%; aspect-ratio:16/9; height:auto; display:block; border:0;\"></iframe>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Streamlit 101</small>\r\n        <h1>Create & Run a Streamlit App in Codespaces</h1>\r\n        <p>Zero local installs — build in the browser and view via port forwarding</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          You’ll open your repository in a <strong>GitHub Codespace</strong>, install Streamlit, create a simple app\r\n          (<span class=\"inline\">app.py</span>), run it on a forwarded port, and see it in your browser.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- OPEN CODESPACE -->\r\n    <section class=\"section-card\" id=\"open\">\r\n      <div class=\"banner\">\r\n        <small>Step 1</small>\r\n        <h1>Open Your Repository in a Codespace</h1>\r\n        <p>Use the cloud dev environment</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>1.1 — Go to your repository on GitHub</h3>\r\n          <p>Open your repo page at <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a>.</p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>1.2 — Launch Codespaces</h3>\r\n          <p>\r\n            Click the green <strong>Code</strong> button → <strong>Codespaces</strong> tab → <strong>Create codespace on main</strong>.\r\n          </p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>1.3 — Wait for the editor</h3>\r\n          <p>You’ll see a VS Code-like editor in your browser with a built-in terminal at the bottom.</p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INSTALL STREAMlit -->\r\n    <section class=\"section-card\" id=\"install\">\r\n      <div class=\"banner\">\r\n        <small>Step 2</small>\r\n        <h1>Install Streamlit in the Codespace</h1>\r\n        <p>One-time install in the container</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>2.1 — Install via pip</h3>\r\n          <p>In the terminal inside Codespaces, run:</p>\r\n<pre>pip install streamlit</pre>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- CREATE APP.PY -->\r\n    <section class=\"section-card\" id=\"create\">\r\n      <div class=\"banner\">\r\n        <small>Step 3</small>\r\n        <h1>Create a Simple Streamlit App</h1>\r\n        <p>Minimal UI with input, chart, and dataframe</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>3.1 — New file: <span class=\"inline\">app.py</span></h3>\r\n          <p>In the Explorer (left), click <strong>New File</strong> → name it <span class=\"inline\">app.py</span> and paste:</p>\r\n<pre>import streamlit as st\r\nimport pandas as pd\r\n\r\nst.set_page_config(page_title=\"Hello Streamlit\", page_icon=\"👋\", layout=\"centered\")\r\n\r\nst.title(\"Hello, Streamlit in Codespaces 👋\")\r\nst.write(\"This is a simple demo running entirely in your browser-based dev environment.\")\r\n\r\nname = st.text_input(\"Your name\", \"Hawkar\")\r\ntemps = pd.DataFrame({\"Temperature (°F)\": [70, 75, 80], \"Humidity (%)\": [30, 45, 50]})\r\n\r\nst.subheader(f\"Welcome, {name}!\")\r\nst.dataframe(temps)\r\n\r\nst.line_chart(temps[\"Temperature (°F)\"])\r\n\r\nif st.button(\"Compute Average Temp\"):\r\n    avg = temps[\"Temperature (°F)\"].mean()\r\n    st.success(f\"Average temperature is {avg:.1f}°F\")</pre>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- RUN STREAMLIT WITH PORT FORWARDING -->\r\n    <section class=\"section-card\" id=\"run\">\r\n      <div class=\"banner\">\r\n        <small>Step 4</small>\r\n        <h1>Run Streamlit and Open the App</h1>\r\n        <p>Forward a port and view in your browser</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>4.1 — Start Streamlit on a fixed port</h3>\r\n          <p>From the terminal:</p>\r\n<pre>streamlit run app.py --server.address 0.0.0.0 --server.port 8000</pre>\r\n          <p>\r\n            The app will start on port <strong>8000</strong>. Codespaces detects this and offers to open the port.\r\n          </p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>4.2 — Open the forwarded port</h3>\r\n          <p>\r\n            If prompted, click <strong>Open in Browser</strong>.  \r\n            Or open the <strong>Ports</strong> panel (bottom), find port <strong>8000</strong>, click the globe icon to open it.\r\n          </p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>4.3 — (Optional) Make the port public for sharing</h3>\r\n          <p>\r\n            In the <strong>Ports</strong> panel, set the port visibility to <strong>Public</strong> to share the URL.  \r\n            (Keep it <strong>Private</strong> if you don’t want to share access.)\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- COMMIT & PUSH -->\r\n    <section class=\"section-card\" id=\"push\">\r\n      <div class=\"banner\">\r\n        <small>Step 5</small>\r\n        <h1>Commit & Push Your Streamlit App</h1>\r\n        <p>Save your work back to GitHub</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>5.1 — Stage & Commit</h3>\r\n          <p>\r\n            Click the <strong>Source Control</strong> icon (left). Stage <span class=\"inline\">app.py</span> with <strong>+</strong>, add a message like\r\n            <em>\"Add Streamlit demo\"</em>, then click <strong>Commit</strong>.\r\n          </p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>5.2 — Push</h3>\r\n          <p>Click <strong>Sync Changes</strong> or <strong>Push</strong> to upload your commit to GitHub.</p>\r\n        </div>\r\n\r\n        <p><em>Terminal alternative:</em></p>\r\n<pre>git status\r\ngit add app.py\r\ngit commit -m \"Add Streamlit demo\"\r\ngit push</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- VERIFY -->\r\n    <section class=\"section-card\" id=\"verify\">\r\n      <div class=\"banner\">\r\n        <small>Step 6</small>\r\n        <h1>Verify on GitHub</h1>\r\n        <p>Confirm your new file is in the repo</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>6.1 — Check your repository</h3>\r\n          <p>Refresh your repo page on <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github.com</a>. You should see <span class=\"inline\">app.py</span> and your latest commit.</p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "ee0007ba-43da-4d21-8bb6-f417312f7d9c"
    },
    {
      "kind": "article",
      "order": 4,
      "title": "What is Streamlit? Why It Improves UI & UX",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>What is Streamlit? Why It Improves UI & UX</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Highlights grid === */\r\n.quick-grid { display: grid; grid-template-columns: 1fr; gap: 14px; margin-top: 12px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; padding: 14px; background: #fafafa; }\r\n.box h3 { margin: 0 0 6px; font-size: 17px; color: #000; }\r\n.box p { margin: 0; font-size: 15px; }\r\n\r\n/* Responsive */\r\n@media (min-width: 720px) { .quick-grid { grid-template-columns: repeat(2, 1fr); } }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Streamlit 101</small>\r\n        <h1>What is Streamlit?</h1>\r\n        <p>And why it helps the user interface and user experience of your code</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          <strong>Streamlit</strong> is an open-source Python library that turns scripts into interactive web apps —\r\n          with minimal effort and no need for frontend skills. Instead of showing results in plain terminal text,\r\n          Streamlit makes it easy to build apps where users can explore, interact, and visualize data directly in the browser.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- WHY IT HELPS -->\r\n    <section class=\"section-card\" id=\"why\">\r\n      <div class=\"banner\">\r\n        <small>Benefits</small>\r\n        <h1>Why Streamlit Improves UI & UX</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"quick-grid\">\r\n          <div class=\"box\">\r\n            <h3>Simple & Fast</h3>\r\n            <p>Write Python only. No HTML, CSS, or JavaScript required — yet you still get a professional-looking interface.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h3>Interactive Widgets</h3>\r\n            <p>Add sliders, dropdowns, text inputs, and buttons with one line of code, giving users control over your code’s behavior.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h3>Data Visualization</h3>\r\n            <p>Display charts, maps, and dataframes interactively — much easier to understand than static console output.</p>\r\n          </div>\r\n          <div class=\"box\">\r\n            <h3>Better UX for Sharing</h3>\r\n            <p>Deploy your script as a web app so others can use it without installing Python or dependencies locally.</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- NEXT STEPS -->\r\n    <section class=\"section-card\" id=\"next\">\r\n      <div class=\"banner\">\r\n        <small>Explore</small>\r\n        <h1>Learn More & Deploy Apps</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          With Streamlit, you can go beyond “code that runs” and deliver “apps people enjoy using”.\r\n          For more information and deployment options, visit:\r\n        </p>\r\n        <p>\r\n          <a href=\"https://streamlit.io/cloud\" target=\"_blank\" rel=\"noopener\"><strong>https://streamlit.io/cloud</strong></a>\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "beca1097-a301-450c-8d7f-12ffefc968b3"
    },
    {
      "kind": "article",
      "order": 5,
      "title": "Streamlit in Codespaces • Visualize CSV Data",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Build a CSV Visualization App (Streamlit + Codespaces)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Steps === */\r\n.step { border-left: 4px solid #000; padding-left: 12px; margin: 14px 0; }\r\n.step h3 { margin: 0 0 6px; font-size: 18px; color: #000; }\r\n\r\n/* === Code / terminal === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 14px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO -->\r\n    <section class=\"section-card\" id=\"video\">\r\n      <div class=\"body\">\r\n        <div style=\"display:flex; justify-content:center;\">\r\n          <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/B1at9e_SwzM\" title=\"Streamlit in Codespaces • Visualize CSV Data\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Streamlit • Codespaces</small>\r\n        <h1>Visualize a CSV with Streamlit in GitHub Codespaces</h1>\r\n        <p>Repository layout → CSV → app.py → run → push</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          You will create a repo layout, add a small CSV file, write <strong>app.py</strong> to visualize it with Streamlit,\r\n          run the app in your Codespace, and push the changes back to GitHub.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- REPOSITORY STRUCTURE -->\r\n    <section class=\"section-card\" id=\"structure\">\r\n      <div class=\"banner\">\r\n        <small>Step 1</small>\r\n        <h1>Repository Structure</h1>\r\n        <p>Minimal, clear layout</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>your-repo/\r\n├─ app.py\r\n├─ requirements.txt\r\n└─ data/\r\n   └─ weather.csv\r\n</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FILES -->\r\n    <section class=\"section-card\" id=\"files\">\r\n      <div class=\"banner\">\r\n        <small>Step 2</small>\r\n        <h1>Create Files</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>requirements.txt</h3>\r\n<pre>streamlit\r\npandas</pre>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>data/weather.csv</h3>\r\n<pre>Date,Temperature,Humidity\r\n2025-08-01,70,30\r\n2025-08-02,75,45\r\n2025-08-03,80,50\r\n2025-08-04,85,60\r\n2025-08-05,90,70</pre>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- APP.PY -->\r\n    <section class=\"section-card\" id=\"app\">\r\n      <div class=\"banner\">\r\n        <small>Step 3</small>\r\n        <h1>app.py Script</h1>\r\n        <p>Improved Streamlit script with caching, filtering, and safe summary</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>import streamlit as st\r\nimport pandas as pd\r\nfrom pathlib import Path\r\n\r\nst.set_page_config(page_title=\"CSV Viewer\", page_icon=\"📈\", layout=\"centered\")\r\n\r\nDATA_PATH = Path(\"data\") / \"weather.csv\"\r\n\r\nst.title(\"CSV Viewer (Streamlit)\")\r\nst.caption(\"Reads data/weather.csv and shows a table, summary, and a line chart.\")\r\n\r\n@st.cache_data(show_spinner=False)\r\ndef load_csv(p: Path) -> pd.DataFrame | None:\r\n    if not p.exists():\r\n        return None\r\n    df = pd.read_csv(p)\r\n    if \"Date\" in df.columns:\r\n        df[\"Date\"] = pd.to_datetime(df[\"Date\"], errors=\"coerce\")\r\n    return df\r\n\r\ndf = load_csv(DATA_PATH)\r\n\r\nif df is None:\r\n    st.error(f\"CSV not found at {DATA_PATH}. Make sure the file exists.\")\r\n    st.stop()\r\n\r\n# Raw data\r\nst.subheader(\"Raw Data\")\r\nst.dataframe(df, width=\"stretch\")  # ✅ new API (replaces use_container_width)\r\n\r\n# Summary (make it pandas-version-safe)\r\nst.subheader(\"Summary Statistics\")\r\nnumeric_cols = df.select_dtypes(include=\"number\").columns.tolist()\r\nif numeric_cols:\r\n    summary = df[numeric_cols].describe()\r\n    st.dataframe(summary, width=\"stretch\")\r\nelse:\r\n    st.info(\"No numeric columns found to summarize.\")\r\n\r\n# Optional date filter\r\nhas_dt = \"Date\" in df.columns and pd.api.types.is_datetime64_any_dtype(df[\"Date\"])\r\nif has_dt:\r\n    dmin, dmax = df[\"Date\"].min(), df[\"Date\"].max()\r\n    if pd.notna(dmin) and pd.notna(dmax):\r\n        st.subheader(\"Filter\")\r\n        start, end = st.date_input(\r\n            \"Date range:\",\r\n            value=(dmin.date(), dmax.date()),\r\n            min_value=dmin.date(),\r\n            max_value=dmax.date(),\r\n        )\r\n        if start and end:\r\n            mask = (df[\"Date\"] >= pd.to_datetime(start)) & (df[\"Date\"] <= pd.to_datetime(end))\r\n            df = df.loc[mask].copy()\r\n\r\n# Chart\r\nst.subheader(\"Chart\")\r\nnumeric_cols = df.select_dtypes(include=\"number\").columns.tolist()\r\nif not numeric_cols:\r\n    st.warning(\"No numeric columns to plot.\")\r\nelse:\r\n    metric = st.selectbox(\"Select a numeric column to plot:\", numeric_cols, index=0)\r\n    if has_dt:\r\n        chart_data = df.set_index(\"Date\")[[metric]].sort_index()\r\n    else:\r\n        chart_data = df[[metric]]\r\n\r\n    # ❗ Do NOT pass width=\"stretch\" here — Altair expects a number.\r\n    # Also avoid use_container_width (deprecated). Let Streamlit auto-size.\r\n    st.line_chart(chart_data)</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- RUN -->\r\n    <section class=\"section-card\" id=\"run\">\r\n      <div class=\"banner\">\r\n        <small>Step 4</small>\r\n        <h1>Run the App</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>In the Codespaces terminal:</p>\r\n<pre>pip install -r requirements.txt\r\nstreamlit run app.py --server.address 0.0.0.0 --server.port 8000</pre>\r\n        <p>Click <strong>Open in Browser</strong> when prompted, or use the Ports panel → port <strong>8000</strong>.</p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- RESULT -->\r\n    <section class=\"section-card\" id=\"result\">\r\n      <div class=\"banner\">\r\n        <small>Step 5</small>\r\n        <h1>What You See When Running</h1>\r\n      </div>\r\n      <div class=\"body\">\r\n        <ul>\r\n          <li>A **title and caption** at the top: “CSV Viewer (Streamlit)”</li>\r\n          <li>A **data table** showing the contents of <span class=\"inline\">weather.csv</span></li>\r\n          <li>A **summary statistics table** (mean, min, max, etc.) for numeric columns</li>\r\n          <li>A **date filter widget** (calendar range) if the CSV has a Date column</li>\r\n          <li>A **chart section** where you can choose a numeric column (Temperature or Humidity) and see a line chart over time</li>\r\n          <li>Error/warning/info messages appear gracefully if columns are missing</li>\r\n        </ul>\r\n        <p>\r\n          In this example CSV, you can filter the date range (e.g., Aug 2–Aug 4), view the filtered table, summary statistics, and a line chart of Temperature or Humidity across dates.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "b2582ffc-58ee-4bd8-97d4-1d82af19ced3"
    },
    {
      "kind": "article",
      "order": 6,
      "title": "User Experience",
      "content": {
        "body_md": "<!DOCTYPE html> \r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Streamlit UX • CSV Explorer (User Experience Guide)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Steps === */\r\n.step { border-left: 4px solid #000; padding-left: 12px; margin: 14px 0; }\r\n.step h3 { margin: 0 0 6px; font-size: 18px; color: #000; }\r\n\r\n/* === Code / terminal === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 14px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\n/* === Bullets tidy === */\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO (added on top) -->\r\n    <section class=\"section-card\" id=\"video\">\r\n      <div class=\"body\" style=\"padding:0\">\r\n        <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/OqRsu45OS0M\" title=\"User Experience\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Streamlit UX</small>\r\n        <h1>CSV Explorer — User Experience</h1>\r\n        <p>Upload/auto-load CSV → Smart parsing → Filter → Explore → Chart → Export</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          This page documents the <strong>user experience</strong> of the improved <strong>CSV Explorer</strong> built with Streamlit.\r\n          It runs in your existing repository (same Codespace), replacing the previous <span class=\"inline\">app.py</span>.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- HOW TO RUN (Codespaces) -->\r\n    <section class=\"section-card\" id=\"run\">\r\n      <div class=\"banner\">\r\n        <small>Run</small>\r\n        <h1>How to Run in GitHub Codespaces</h1>\r\n        <p>Replace app.py → install dependencies → run Streamlit on a fixed port</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>1) Replace the app</h3>\r\n          <p>Open your Codespace → replace the existing <span class=\"inline\">app.py</span> with the script below and save.</p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>2) Ensure dependencies</h3>\r\n          <p>Your <span class=\"inline\">requirements.txt</span> should have at least:</p>\r\n<pre>streamlit\r\npandas</pre>\r\n          <p>(<em>Note:</em> <span class=\"inline\">pandas</span> pulls in <span class=\"inline\">numpy</span>.)</p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>3) Install & run</h3>\r\n          <p>In the terminal:</p>\r\n<pre>pip install -r requirements.txt\r\nstreamlit run app.py --server.address 0.0.0.0 --server.port 8000</pre>\r\n          <p>Click <strong>Open in Browser</strong> (or use the Ports panel → globe icon on port <strong>8000</strong>).</p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- UX WALKTHROUGH -->\r\n    <section class=\"section-card\" id=\"ux\">\r\n      <div class=\"banner\">\r\n        <small>UX</small>\r\n        <h1>What the User Experiences</h1>\r\n        <p>Designed for clarity, speed, and reliability</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <ul>\r\n          <li><strong>Header & Caption.</strong> Clear page title and purpose.</li>\r\n          <li><strong>Sidebar → Data.</strong> Upload a CSV or automatically load <span class=\"inline\">data/weather.csv</span>. If neither is present, a <strong>demo weather dataset</strong> is generated.</li>\r\n          <li><strong>Smart datetime detection.</strong> Columns named like <em>Date / Time / Timestamp / Datetime</em> are auto-parsed. If none are detected, the user can try parsing a chosen column.</li>\r\n          <li><strong>Chart options.</strong> Users multi-select metrics to plot, choose resampling (Daily/Weekly/Monthly), aggregation (Mean/Sum), rolling average window, normalization to 0–1, and chart type (Line/Area/Bar).</li>\r\n          <li><strong>Raw Data table.</strong> Scrollable, searchable dataframe view.</li>\r\n          <li><strong>Summary stats.</strong> Numeric columns summarized via <span class=\"inline\">describe()</span>.</li>\r\n          <li><strong>KPIs.</strong> Quick metrics for row count and date-range boundaries when a datetime column is active.</li>\r\n          <li><strong>Date range filter.</strong> When applicable, filter the dataset and reflect counts (“Showing N rows from … to …”).</li>\r\n          <li><strong>Charts.</strong> Auto-sized charts of selected metrics; transformations (resample, rolling, normalize) apply in order.</li>\r\n          <li><strong>Export.</strong> Download the current filtered view as <span class=\"inline\">filtered.csv</span>.</li>\r\n          <li><strong>Resilience.</strong> All critical operations are guarded with helpful <em>error/warning/info</em> messages so the UX never “breaks”.</li>\r\n        </ul>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- APP CODE (EXACT) -->\r\n    <section class=\"section-card\" id=\"code\">\r\n      <div class=\"banner\">\r\n        <small>Code</small>\r\n        <h1>app.py (Exact Code Used)</h1>\r\n        <p>Paste this into your repository’s app.py</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>import io\r\nfrom pathlib import Path\r\nfrom typing import Optional, Tuple, List\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\nimport streamlit as st\r\n\r\n# ---------------- Page setup ----------------\r\nst.set_page_config(page_title=\"CSV Explorer\", page_icon=\"📈\", layout=\"centered\")\r\nst.title(\"📈 CSV Explorer\")\r\nst.caption(\"Load a CSV, filter by date, explore stats, and plot one or more metrics.\")\r\n\r\n# ---------------- Helpers ----------------\r\n@st.cache_data(show_spinner=False)\r\ndef read_csv_safely(file_or_path) -> Optional[pd.DataFrame]:\r\n    \"\"\"Read CSV; coerce obvious datetime columns.\"\"\"\r\n    try:\r\n        df = pd.read_csv(file_or_path)\r\n        for col in df.columns:\r\n            if col.lower() in (\"date\", \"time\", \"timestamp\", \"datetime\"):\r\n                df[col] = pd.to_datetime(df[col], errors=\"coerce\")\r\n        return df\r\n    except Exception as e:\r\n        st.error(f\"Could not read CSV: {e}\")\r\n        return None\r\n\r\n@st.cache_data(show_spinner=False)\r\ndef demo_weather() -> pd.DataFrame:\r\n    \"\"\"Small synthetic time-series if no file is provided.\"\"\"\r\n    dates = pd.date_range(\"2024-01-01\", periods=120, freq=\"D\")\r\n    x = np.arange(len(dates))\r\n    df = pd.DataFrame(\r\n        {\r\n            \"Date\": dates,\r\n            \"TempC\": 12 + 8 * np.sin(x / 9) + np.random.normal(0, 1.3, len(dates)),\r\n            \"Rain_mm\": np.clip(np.random.gamma(1.5, 1.2, len(dates)) - 1.2, 0, None),\r\n            \"Wind_kmh\": 10 + np.random.normal(0, 3, len(dates)),\r\n        }\r\n    )\r\n    return df\r\n\r\ndef find_datetime_columns(df: pd.DataFrame) -> List[str]:\r\n    return [c for c in df.columns if pd.api.types.is_datetime64_any_dtype(df[c])]\r\n\r\ndef numeric_columns(df: pd.DataFrame) -> List[str]:\r\n    return df.select_dtypes(include=\"number\").columns.tolist()\r\n\r\ndef filter_by_date(\r\n    df: pd.DataFrame, date_col: str\r\n) -> Tuple[pd.DataFrame, Optional[pd.Timestamp], Optional[pd.Timestamp]]:\r\n    dmin, dmax = df[date_col].min(), df[date_col].max()\r\n    if pd.isna(dmin) or pd.isna(dmax):\r\n        st.info(\"Date column contains invalid values; showing all rows.\")\r\n        return df, None, None\r\n    start, end = st.date_input(\r\n        \"Date range\",\r\n        value=(dmin.date(), dmax.date()),\r\n        min_value=dmin.date(),\r\n        max_value=dmax.date(),\r\n        key=\"date_range\",\r\n    )\r\n    if start and end:\r\n        mask = (df[date_col] >= pd.to_datetime(start)) & (df[date_col] <= pd.to_datetime(end))\r\n        return df.loc[mask].copy(), pd.to_datetime(start), pd.to_datetime(end)\r\n    return df, None, None\r\n\r\ndef resample_df(df: pd.DataFrame, date_col: str, cols: List[str], freq: Optional[str], how: str) -> pd.DataFrame:\r\n    if not freq:\r\n        return df.set_index(date_col)[cols].sort_index()\r\n    agg = \"mean\" if how == \"Mean\" else \"sum\"\r\n    return df.set_index(date_col)[cols].sort_index().resample(freq).agg(agg)\r\n\r\ndef apply_rolling(df: pd.DataFrame, window: int) -> pd.DataFrame:\r\n    return df.rolling(window, min_periods=1).mean() if window > 1 else df\r\n\r\ndef normalize_01(df: pd.DataFrame) -> pd.DataFrame:\r\n    def _scale(s: pd.Series) -> pd.Series:\r\n        mn, mx = s.min(), s.max()\r\n        return (s - mn) / (mx - mn) if pd.notna(mn) and pd.notna(mx) and mx != mn else s * 0\r\n    return df.apply(_scale, axis=0)\r\n\r\n# ---------------- Sidebar: data & options ----------------\r\nwith st.sidebar:\r\n    st.header(\"Data\")\r\n    uploaded = st.file_uploader(\"Upload CSV\", type=[\"csv\"])\r\n    fallback_path = Path(\"data\") / \"weather.csv\"\r\n\r\n    if uploaded is not None:\r\n        df = read_csv_safely(uploaded)\r\n        source_label = \"Uploaded file\"\r\n    elif fallback_path.exists():\r\n        df = read_csv_safely(fallback_path)\r\n        source_label = f\"{fallback_path}\"\r\n    else:\r\n        st.info(\"No file uploaded and no local CSV found — using demo data.\")\r\n        df = demo_weather()\r\n        source_label = \"Demo dataset\"\r\n\r\n    if df is None or df.empty:\r\n        st.error(\"No data to show.\")\r\n        st.stop()\r\n\r\n    st.caption(f\"Source: **{source_label}** • Rows: **{len(df):,}** • Columns: **{len(df.columns)}**\")\r\n\r\n    dt_cols = find_datetime_columns(df)\r\n    if dt_cols:\r\n        date_col = st.selectbox(\"Date column\", dt_cols, index=0)\r\n    else:\r\n        st.warning(\"No datetime column detected. You can still chart numeric columns.\")\r\n        # Optional manual parse\r\n        try_col = st.selectbox(\"Try parsing this column as dates (optional)\", [\"<none>\"] + df.columns.tolist(), index=0)\r\n        date_col = None\r\n        if try_col != \"<none>\":\r\n            try:\r\n                df[try_col] = pd.to_datetime(df[try_col], errors=\"coerce\")\r\n                if df[try_col].notna().any():\r\n                    date_col = try_col\r\n                    st.success(f\"Parsed '{try_col}' as datetime.\")\r\n                else:\r\n                    st.error(f\"Parsing '{try_col}' produced all NaT.\")\r\n            except Exception as e:\r\n                st.error(f\"Failed to parse '{try_col}' as datetime: {e}\")\r\n\r\n    st.header(\"Chart Options\")\r\n    num_cols = numeric_columns(df)\r\n    if not num_cols:\r\n        st.warning(\"No numeric columns found.\")\r\n    selected_cols = st.multiselect(\"Metrics to plot\", options=num_cols, default=num_cols[:1])\r\n\r\n    freq = st.selectbox(\"Resample (if dated)\", options=[\"Off\", \"D (Daily)\", \"W (Weekly)\", \"M (Monthly)\"], index=0)\r\n    freq_map = {\"Off\": None, \"D (Daily)\": \"D\", \"W (Weekly)\": \"W\", \"M (Monthly)\": \"M\"}\r\n    agg = st.radio(\"Aggregation\", [\"Mean\", \"Sum\"], horizontal=True, index=0)\r\n\r\n    roll = st.slider(\"Rolling average window\", min_value=1, max_value=60, value=1, help=\"Applies after resampling.\")\r\n    norm = st.checkbox(\"Normalize each series to 0–1\", value=False)\r\n    chart_kind = st.selectbox(\"Chart type\", [\"Line\", \"Area\", \"Bar\"], index=0)\r\n\r\n# ---------------- Raw data ----------------\r\nst.subheader(\"Raw Data\")\r\nst.caption(\"Sort columns, use the search box, or scroll. (Editing disabled for safety.)\")\r\nst.dataframe(df, width=\"stretch\")\r\n\r\n# ---------------- Summary ----------------\r\nst.subheader(\"Summary Statistics\")\r\nif num_cols:\r\n    summary = df[num_cols].describe()  # pandas-version-safe\r\n    st.dataframe(summary, width=\"stretch\")\r\nelse:\r\n    st.info(\"No numeric columns to summarize.\")\r\n\r\n# Quick KPIs (stringify dates to satisfy st.metric)\r\nk1, k2, k3 = st.columns(3)\r\nk1.metric(\"Rows\", f\"{len(df):,}\")\r\nif 'date_col' in locals() and date_col:\r\n    dmin = pd.to_datetime(df[date_col].min())\r\n    dmax = pd.to_datetime(df[date_col].max())\r\n    start_str = str(dmin.date()) if pd.notna(dmin) else \"—\"\r\n    end_str = str(dmax.date()) if pd.notna(dmax) else \"—\"\r\n    k2.metric(\"Start\", start_str)\r\n    k3.metric(\"End\", end_str)\r\nelse:\r\n    k2.metric(\"Datetime\", \"Not set\")\r\n    k3.metric(\"—\", \"—\")\r\n\r\n# ---------------- Filtering ----------------\r\ndf_view = df.copy()\r\nif 'date_col' in locals() and date_col:\r\n    st.subheader(\"Filter\")\r\n    df_view, start_ts, end_ts = filter_by_date(df_view, date_col)\r\n    if start_ts and end_ts:\r\n        st.success(f\"Showing {len[df_view):,} rows from {start_ts.date()} to {end_ts.date()}.\")\r\n    else:\r\n        st.info(f\"Showing all {len(df_view):,} rows.\")\r\n\r\n# ---------------- Chart ----------------\r\nst.subheader(\"Chart\")\r\nif not selected_cols:\r\n    st.warning(\"Pick at least one metric in the sidebar to plot.\")\r\nelse:\r\n    if 'date_col' in locals() and date_col:\r\n        series_df = resample_df(df_view, date_col, selected_cols, freq_map[freq], agg)\r\n    else:\r\n        series_df = df_view[selected_cols]\r\n\r\n    if series_df.empty:\r\n        st.warning(\"Nothing to plot with the current filters.\")\r\n    else:\r\n        if roll > 1:\r\n            series_df = apply_rolling(series_df, roll)\r\n        if norm:\r\n            series_df = normalize_01(series_df)\r\n\r\n        # Let Streamlit auto-size charts; don't pass width=\"stretch\" (Altair expects a number)\r\n        if chart_kind == \"Line\":\r\n            st.line_chart(series_df)\r\n        elif chart_kind == \"Area\":\r\n            st.area_chart(series_df)\r\n        else:\r\n            st.bar_chart(series_df)\r\n\r\n# ---------------- Export ----------------\r\nst.subheader(\"Export\")\r\ncsv_bytes = df_view.to_csv(index=False).encode(\"utf-8\")\r\nst.download_button(\r\n    \"Download current view as CSV\",\r\n    data=csv_bytes,\r\n    file_name=\"filtered.csv\",\r\n    mime=\"text/csv\",\r\n)\r\nst.caption(\"Export respects the current date filter (if any).\")\r\n\r\n# ---------------- Footer tip ----------------\r\nst.caption(\"Tip: Upload any CSV in the sidebar. If your dates aren’t recognized, choose a column to parse as datetime.\")</pre>\r\n        <p><em>Note:</em> HTML escapes were added only where needed for safe rendering.</p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "2c4b9781-0d2a-4213-83c4-22ac4cddac9b"
    },
    {
      "kind": "article",
      "order": 7,
      "title": "Organize Your App into Pages",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Streamlit • Organize Your App into Pages</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 900px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner { background: linear-gradient(120deg, #555555, #000000); color: #FFFFFF; padding: 18px 20px; }\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 24px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p { font-size: 16px; margin-top: 0; color: #555; }\r\n\r\n/* === Steps === */\r\n.step { border-left: 4px solid #000; padding-left: 12px; margin: 14px 0; }\r\n.step h3 { margin: 0 0 6px; font-size: 18px; color: #000; }\r\n\r\n/* === Code / terminal === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3;\r\n  padding: 14px; border-radius: 10px; overflow-x: auto;\r\n  font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n.inline { background: #f0f0f0; border-radius: 4px; padding: 2px 6px; font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace; }\r\n\r\n/* === Footer note === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n\r\n/* === Video embed (responsive) === */\r\n.video-embed { position: relative; width: 100%; aspect-ratio: 16 / 9; }\r\n.video-embed iframe { position: absolute; inset: 0; width: 100% !important; height: 100% !important; border: 0; border-radius: 12px; }\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"wrap\">\r\n\r\n    <!-- VIDEO (Top) -->\r\n    <section class=\"section-card\" id=\"video\">\r\n      <div class=\"banner\">\r\n        <small>Video</small>\r\n        <h1>Organize Your App into Pages — Walkthrough</h1>\r\n        <p>Watch first, then copy the code below.</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"video-embed\">\r\n          <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/g-Lth4kjsYc\" title=\"Organize Your App into Pages\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- INTRO -->\r\n    <section class=\"section-card\" id=\"intro\">\r\n      <div class=\"banner\">\r\n        <small>Streamlit UX</small>\r\n        <h1>Organize Your Streamlit App into Pages</h1>\r\n        <p>Navigation in the sidebar → Home • Visualization • Data View</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <p>\r\n          You can improve user experience by splitting your Streamlit app into **pages** using a simple\r\n          sidebar radio selector. The script below adds a <strong>Home</strong> overview, a rich\r\n          <strong>Visualization</strong> page, and a flexible <strong>Data View</strong> page — all within one file.\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- HOW TO RUN (Codespaces) -->\r\n    <section class=\"section-card\" id=\"run\">\r\n      <div class=\"banner\">\r\n        <small>Run</small>\r\n        <h1>Use This in Your Repo (Codespaces)</h1>\r\n        <p>Replace app.py → install → run on a fixed port</p>\r\n      </div>\r\n      <div class=\"body\">\r\n        <div class=\"step\">\r\n          <h3>1) Replace your app</h3>\r\n          <p>Open your Codespace and replace <span class=\"inline\">app.py</span> with the code below.</p>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>2) Dependencies</h3>\r\n          <p>Ensure <span class=\"inline\">requirements.txt</span> contains at least:</p>\r\n<pre>streamlit\r\npandas\r\nnumpy</pre>\r\n        </div>\r\n        <div class=\"step\">\r\n          <h3>3) Install & run</h3>\r\n<pre>pip install -r requirements.txt\r\nstreamlit run app.py --server.address 0.0.0.0 --server.port 8000</pre>\r\n          <p>Then click <strong>Open in Browser</strong> (or use the Ports panel → port <strong>8000</strong>).</p>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- APP CODE (EXACT) -->\r\n    <section class=\"section-card\" id=\"code\">\r\n      <div class=\"banner\">\r\n        <small>Code</small>\r\n        <h1>app.py (Multi-Page — Exact Code)</h1>\r\n        <p>Paste this as-is into your repository’s app.py</p>\r\n      </div>\r\n      <div class=\"body\">\r\n<pre>import io\r\nfrom pathlib import Path\r\nfrom typing import Optional, Tuple, List\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\nimport streamlit as st\r\n\r\n# =========================\r\n# Page setup\r\n# =========================\r\nst.set_page_config(page_title=\"CSV Explorer\", page_icon=\"📈\", layout=\"centered\")\r\n\r\n# Defaults\r\nFALLBACK_PATH = Path(\"data\") / \"weather.csv\"\r\n\r\n\r\n# =========================\r\n# Cached loaders & helpers\r\n# =========================\r\n@st.cache_data(show_spinner=False)\r\ndef read_csv_from_bytes(content: bytes) -> Optional[pd.DataFrame]:\r\n    \"\"\"Read CSV from uploaded bytes; coerce obvious datetime columns.\"\"\"\r\n    try:\r\n        df = pd.read_csv(io.BytesIO(content))\r\n        df = coerce_common_datetime_cols(df)\r\n        return df\r\n    except Exception as e:\r\n        st.error(f\"Could not read uploaded CSV: {e}\")\r\n        return None\r\n\r\n\r\n@st.cache_data(show_spinner=False)\r\ndef read_csv_from_path(path_str: str) -> Optional[pd.DataFrame]:\r\n    \"\"\"Read CSV from local path; coerce obvious datetime columns.\"\"\"\r\n    try:\r\n        df = pd.read_csv(path_str)\r\n        df = coerce_common_datetime_cols(df)\r\n        return df\r\n    except Exception as e:\r\n        st.error(f\"Could not read CSV at {path_str}: {e}\")\r\n        return None\r\n\r\n\r\n@st.cache_data(show_spinner=False)\r\ndef demo_dataset() -> pd.DataFrame:\r\n    \"\"\"Synthetic time-series if no file is provided.\"\"\"\r\n    dates = pd.date_range(\"2024-01-01\", periods=180, freq=\"D\")\r\n    x = np.arange(len(dates))\r\n    return pd.DataFrame(\r\n        {\r\n            \"Date\": dates,\r\n            \"TempC\": 15 + 7 * np.sin(x / 10) + np.random.normal(0, 1.4, len(dates)),\r\n            \"Rain_mm\": np.clip(np.random.gamma(1.8, 1.0, len(dates)) - 1.0, 0, None),\r\n            \"Wind_kmh\": 12 + np.random.normal(0, 3, len(dates)),\r\n        }\r\n    )\r\n\r\n\r\ndef coerce_common_datetime_cols(df: pd.DataFrame) -> pd.DataFrame:\r\n    \"\"\"Coerce columns named like dates into datetime (nonfatal).\"\"\"\r\n    for col in df.columns:\r\n        name = str(col).lower()\r\n        if name in (\"date\", \"time\", \"timestamp\", \"datetime\"):\r\n            df[col] = pd.to_datetime(df[col], errors=\"coerce\")\r\n    return df\r\n\r\n\r\ndef find_datetime_columns(df: pd.DataFrame) -> List[str]:\r\n    return [c for c in df.columns if pd.api.types.is_datetime64_any_dtype(df[c])]\r\n\r\n\r\ndef numeric_columns(df: pd.DataFrame) -> List[str]:\r\n    return df.select_dtypes(include=\"number\").columns.tolist()\r\n\r\n\r\ndef filter_by_date(\r\n    df: pd.DataFrame, date_col: str\r\n) -> Tuple[pd.DataFrame, Optional[pd.Timestamp], Optional[pd.Timestamp]]:\r\n    dmin, dmax = df[date_col].min(), df[date_col].max()\r\n    if pd.isna(dmin) or pd.isna(dmax):\r\n        st.info(\"Date column contains invalid values; showing all rows.\")\r\n        return df, None, None\r\n    start, end = st.date_input(\r\n        \"Date range\",\r\n        value=(dmin.date(), dmax.date()),\r\n        min_value=dmin.date(),\r\n        max_value=dmax.date(),\r\n        key=\"date_range\",\r\n    )\r\n    if start and end:\r\n        mask = (df[date_col] >= pd.to_datetime(start)) & (df[date_col] <= pd.to_datetime(end))\r\n        return df.loc[mask].copy(), pd.to_datetime(start), pd.to_datetime(end)\r\n    return df, None, None\r\n\r\n\r\ndef resample_df(df: pd.DataFrame, date_col: str, cols: List[str], freq: Optional[str], how: str) -> pd.DataFrame:\r\n    if not freq:\r\n        return df.set_index(date_col)[cols].sort_index()\r\n    agg = \"mean\" if how == \"Mean\" else \"sum\"\r\n    return df.set_index(date_col)[cols].sort_index().resample(freq).agg(agg)\r\n\r\n\r\ndef apply_rolling(df: pd.DataFrame, window: int) -> pd.DataFrame:\r\n    return df.rolling(window, min_periods=1).mean() if window and window > 1 else df\r\n\r\n\r\ndef normalize_01(df: pd.DataFrame) -> pd.DataFrame:\r\n    def _scale(s: pd.Series) -> pd.Series:\r\n        mn, mx = s.min(), s.max()\r\n        return (s - mn) / (mx - mn) if pd.notna(mn) and pd.notna(mx) and mx != mn else s * 0\r\n    return df.apply(_scale, axis=0)\r\n\r\n\r\n# =========================\r\n# Sidebar: navigation & data source\r\n# =========================\r\nwith st.sidebar:\r\n    st.header(\"🔀 Navigation\")\r\n    page = st.radio(\"Go to\", [\"Home\", \"Visualization\", \"Data View\"], index=0)\r\n\r\n    st.header(\"🗂️ Data\")\r\n    uploaded = st.file_uploader(\"Upload CSV\", type=[\"csv\"])\r\n    source_label = \"\"\r\n\r\n    if uploaded is not None:\r\n        content = uploaded.read()  # bytes\r\n        df = read_csv_from_bytes(content)\r\n        source_label = \"Uploaded file\"\r\n    elif FALLBACK_PATH.exists():\r\n        df = read_csv_from_path(str(FALLBACK_PATH))\r\n        source_label = f\"{FALLBACK_PATH}\"\r\n    else:\r\n        st.info(\"No file uploaded and no local CSV found — using demo data.\")\r\n        df = demo_dataset()\r\n        source_label = \"Demo dataset\"\r\n\r\n    if df is None or df.empty:\r\n        st.error(\"No data to show.\")\r\n        st.stop()\r\n\r\n    st.caption(f\"**Source:** {source_label}  •  **Rows:** {len(df):,}  •  **Columns:** {len(df.columns)}\")\r\n\r\n    # Date column management\r\n    dt_cols = find_datetime_columns(df)\r\n    date_col: Optional[str] = None\r\n    if dt_cols:\r\n        date_col = st.selectbox(\"Date column\", dt_cols, index=0)\r\n    else:\r\n        st.warning(\"No datetime column detected.\")\r\n        try_col = st.selectbox(\"Try parsing a column as dates (optional)\", [\"<none>\"] + df.columns.tolist(), index=0)\r\n        if try_col != \"<none>\":\r\n            try:\r\n                df[try_col] = pd.to_datetime(df[try_col], errors=\"coerce\")\r\n                if df[try_col].notna().any():\r\n                    date_col = try_col\r\n                    st.success(f\"Parsed '{try_col}' as datetime.\")\r\n                else:\r\n                    st.error(f\"Parsing '{try_col}' produced all NaT.\")\r\n            except Exception as e:\r\n                st.error(f\"Failed to parse '{try_col}' as datetime: {e}\")\r\n\r\n    # Page-specific sidebar controls\r\n    if page == \"Visualization\":\r\n        st.header(\"📊 Chart Options\")\r\n        num_cols = numeric_columns(df)\r\n        if not num_cols:\r\n            st.warning(\"No numeric columns found.\")\r\n            selected_cols = []\r\n        else:\r\n            selected_cols = st.multiselect(\"Metrics to plot\", options=num_cols, default=num_cols[:1])\r\n\r\n        freq_choice = st.selectbox(\"Resample (if dated)\", options=[\"Off\", \"D (Daily)\", \"W (Weekly)\", \"M (Monthly)\"], index=0)\r\n        freq_map = {\"Off\": None, \"D (Daily)\": \"D\", \"W (Weekly)\": \"W\", \"M (Monthly)\": \"M\"}\r\n        agg = st.radio(\"Aggregation\", [\"Mean\", \"Sum\"], horizontal=True, index=0)\r\n\r\n        roll = st.slider(\"Rolling average window\", min_value=1, max_value=60, value=1, help=\"Applies after resampling.\")\r\n        norm = st.checkbox(\"Normalize each series to 0–1\", value=False)\r\n        chart_kind = st.selectbox(\"Chart type\", [\"Line\", \"Area\", \"Bar\"], index=0)\r\n\r\n    if page == \"Data View\":\r\n        st.header(\"🔎 Filter & View\")\r\n        # Quick text filter\r\n        quick_filter = st.text_input(\"Quick text filter (matches any column)\", value=\"\")\r\n        # Column selector\r\n        col_choices = st.multiselect(\"Columns to display (blank = all)\", options=df.columns.tolist(), default=[])\r\n\r\n        enable_edit = st.checkbox(\"Enable editing (local only)\", value=False)\r\n\r\n    # Cache tools\r\n    st.header(\"🧹 Maintenance\")\r\n    if st.button(\"Clear cache\"):\r\n        st.cache_data.clear()\r\n        st.success(\"Cache cleared. Rerun to reload data.\")\r\n\r\n\r\n# =========================\r\n# Page: Home\r\n# =========================\r\nif page == \"Home\":\r\n    st.title(\"🏠 Home\")\r\n    st.caption(\"Overview of your dataset and quick stats.\")\r\n\r\n    # KPIs\r\n    k1, k2, k3, k4 = st.columns(4)\r\n    k1.metric(\"Rows\", f\"{len(df):,}\")\r\n    k2.metric(\"Columns\", f\"{len(df.columns):,}\")\r\n    n_num = len(numeric_columns(df))\r\n    k3.metric(\"Numeric cols\", f\"{n_num:,}\")\r\n    if date_col:\r\n        dmin = pd.to_datetime(df[date_col].min())\r\n        dmax = pd.to_datetime(df[date_col].max())\r\n        k4.metric(\"Date span\", f\"{str(dmin.date()) if pd.notna(dmin) else '—'} → {str(dmax.date()) if pd.notna(dmax) else '—'}\")\r\n    else:\r\n        k4.metric(\"Date column\", \"Not set\")\r\n\r\n    st.subheader(\"Preview\")\r\n    st.dataframe(df.head(50), width=\"stretch\")\r\n\r\n    st.subheader(\"Schema\")\r\n    schema = pd.DataFrame(\r\n        {\r\n            \"dtype\": df.dtypes.astype(str),\r\n            \"non_null\": df.notna().sum(),\r\n            \"nulls\": df.isna().sum(),\r\n            \"unique\": df.nunique(dropna=True),\r\n        }\r\n    )\r\n    st.dataframe(schema, width=\"stretch\")\r\n\r\n    st.markdown(\r\n        \"\"\"\r\n**Tips**\r\n- Use the sidebar to switch pages.\r\n- If your dates weren’t auto-detected, choose a column to parse.\r\n- Upload a new CSV any time; the app will reload automatically.\r\n        \"\"\"\r\n    )\r\n\r\n\r\n# =========================\r\n# Page: Visualization\r\n# =========================\r\nelif page == \"Visualization\":\r\n    st.title(\"📊 Visualization\")\r\n\r\n    # Guardrails\r\n    num_cols_all = numeric_columns(df)\r\n    if not num_cols_all:\r\n        st.warning(\"No numeric columns found to plot. Upload a CSV with numeric data.\")\r\n        st.stop()\r\n\r\n    # Filter by date if available\r\n    df_view = df.copy()\r\n    has_dt = bool(date_col)\r\n    if has_dt:\r\n        st.subheader(\"Filter\")\r\n        df_view, start_ts, end_ts = filter_by_date(df_view, date_col)\r\n        if start_ts and end_ts:\r\n            st.success(f\"Showing {len(df_view):,} rows from {start_ts.date()} to {end_ts.date()}.\")\r\n        else:\r\n            st.info(f\"Showing all {len(df_view):,} rows.\")\r\n\r\n    # Chart config from sidebar (already defined)\r\n    selected_cols = locals().get(\"selected_cols\", num_cols_all[:1])\r\n    freq_choice = locals().get(\"freq_choice\", \"Off\")\r\n    freq_map = {\"Off\": None, \"D (Daily)\": \"D\", \"W (Weekly)\": \"W\", \"M (Monthly)\": \"M\"}\r\n    agg = locals().get(\"agg\", \"Mean\")\r\n    roll = int(locals().get(\"roll\", 1))\r\n    norm = bool(locals().get(\"norm\", False))\r\n    chart_kind = locals().get(\"chart_kind\", \"Line\")\r\n\r\n    if not selected_cols:\r\n        st.warning(\"Pick at least one metric in the sidebar to plot.\")\r\n        st.stop()\r\n\r\n    # Build series\r\n    if has_dt:\r\n        series_df = resample_df(df_view, date_col, selected_cols, freq_map[freq_choice], agg)\r\n    else:\r\n        series_df = df_view[selected_cols]\r\n\r\n    if series_df.empty:\r\n        st.warning(\"Nothing to plot with the current settings.\")\r\n        st.stop()\r\n\r\n    if roll > 1:\r\n        series_df = apply_rolling(series_df, roll)\r\n    if norm:\r\n        series_df = normalize_01(series_df)\r\n\r\n    # Render chart (let Streamlit auto-size to avoid Altair width schema issues)\r\n    st.subheader(\"Chart\")\r\n    if chart_kind == \"Line\":\r\n        st.line_chart(series_df)\r\n    elif chart_kind == \"Area\":\r\n        st.area_chart(series_df)\r\n    else:\r\n        st.bar_chart(series_df)\r\n\r\n    # Export chart data\r\n    st.subheader(\"Export chart data\")\r\n    csv_bytes = series_df.reset_index().to_csv(index=False).encode(\"utf-8\")\r\n    st.download_button(\r\n        \"Download chart data as CSV\",\r\n        data=csv_bytes,\r\n        file_name=\"chart_data.csv\",\r\n        mime=\"text/csv\",\r\n    )\r\n\r\n\r\n# =========================\r\n# Page: Data View\r\n# =========================\r\nelse:\r\n    st.title(\"🧾 Data View\")\r\n\r\n    df_view = df.copy()\r\n\r\n    # Date filter (if available)\r\n    if date_col:\r\n        st.subheader(\"Date Filter\")\r\n        df_view, start_ts, end_ts = filter_by_date(df_view, date_col)\r\n        if start_ts and end_ts:\r\n            st.success(f\"Rows from {start_ts.date()} to {end_ts.date()}: {len(df_view):,}\")\r\n\r\n    # Quick text filter across all columns\r\n    quick_filter = locals().get(\"quick_filter\", \"\")\r\n    if quick_filter:\r\n        q = quick_filter.strip().lower()\r\n        mask = df_view.astype(str).apply(lambda col: col.str.lower().str.contains(q, na=False))\r\n        df_view = df_view[mask.any(axis=1)]\r\n\r\n    # Column subset\r\n    col_choices = locals().get(\"col_choices\", [])\r\n    if col_choices:\r\n        missing = [c for c in col_choices if c not in df_view.columns]\r\n        if missing:\r\n            st.warning(f\"Some selected columns are missing: {missing}\")\r\n        else:\r\n            df_view = df_view[col_choices]\r\n\r\n    # Editable or read-only grid\r\n    enable_edit = bool(locals().get(\"enable_edit\", False))\r\n    st.subheader(\"Table\")\r\n    if enable_edit:\r\n        st.caption(\"Editing is local to this session. Use the download button to export your changes.\")\r\n        edited = st.data_editor(df_view, num_rows=\"dynamic\")\r\n        df_display = edited\r\n    else:\r\n        st.caption(\"Read-only view. Use the sidebar to filter and select columns.\")\r\n        st.dataframe(df_view, width=\"stretch\")\r\n        df_display = df_view\r\n\r\n    # Export\r\n    st.subheader(\"Export\")\r\n    out_bytes = df_display.to_csv(index=False).encode(\"utf-8\")\r\n    st.download_button(\r\n        \"Download current view as CSV\",\r\n        data=out_bytes,\r\n        file_name=\"data_view.csv\",\r\n        mime=\"text/csv\",\r\n    )\r\n\r\n    st.caption(\"Tip: Use the sidebar for quick text filtering and column selection.\")</pre>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- FOOTER -->\r\n    <div class=\"footer-note\">\r\n      © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n    </div>\r\n\r\n  </div>\r\n\r\n<script>\r\n  (function(){\r\n    const now = new Date();\r\n    document.getElementById('y').textContent = now.getFullYear();\r\n    document.getElementById('d').textContent = now.toLocaleDateString(\r\n      undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n    );\r\n  })();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "6361aec5-0347-49bd-8e66-107b6c4db009"
    }
  ]
}