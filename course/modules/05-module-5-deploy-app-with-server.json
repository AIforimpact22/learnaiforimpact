{
  "order": 5,
  "title": "Module 5: Deploy APP with Server",
  "lessons": [
    {
      "kind": "article",
      "order": 1,
      "title": "From a Local DB to an Online SQL Database",
      "content": {
        "body_md": "<section class=\"section-card\" id=\"preface-sql-online\">\r\n  <div class=\"banner\">\r\n    <small>Preface</small>\r\n    <h1>From a Local DB to an Online SQL Database</h1>\r\n    <p>Why deployed apps need a cloud database that’s available 24/7</p>\r\n  </div>\r\n  <div class=\"body\">\r\n    <p>You’ve already created a database locally on your own computer. That’s perfect for learning, prototyping, and quick experiments. \r\n    But the moment you deploy an app for teammates or customers, your data must be reachable <strong>anytime, from anywhere</strong>. \r\n    That’s where an <strong>online SQL database</strong> comes in: a managed, network‑accessible relational database with security, backups, and scaling built in.</p>\r\n\r\n    <h3>What is an SQL database?</h3>\r\n    <p>An SQL database stores information in <em>tables</em> (rows and columns) and enforces relationships through keys and constraints. \r\n    You use <strong>SQL</strong> (Structured Query Language) to read and modify data—JOIN tables, filter with WHERE, aggregate with GROUP BY, and keep integrity with PRIMARY/FOREIGN keys and CHECK/UNIQUE constraints.</p>\r\n\r\n    <h3>Local vs. Online — what changes?</h3>\r\n    <div class=\"grid\">\r\n      <div class=\"box\">\r\n        <h3>Local (on your PC)</h3>\r\n        <ul>\r\n          <li>Zero setup, fast iteration, no internet required.</li>\r\n          <li>Great for one‑person development and testing.</li>\r\n          <li>Limits: data lives on one machine; hard to share; manual backups; no true multi‑user concurrency across devices.</li>\r\n        </ul>\r\n      </div>\r\n      <div class=\"box\">\r\n        <h3>Online (cloud/hosted)</h3>\r\n        <ul>\r\n          <li>Accessible to your app and users from anywhere, 24/7.</li>\r\n          <li>Multi‑user concurrency, roles/permissions, automated backups, high availability.</li>\r\n          <li>Considerations: network/SSL, secret management, cost, and latency (choose a close region).</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n\r\n    <h3>Why your deployed app needs an online DB</h3>\r\n    <ul>\r\n      <li><strong>Always on:</strong> the database isn’t tied to your laptop being open.</li>\r\n      <li><strong>Shared state:</strong> all users see the same up‑to‑date data.</li>\r\n      <li><strong>Reliability:</strong> backups, point‑in‑time recovery, and failover options.</li>\r\n      <li><strong>Security:</strong> encrypted connections (SSL), passwords/roles, auditability.</li>\r\n      <li><strong>Scale:</strong> handle traffic spikes with pooling and right‑sized compute.</li>\r\n    </ul>\r\n\r\n    <h3>What changes in your app code?</h3>\r\n    <ul>\r\n      <li><strong>Connection string in secrets:</strong> store credentials in environment variables or a secrets file, not in code (e.g., <code class=\"inline\">postgresql://user:pass@host/db?sslmode=require</code>).</li>\r\n      <li><strong>Use SSL and pooling:</strong> production databases require SSL; web apps benefit from connection pooling.</li>\r\n      <li><strong>Migrations:</strong> apply schema changes via SQL scripts or a tool (e.g., Alembic). Prefer idempotent DDL (<code class=\"inline\">IF NOT EXISTS</code>).</li>\r\n      <li><strong>Environments:</strong> separate <em>dev / staging / prod</em> databases or branches to test safely.</li>\r\n      <li><strong>Resilience:</strong> add timeouts/retries for transient errors; keep writes transactional and idempotent where possible.</li>\r\n      <li><strong>Monitoring:</strong> log slow queries, watch error rates, and set health checks.</li>\r\n    </ul>\r\n\r\n    <h3>When to stay local vs go online</h3>\r\n    <ul>\r\n      <li><strong>Stay local</strong> for solo prototypes, classroom exercises, or offline demos.</li>\r\n      <li><strong>Go online</strong> before sharing with others, embedding in a public site, or relying on data that must be durable and always available.</li>\r\n    </ul>\r\n\r\n    <p><strong>Up next:</strong> we’ll provision a serverless Postgres database online (e.g., Neon), create at least one table, and connect your Streamlit app to it—so your data is live, durable, and accessible around the clock.</p>\r\n  </div>\r\n</section>"
      },
      "lesson_uid": "71ee2658-61c3-4896-887a-9d11959726b9"
    },
    {
      "kind": "article",
      "order": 2,
      "title": "Neon (Serverless Postgres) +Create Project & Table",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Neon • Setup: Create Project, Table, and Connection String (with Photos)</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Video container === */\r\n.video-container {\r\n  background: #ffffff;\r\n  border: 1px solid #EBEBEB;\r\n  border-radius: 14px;\r\n  overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04);\r\n  margin-bottom: 24px;\r\n  padding: 20px;\r\n}\r\n\r\n.video-container h2 {\r\n  margin: 0 0 16px;\r\n  font-size: 20px;\r\n  color: #000;\r\n  text-align: center;\r\n}\r\n\r\n.video-wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 0;\r\n  padding-bottom: 45.2%; /* 473/1047 aspect ratio */\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n}\r\n\r\n.video-wrapper iframe {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Layout helpers === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #f0f0f0; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- Video Tutorial -->\r\n  <div class=\"video-container\">\r\n    <h2>Video Tutorial: Neon Setup Walkthrough</h2>\r\n    <div class=\"video-wrapper\">\r\n      <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/1N3v7-DhgEI\" title=\"Neon (Serverless Postgres) +Create Project & Table\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Overview / Sign up -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Neon Setup</small>\r\n      <h1>Set up Neon: account, project, table, and connection string</h1>\r\n      <p>We'll create a Neon project, build a table in the SQL Editor, and copy the pooled connection string</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        <strong>Neon</strong> is a serverless PostgreSQL platform that provides fast startup, autoscaling, and a pooled\r\n        connection endpoint ideal for web apps. This page walks you through the initial setup.\r\n      </p>\r\n      <ul>\r\n        <li><strong>Official site:</strong> <a href=\"https://neon.tech\" target=\"_blank\" rel=\"noopener\">https://neon.tech</a></li>\r\n        <li><strong>Documentation:</strong> <a href=\"https://neon.tech/docs\" target=\"_blank\" rel=\"noopener\">https://neon.tech/docs</a></li>\r\n        <li><strong>Console (sign up / sign in):</strong> <a href=\"https://console.neon.tech\" target=\"_blank\" rel=\"noopener\">https://console.neon.tech</a></li>\r\n      </ul>\r\n      <p>\r\n        <strong>How to sign up:</strong> open the Neon Console and create an account (email or common OAuth providers). After verifying your\r\n        account, you'll land in the dashboard where you can create your first project.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- Step 1 -->\r\n  <section class=\"section-card\" id=\"step1\">\r\n    <div class=\"banner\">\r\n      <small>Step 1</small>\r\n      <h1>Create a Neon project</h1>\r\n      <p>Choose name, PostgreSQL version 17, cloud provider, and closest region</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li>In the Neon console, click <strong>Create project</strong>.</li>\r\n        <li>Set the following:\r\n          <ul>\r\n            <li><strong>Project name</strong>: any name (e.g., <em>attendance-demo</em>)</li>\r\n            <li><strong>PostgreSQL version</strong>: <strong>17</strong></li>\r\n            <li><strong>Cloud</strong>: <strong>AWS</strong></li>\r\n            <li><strong>Region</strong>: select the closest to your users</li>\r\n          </ul>\r\n        </li>\r\n        <li>Click <strong>Create</strong> to finish.</li>\r\n      </ol>\r\n\r\n      <!-- Create project screenshot -->\r\n      <a href=\"https://i.imgur.com/XqTD87X.png\" target=\"_blank\" rel=\"noopener\"\r\n         title=\"Open full-size • Create Neon project (name, Postgres 17, AWS, region)\">\r\n        <img src=\"https://i.imgur.com/XqTD87X.png\" alt=\"Create Neon project dialog with project name, PostgreSQL 17, AWS, region selection\" />\r\n      </a>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- Step 2 -->\r\n  <section class=\"section-card\" id=\"step2\">\r\n    <div class=\"banner\">\r\n      <small>Step 2</small>\r\n      <h1>Create a table in Neon (SQL Editor)</h1>\r\n      <p>Run DDL and seed rows so your app has data to show</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>Open <strong>SQL Editor</strong> → select your branch & database → paste and <strong>Run</strong> the following:</p>\r\n<pre>-- Optional: app schema\r\nCREATE SCHEMA IF NOT EXISTS app;\r\n\r\n-- Employees table\r\nCREATE TABLE IF NOT EXISTS app.employees (\r\n  employee_id TEXT PRIMARY KEY,\r\n  first_name  TEXT NOT NULL,\r\n  last_name   TEXT NOT NULL,\r\n  email       TEXT UNIQUE,\r\n  department  TEXT,\r\n  job_title   TEXT,\r\n  hire_date   DATE NOT NULL DEFAULT CURRENT_DATE,\r\n  status      TEXT NOT NULL CHECK (status IN ('active','inactive')),\r\n  created_at  TIMESTAMPTZ NOT NULL DEFAULT now()\r\n);\r\n\r\n-- Seed rows (safe to re-run)\r\nINSERT INTO app.employees (employee_id, first_name, last_name, email, department, job_title, status)\r\nVALUES\r\n  ('E1001','Mary','Kareem','[email protected]','Sales','Rep','active'),\r\n  ('E1002','John','Ali','[email protected]','Ops','Assistant','active')\r\nON CONFLICT (employee_id) DO NOTHING;</pre>\r\n\r\n      <!-- SQL Editor screenshot -->\r\n      <a href=\"https://i.imgur.com/2ITMuSe.png\" target=\"_blank\" rel=\"noopener\"\r\n         title=\"Open full-size • Run SQL in Neon SQL Editor\">\r\n        <img src=\"https://i.imgur.com/2ITMuSe.png\" alt=\"Neon SQL Editor showing CREATE TABLE and INSERT statements\" />\r\n      </a>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- Step 3 -->\r\n  <section class=\"section-card\" id=\"step3\">\r\n    <div class=\"banner\">\r\n      <small>Step 3</small>\r\n      <h1>Get your pooled connection string</h1>\r\n      <p>Use Overview → Connect and copy the URL with <code class=\"inline\">-pooler</code> in the hostname</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li>From your project, go to <strong>Overview → Connect</strong>.</li>\r\n        <li>Toggle <strong>Connection pooling</strong> ON (if not already), then copy the pooled connection string\r\n            (hostname contains <code class=\"inline\">-pooler</code>).</li>\r\n        <li>Keep all query parameters (e.g., <code class=\"inline\">sslmode=require</code>); Neon enforces SSL.</li>\r\n      </ol>\r\n\r\n      <!-- Overview / Connect / Connection String screenshot -->\r\n      <a href=\"https://i.imgur.com/vhHZGTz.png\" target=\"_blank\" rel=\"noopener\"\r\n         title=\"Open full-size • Overview → Connect → pooled connection string\">\r\n        <img src=\"https://i.imgur.com/vhHZGTz.png\" alt=\"Neon Overview/Connect page showing pooled connection string to copy\" />\r\n      </a>\r\n\r\n      <p style=\"margin-top:10px;\">\r\n        <strong>Why the pooled URL?</strong> Web UIs like Streamlit open many short‑lived connections. The pooled endpoint (PgBouncer)\r\n        absorbs this load and keeps your app responsive.\r\n      </p>\r\n      <p><strong>Next:</strong> proceed to the Streamlit page to add secrets, install dependencies, and build a simple app that reads and writes to <code class=\"inline\">app.employees</code>.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(undefined, {year:'numeric', month:'short', day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "1d052f9f-2fc2-44ed-aad3-589e82eaaa24"
    },
    {
      "kind": "article",
      "order": 3,
      "title": "Neon + Streamlit: Secrets, App, Run & Deploy",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Streamlit + Neon • Build & Run in GitHub Codespaces</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Video container === */\r\n.video-container {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  border-radius: 14px;\r\n  padding: 24px;\r\n  margin-bottom: 32px;\r\n  text-align: center;\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n}\r\n\r\n.video-container h2 {\r\n  color: #ffffff;\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n  margin: 0 0 16px 0;\r\n  text-shadow: 0 1px 2px rgba(0,0,0,0.2);\r\n}\r\n\r\n.video-wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 1047px;\r\n  margin: 0 auto;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  box-shadow: 0 8px 24px rgba(0,0,0,0.2);\r\n}\r\n\r\n.video-wrapper iframe {\r\n  width: 100%;\r\n  height: 473px;\r\n  border: none;\r\n  display: block;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .video-wrapper iframe {\r\n    height: 280px;\r\n  }\r\n}\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Code blocks === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- VIDEO SECTION -->\r\n  <div class=\"video-container\">\r\n    <div class=\"video-wrapper\">\r\n      <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/hT6fCAgSE08\" title=\"Neon + Streamlit: Secrets, App, Run & Deploy\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Streamlit Setup</small>\r\n      <h1>Build & Run Your Streamlit App (in GitHub Codespaces)</h1>\r\n      <p>Connect to Neon (serverless Postgres), show data, and insert rows</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>This page is self‑contained and starts from <strong>Step 1</strong>. You'll run Streamlit from a <strong>GitHub Codespace</strong>, connect to your Neon Postgres using a pooled connection string, and render a working UI.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 1 -->\r\n  <section class=\"section-card\" id=\"step1\">\r\n    <div class=\"banner\">\r\n      <small>Step 1</small>\r\n      <h1>Open Your GitHub Codespace</h1>\r\n      <p>We run Streamlit inside Codespaces so it can forward a web port</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li>Go to your GitHub repo → click <strong>Code</strong> → <strong>Codespaces</strong> → <strong>Create codespace</strong> (or open an existing one).</li>\r\n        <li>In the Codespace VS Code window, confirm you see your project files in the Explorer.</li>\r\n        <li>Ports will be auto‑forwarded when you run Streamlit; you'll open the forwarded URL in a browser.</li>\r\n      </ol>\r\n      <p><em>Tip:</em> The workspace path typically looks like <code class=\"inline\">/workspaces/<repo-name></code>.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 2 -->\r\n  <section class=\"section-card\" id=\"step2\">\r\n    <div class=\"banner\">\r\n      <small>Step 2</small>\r\n      <h1>Add Secrets (Neon Pooled Connection)</h1>\r\n      <p>Create <code class=\"inline\">.streamlit/secrets.toml</code> with your pooled URL</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li>In the Codespace, create a folder <code class=\"inline\">.streamlit</code> at the project root.</li>\r\n        <li>Create a file <code class=\"inline\">.streamlit/secrets.toml</code> and paste your Neon <strong>pooled</strong> SQLAlchemy URL (host contains <code class=\"inline\">-pooler</code>):</li>\r\n      </ol>\r\n<pre># .streamlit/secrets.toml\r\n[connections.neon]\r\n# Use your NEON pooled endpoint; keep sslmode=require\r\nurl = \"postgresql+psycopg2://USER:PASSWORD@ep-xxxx-pooler.REGION.neon.tech/DB?sslmode=require\"</pre>\r\n      <p><strong>Why pooled?</strong> PgBouncer handles many short‑lived web connections efficiently.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 3 -->\r\n  <section class=\"section-card\" id=\"step3\">\r\n    <div class=\"banner\">\r\n      <small>Step 3</small>\r\n      <h1>Install Dependencies</h1>\r\n      <p>Minimal requirements for Streamlit + Postgres</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li>Create <code class=\"inline\">requirements.txt</code> with:</li>\r\n      </ol>\r\n<pre>streamlit\r\nsqlalchemy\r\npsycopg2-binary</pre>\r\n      <ol start=\"2\">\r\n        <li>Install them:</li>\r\n      </ol>\r\n<pre>pip install -r requirements.txt</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 4 -->\r\n  <section class=\"section-card\" id=\"step4\">\r\n    <div class=\"banner\">\r\n      <small>Step 4</small>\r\n      <h1>Create the Streamlit App</h1>\r\n      <p>Copy/paste into <code class=\"inline\">streamlit_app.py</code></p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre>import streamlit as st\r\nfrom sqlalchemy import text\r\n\r\nst.set_page_config(page_title=\"Neon + Streamlit\", page_icon=\"🟢\", layout=\"centered\")\r\nst.title(\"Neon + Streamlit (Postgres)\")\r\nst.caption(\"Serverless Postgres on Neon, UI with Streamlit\")\r\n\r\n# 1) Connect via secrets (.streamlit/secrets.toml)\r\nconn = st.connection(\"neon\", type=\"sql\")\r\n\r\n# 2) Optional bootstrap — create schema/table if missing\r\n#    Safe to run behind a pooled connection for simple IF NOT EXISTS DDL\r\nwith conn.session as s:\r\n    s.execute(text(\"CREATE SCHEMA IF NOT EXISTS app\"))\r\n    s.execute(text(\"\"\"\r\n        CREATE TABLE IF NOT EXISTS app.employees (\r\n            employee_id TEXT PRIMARY KEY,\r\n            first_name  TEXT NOT NULL,\r\n            last_name   TEXT NOT NULL,\r\n            email       TEXT UNIQUE,\r\n            department  TEXT,\r\n            job_title   TEXT,\r\n            hire_date   DATE NOT NULL DEFAULT CURRENT_DATE,\r\n            status      TEXT NOT NULL CHECK (status IN ('active','inactive')),\r\n            created_at  TIMESTAMPTZ NOT NULL DEFAULT now()\r\n        )\r\n    \"\"\"))\r\n    s.commit()\r\n\r\n# 3) Insert form\r\nwith st.form(\"add_employee\"):\r\n    st.subheader(\"Add employee\")\r\n    eid   = st.text_input(\"Employee ID\", placeholder=\"E1003\")\r\n    first = st.text_input(\"First name\")\r\n    last  = st.text_input(\"Last name\")\r\n    email = st.text_input(\"Email (optional)\")\r\n    dept  = st.text_input(\"Department (optional)\")\r\n    title = st.text_input(\"Job title (optional)\")\r\n    status = st.selectbox(\"Status\", [\"active\", \"inactive\"], index=0)\r\n    if st.form_submit_button(\"Insert row\"):\r\n        if not (eid and first and last):\r\n            st.error(\"Employee ID, first name, and last name are required.\")\r\n        else:\r\n            try:\r\n                with conn.session as s:\r\n                    s.execute(\r\n                        text(\"\"\"INSERT INTO app.employees\r\n                                (employee_id, first_name, last_name, email, department, job_title, status)\r\n                                VALUES (:eid, :fn, :ln, :em, :dp, :jt, :st)\"\"\"),\r\n                        dict(eid=eid, fn=first, ln=last, em=email or None,\r\n                             dp=dept or None, jt=title or None, st=status)\r\n                    )\r\n                    s.commit()\r\n                st.success(f\"Inserted employee {eid}\")\r\n            except Exception as e:\r\n                st.error(f\"Insert failed: {e}\")\r\n\r\n# 4) Table view (cached)\r\nst.subheader(\"Employees\")\r\ndf = conn.query(\r\n    \"SELECT employee_id, first_name, last_name, email, department, job_title, status, created_at \"\r\n    \"FROM app.employees ORDER BY created_at DESC\",\r\n    ttl=\"5m\"\r\n)\r\nst.dataframe(df, use_container_width=True)\r\n\r\n# 5) Health check\r\nst.caption(\"DB time (server):\")\r\nst.write(conn.query(\"SELECT now() AS server_time\").iloc[0][\"server_time\"])</pre>\r\n      <p>The app connects via <code class=\"inline\">st.connection(\"neon\", type=\"sql\")</code>, bootstraps the table if missing, lets you insert a row, and shows the dataset.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 5 -->\r\n  <section class=\"section-card\" id=\"step5\">\r\n    <div class=\"banner\">\r\n      <small>Step 5</small>\r\n      <h1>Run Streamlit in Codespaces</h1>\r\n      <p>Forward a port and open in your browser</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li>From the Codespace terminal, run:</li>\r\n      </ol>\r\n<pre>streamlit run streamlit_app.py --server.address 0.0.0.0 --server.port 8000</pre>\r\n      <ol start=\"2\">\r\n        <li>Open the <strong>Ports</strong> panel in Codespaces (bottom or left), find port <strong>8000</strong>, and click the globe icon to open it in your browser.</li>\r\n      </ol>\r\n      <p><em>If prompted</em>, set the port to <strong>Public</strong> to share the link; otherwise keep it private.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- RESULT -->\r\n  <section class=\"section-card\" id=\"result\">\r\n    <div class=\"banner\">\r\n      <small>Result</small>\r\n      <h1>What You Should See</h1>\r\n      <p>Form to add an employee + live table view</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <a href=\"https://i.imgur.com/F93FuRl.png\" target=\"_blank\" rel=\"noopener\"\r\n         title=\"Open full-size • Streamlit app result\">\r\n        <img src=\"https://i.imgur.com/F93FuRl.png\" alt=\"Streamlit app showing insert form and employees table\" />\r\n      </a>\r\n      <p>Use the form to add a new employee, then confirm the row appears at the top of the table. The server time confirms your database connection is live.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- TROUBLESHOOTING -->\r\n  <section class=\"section-card\" id=\"tips\">\r\n    <div class=\"banner\">\r\n      <small>Help</small>\r\n      <h1>Troubleshooting & Tips</h1>\r\n      <p>Most issues are secrets, pooling, or ports</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>\"secrets not found\":</strong> Ensure the file is <code class=\"inline\">.streamlit/secrets.toml</code> (correct path) and the key is <code class=\"inline\">[connections.neon]</code> with a valid <code class=\"inline\">url</code>.</li>\r\n        <li><strong>\"connection refused/SSL\":</strong> Use the <strong>pooled</strong> Neon URL (host has <code class=\"inline\">-pooler</code>) and include <code class=\"inline\">sslmode=require</code>.</li>\r\n        <li><strong>Port not opening:</strong> Use the exact command above with <code class=\"inline\">--server.address 0.0.0.0</code> and check the <strong>Ports</strong> panel to open <strong>8000</strong>.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "8f472c68-88b6-47e2-8063-ee9226a9b0ac"
    },
    {
      "kind": "article",
      "order": 4,
      "title": "Add New Tables",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Neon + Streamlit • Add New Tables</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Code blocks (white on dark grey) === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- VIDEO EMBED -->\r\n  <section class=\"section-card\" id=\"video\">\r\n    <div class=\"body\" style=\"padding:0;\">\r\n      <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/6CR3rcTLwKw\" title=\"Extend Your App: Attendance Log (Neon + Streamlit)\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Add-On</small>\r\n      <h1>Extend Your App: Attendance Log (Neon + Streamlit)</h1>\r\n      <p>Assumes <code class=\"inline\">app.employees</code> already exists — we’ll only add and use <code class=\"inline\">app.attendance_log</code></p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        Got it. Here’s the <strong>clean add-on</strong> that keeps your existing employees table untouched. You’ll:\r\n      </p>\r\n      <ul>\r\n        <li><strong>Create</strong> a new table <code class=\"inline\">app.attendance_log</code> in Neon (with FK → <code class=\"inline\">app.employees</code>).</li>\r\n        <li><strong>Update</strong> your Streamlit app to read/write attendance (check-in/out, status/notes) without re-defining employees.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- 1) CREATE TABLE IN NEON -->\r\n  <section class=\"section-card\" id=\"neon\">\r\n    <div class=\"banner\">\r\n      <small>Step 1</small>\r\n      <h1>Create the new table in Neon (no employees duplication)</h1>\r\n      <p>Run in Neon → SQL Editor (or via <code class=\"inline\">psql</code>)</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>Use <strong>Neon → SQL Editor</strong> and run <em>only</em> this DDL/DML:</p>\r\n<pre>-- New table: attendance_log (references existing app.employees)\r\nCREATE TABLE IF NOT EXISTS app.attendance_log (\r\n  log_id         BIGSERIAL PRIMARY KEY,\r\n  employee_id    TEXT NOT NULL REFERENCES app.employees(employee_id)\r\n                   ON UPDATE CASCADE ON DELETE RESTRICT,\r\n  date           DATE NOT NULL,\r\n  check_in_time  TIMESTAMPTZ,\r\n  check_out_time TIMESTAMPTZ,\r\n  status         TEXT,   -- e.g., 'Present','Sick','Leave'\r\n  notes          TEXT,\r\n  CONSTRAINT attendance_unique_per_day UNIQUE (employee_id, date)\r\n);\r\n\r\n-- Helpful index for common filters\r\nCREATE INDEX IF NOT EXISTS idx_attendance_employee_date\r\n  ON app.attendance_log (employee_id, date);\r\n\r\n-- Optional: seed attendance for *today* for all current employees (safe to re-run)\r\nINSERT INTO app.attendance_log (employee_id, date, check_in_time, status)\r\nSELECT employee_id, CURRENT_DATE, now(), 'Present'\r\nFROM app.employees\r\nON CONFLICT (employee_id, date) DO NOTHING;</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- 2) UPDATE STREAMLIT APP -->\r\n  <section class=\"section-card\" id=\"app\">\r\n    <div class=\"banner\">\r\n      <small>Step 2</small>\r\n      <h1>Update your Streamlit app to use the new table</h1>\r\n      <p>No secrets change • No employees DDL repetition • Attendance only</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>No changes</strong> to your <code class=\"inline\">.streamlit/secrets.toml</code>.</li>\r\n        <li>The code below ensures <code class=\"inline\">app.attendance_log</code> exists and uses it; it <em>does not</em> recreate <code class=\"inline\">app.employees</code>.</li>\r\n      </ul>\r\n      <p><strong>Replace / extend</strong> your <code class=\"inline\">streamlit_app.py</code> with the section below (or add it as a new page if you’re using multipage apps):</p>\r\n      <!-- streamlit code here (unchanged) -->\r\n      ... (content unchanged for brevity) ...\r\n    </div>\r\n  </section>\r\n\r\n  <!-- 3) REUSABLE PATTERN -->\r\n  <section class=\"section-card\" id=\"pattern\">\r\n    <div class=\"banner\">\r\n      <small>Step 3</small>\r\n      <h1>Pattern you’ll reuse for more tables</h1>\r\n      <p>Scale your schema safely, one feature at a time</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li><strong>DDL in Neon:</strong> <code class=\"inline\">CREATE TABLE IF NOT EXISTS app.<new_table>(…)</code> with FKs to core keys (e.g., <code class=\"inline\">employee_id</code>) and indexes for your filters.</li>\r\n        <li><strong>Optional app bootstrap:</strong> repeat only the new table’s <code class=\"inline\">CREATE TABLE IF NOT EXISTS</code> in your app so fresh environments don’t break.</li>\r\n        <li><strong>Read/Write in Streamlit:</strong> <code class=\"inline\">conn.query(\"SELECT …\")</code> for reads; transactional writes via\r\n          <code class=\"inline\">with conn.session as s: s.execute(text(...), params); s.commit()</code>.</li>\r\n      </ol>\r\n      <p>This keeps your schema growing without touching the parts that already work.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "46942c75-e7c6-4429-9b26-49ed228fc161"
    },
    {
      "kind": "article",
      "order": 5,
      "title": "Deploying Streamlit • Make It a Public App",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Deploying Streamlit • Make It a Public App</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Code blocks (white on dark grey) === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Grid / boxes === */\r\n.grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 14px; }\r\n.box { border: 1px solid #EBEBEB; border-radius: 10px; background: #fff; padding: 14px; }\r\n.box h3 { margin: 0 0 8px; color: #000; font-size: 18px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- VIDEO EMBED -->\r\n  <section class=\"section-card\" id=\"video\" style=\"margin-bottom:24px;\">\r\n    <div class=\"body\" style=\"padding:0;\">\r\n      <iframe width=\"100%\" height=\"473\" src=\"https://www.youtube.com/embed/PZkSaPGL-h8\" title=\"Deploying Streamlit • Make It a Public App\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Deploy</small>\r\n      <h1>Deploying Streamlit & Making It Public</h1>\r\n      <p>Codespaces → GitHub → Streamlit Community Cloud</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>This guide takes your working Streamlit app and puts it online as a public app. You’ll keep secrets out of Git, push to GitHub, and deploy on Streamlit Community Cloud — then add the same secrets in the cloud UI.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 0: PREFLIGHT -->\r\n  <section class=\"section-card\" id=\"preflight\">\r\n    <div class=\"banner\">\r\n      <small>0)</small>\r\n      <h1>Preflight (in your Codespace)</h1>\r\n      <p>Keep secrets out of Git!</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>Make sure you have a local secrets file and it’s ignored:</p>\r\n<pre>mkdir -p .streamlit\r\nprintf \"[connections.neon]\\nurl = \\\"postgresql+psycopg2://USER:PASSWORD@ep-xxxx-pooler.REGION.neon.tech/DB?sslmode=require\\\"\\n\" > .streamlit/secrets.toml\r\necho \".streamlit/secrets.toml\" >> .gitignore</pre>\r\n      <p>You’ll paste the same block into Streamlit Cloud’s <strong>Secrets</strong> UI later. Streamlit recommends using <code class=\"inline\">secrets.toml</code> and never committing secrets.</p>\r\n\r\n      <div class=\"grid\" style=\"margin-top:12px;\">\r\n        <div class=\"box\">\r\n          <h3>requirements.txt (example)</h3>\r\n<pre>streamlit\r\nsqlalchemy\r\npsycopg2-binary</pre>\r\n          <p>If you already have a <code class=\"inline\">requirements.txt</code>, just ensure these are listed.</p>\r\n        </div>\r\n        <div class=\"box\">\r\n          <h3>Repo layout (example)</h3>\r\n<pre>learningexamples/\r\n├─ app.py                 # your Streamlit entry point\r\n├─ requirements.txt       # streamlit, sqlalchemy, psycopg2-binary\r\n├─ .gitignore             # must include .streamlit/secrets.toml\r\n└─ (other files as needed)</pre>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP 1: PUSH TO GITHUB -->\r\n  <section class=\"section-card\" id=\"push\">\r\n    <div class=\"banner\">\r\n      <small>1)</small>\r\n      <h1>Push to GitHub (from your Codespace terminal)</h1>\r\n      <p>Stage → Commit → Push → Verify</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre># From the repo root in Codespaces\r\ngit status\r\n\r\n# Stage new files + deletions\r\ngit add -A\r\n\r\n# Commit\r\ngit commit -m \"Streamlit app: add app.py + requirements; remove old main.py\"\r\n\r\n# Push\r\ngit push origin main\r\n\r\n# Verify\r\ngit status\r\ngit log --oneline -n 1</pre>\r\n      <p>After pushing, confirm your repo shows <code class=\"inline\">app.py</code>, <code class=\"inline\">requirements.txt</code>, and <code class=\"inline\">.gitignore</code> on GitHub. Your local <code class=\"inline\">.streamlit/secrets.toml</code> should NOT be in Git.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- STEP E: DEPLOY ON STREAMLIT CLOUD -->\r\n  <section class=\"section-card\" id=\"deploy\">\r\n    <div class=\"banner\">\r\n      <small>E)</small>\r\n      <h1>Deploy on Streamlit Community Cloud</h1>\r\n      <p>Create app → Add secrets → Restart → Verify</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ol>\r\n        <li><strong>Create app</strong>\r\n          <ul>\r\n            <li>Go to Streamlit Community Cloud → <strong>Create app</strong></li>\r\n            <li><strong>Select repo:</strong> <code class=\"inline\">AIforimpact22/learningexamples</code> (example)</li>\r\n            <li><strong>Branch:</strong> <code class=\"inline\">main</code></li>\r\n            <li><strong>Main file path:</strong> <code class=\"inline\">app.py</code></li>\r\n            <li>Click <strong>Deploy</strong></li>\r\n          </ul>\r\n        </li>\r\n        <li style=\"margin-top:8px;\"><strong>Add Secrets (required)</strong>\r\n          <ul>\r\n            <li>App page → <strong>⋯</strong> → <strong>Edit secrets</strong> → paste:</li>\r\n          </ul>\r\n<pre>[connections.neon]\r\nurl = \"postgresql+psycopg2://USER:PASSWORD@ep-xxxx-pooler.REGION.neon.tech/DB?sslmode=require\"</pre>\r\n          <ul>\r\n            <li><strong>Save</strong> and <strong>Restart</strong> the app.</li>\r\n          </ul>\r\n        </li>\r\n        <li style=\"margin-top:8px;\"><strong>Verify</strong>\r\n          <ul>\r\n            <li>Open the deployed URL.</li>\r\n            <li>The app should connect to Neon and show your pages.</li>\r\n          </ul>\r\n        </li>\r\n      </ol>\r\n\r\n      <div class=\"box\" style=\"margin-top:12px;\">\r\n        <h3>If something fails</h3>\r\n        <ul>\r\n          <li>Check <strong>View logs</strong> from the app menu.</li>\r\n          <li>Confirm the connection string is correct, includes <code class=\"inline\">sslmode=require</code>, and uses the pooled host (contains <code class=\"inline\">-pooler</code>).</li>\r\n          <li>Ensure your database objects are created (e.g., schema/table exist in Neon).</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "afef2680-4630-45ab-b140-5553d0ddb5f0"
    },
    {
      "kind": "article",
      "order": 6,
      "title": "Streamlit Access Gate • Password for Security",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Streamlit Access Gate • Password or Token via st.secrets</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Code blocks (white on dark grey) === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n/* Inline code chip — per your preference */\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n\r\n/* === Video embed === */\r\n.video-embed { margin: 20px 0 30px; border-radius: 12px; overflow: hidden; box-shadow: 0 2px 6px rgba(0,0,0,.15); }\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- VIDEO EMBED -->\r\n  <div class=\"video-embed\">\r\n    <iframe width=\"1047\" height=\"473\" src=\"https://www.youtube.com/embed/WuA0Dt33g3I\" title=\"Streamlit Access Gate • Password for Security\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n  </div>\r\n\r\n  <!-- INTRO -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Security • Minimal</small>\r\n      <h1>Simple Access Gate for Streamlit (No External Auth)</h1>\r\n      <p>Password or private token via <code class=\"inline\">st.secrets</code> — quick protection for your app</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        Add a lightweight gate so only users with a shared password or a private tokenized link can open your app.\r\n        No OAuth/SSO or external providers — just Streamlit and <code class=\"inline\">.streamlit/secrets.toml</code>.\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- 1) SECRETS -->\r\n  <section class=\"section-card\" id=\"secrets\">\r\n    <div class=\"banner\">\r\n      <small>Step 1</small>\r\n      <h1>Add minimal auth secrets (don’t commit these)</h1>\r\n      <p>Put secrets locally, then paste the same into Streamlit Cloud → <em>Edit secrets</em></p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>In your local <code class=\"inline\">.streamlit/secrets.toml</code> (and later in Streamlit Cloud’s Secrets), add <strong>one</strong> of these:</p>\r\n\r\n      <p><strong>Option A — Single password (easiest)</strong></p>\r\n<pre>[auth]\r\npassword = \"Set-A-Strong-Password-Here\"</pre>\r\n\r\n      <p><strong>Option B — Hashed password (no plaintext)</strong></p>\r\n<pre>[auth]\r\npassword_sha256 = \"PUT_SHA256_HEX_OF_YOUR_PASSWORD_HERE\"</pre>\r\n\r\n      <p>Generate the SHA-256 hash locally:</p>\r\n<pre>python - <<'PY'\r\nimport hashlib\r\nprint(hashlib.sha256(b\"Set-A-Strong-Password-Here\").hexdigest())\r\nPY</pre>\r\n\r\n      <p><strong>Optional — Private link tokens (for “magic links”)</strong></p>\r\n<pre>[auth]\r\ntokens = [\"my-very-secret-link-token-1\", \"another-token\"]</pre>\r\n\r\n      <p>Anyone who opens your app with <code class=\"inline\">?token=my-very-secret-link-token-1</code> is auto-signed-in.</p>\r\n\r\n      <p><strong>Keep secrets out of Git:</strong></p>\r\n<pre>echo \".streamlit/secrets.toml\" >> .gitignore</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- 2) APP CODE -->\r\n  <section class=\"section-card\" id=\"app\">\r\n    <div class=\"banner\">\r\n      <small>Step 2</small>\r\n      <h1>Drop-in secure version of your <code class=\"inline\">app.py</code></h1>\r\n      <p>Tiny login gate: query-token or password → session → show app</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <p>\r\n        Paste this over your current file (it keeps your attendance logic intact). The gate runs first; if the user is not\r\n        authenticated, they’ll see a sidebar login. On success, we store a flag in <code class=\"inline\">st.session_state</code>.\r\n      </p>\r\n<pre>import streamlit as st\r\nfrom sqlalchemy import text\r\nimport hashlib, hmac\r\n\r\nst.set_page_config(page_title=\"Neon + Streamlit • Attendance\", page_icon=\"🗄️\", layout=\"centered\")\r\n\r\n# ---------- Simple Access Gate (password or token) ----------\r\ndef _sha256(s: str) -> str:\r\n    return hashlib.sha256(s.encode(\"utf-8\")).hexdigest()\r\n\r\ndef _get_query_param(name: str):\r\n    # Works on both new & older Streamlit versions\r\n    try:\r\n        # Newer: st.query_params (Mapping)\r\n        qp = st.query_params  # may raise on older versions\r\n        val = qp.get(name, None)\r\n        if isinstance(val, list):  # just in case\r\n            return val[0] if val else None\r\n        return val\r\n    except Exception:\r\n        # Older: experimental_get_query_params()\r\n        val = st.experimental_get_query_params().get(name, [None])\r\n        return val[0] if isinstance(val, list) else val\r\n\r\ndef require_login() -> bool:\r\n    if st.session_state.get(\"_authed\"):\r\n        with st.sidebar:\r\n            st.success(\"Signed in\")\r\n            if st.button(\"Sign out\"):\r\n                st.session_state.clear()\r\n                st.rerun()\r\n        return True\r\n\r\n    secrets_auth = st.secrets.get(\"auth\", {})\r\n    # 1) Token via URL (?token=...)\r\n    token = _get_query_param(\"token\")\r\n    allowed_tokens = set()\r\n    if \"tokens\" in secrets_auth:\r\n        allowed_tokens = {str(x) for x in secrets_auth[\"tokens\"]}\r\n    elif \"token\" in secrets_auth:\r\n        allowed_tokens = {str(secrets_auth[\"token\"])}\r\n\r\n    if token and token in allowed_tokens:\r\n        st.session_state[\"_authed\"] = True\r\n        st.session_state[\"_method\"] = \"token\"\r\n        st.rerun()\r\n\r\n    # 2) Password in sidebar\r\n    with st.sidebar:\r\n        st.markdown(\"### Sign in\")\r\n        pw_input = st.text_input(\"Access password\", type=\"password\")\r\n        if st.button(\"Sign in\", use_container_width=True):\r\n            ok = False\r\n            if \"password_sha256\" in secrets_auth:\r\n                ok = hmac.compare_digest(_sha256(pw_input), secrets_auth[\"password_sha256\"])\r\n            elif \"password\" in secrets_auth:\r\n                ok = hmac.compare_digest(pw_input, secrets_auth[\"password\"])\r\n            if ok:\r\n                st.session_state[\"_authed\"] = True\r\n                st.session_state[\"_method\"] = \"password\"\r\n                st.toast(\"Signed in\")\r\n                st.rerun()\r\n            else:\r\n                st.error(\"Invalid password\")\r\n    st.info(\"Enter the access password to continue.\")\r\n    return False\r\n\r\n# Gate everything below\r\nif not require_login():\r\n    st.stop()\r\n\r\n# ---------- App content (unchanged except moved below the gate) ----------\r\nst.title(\"Employees + Attendance\")\r\nst.caption(\"Neon (Postgres) backend • Streamlit frontend\")\r\n\r\n# 1) Connect via secrets (you already set [connections.neon].url in secrets.toml)\r\nconn = st.connection(\"neon\", type=\"sql\")\r\n\r\n# 2) Bootstrap ONLY the new table (safe to run; does not touch app.employees)\r\nwith conn.session as s:\r\n    s.execute(text(\"\"\"\r\n        CREATE TABLE IF NOT EXISTS app.attendance_log (\r\n            log_id BIGSERIAL PRIMARY KEY,\r\n            employee_id TEXT NOT NULL REFERENCES app.employees(employee_id)\r\n                ON UPDATE CASCADE ON DELETE RESTRICT,\r\n            date DATE NOT NULL,\r\n            check_in_time TIMESTAMPTZ,\r\n            check_out_time TIMESTAMPTZ,\r\n            status TEXT,\r\n            notes TEXT,\r\n            CONSTRAINT attendance_unique_per_day UNIQUE (employee_id, date)\r\n        )\r\n    \"\"\"))\r\n    s.execute(text(\"\"\"\r\n        CREATE INDEX IF NOT EXISTS idx_attendance_employee_date\r\n        ON app.attendance_log (employee_id, date)\r\n    \"\"\"))\r\n    s.commit()\r\n\r\n# 3) Employees list (for UI selection) — reads existing table, no DDL\r\nemployees_df = conn.query(\"\"\"\r\n    SELECT employee_id, first_name, last_name\r\n    FROM app.employees\r\n    ORDER BY first_name, last_name\r\n\"\"\", ttl=\"2m\")\r\n\r\nst.subheader(\"Attendance (Today)\")\r\nif employees_df.empty:\r\n    st.info(\"No employees found. Add employees first, then return to this page.\")\r\nelse:\r\n    options = employees_df.apply(\r\n        lambda r: f\"{r['first_name']} {r['last_name']} ({r['employee_id']})\", axis=1\r\n    ).tolist()\r\n    choice = st.selectbox(\"Select employee\", options)\r\n    eid = employees_df.iloc[options.index(choice)][\"employee_id\"]\r\n\r\n    c1, c2, c3 = st.columns(3)\r\n\r\n    with c1:\r\n        if st.button(\"Check In\"):\r\n            try:\r\n                with conn.session as s:\r\n                    s.execute(text(\"\"\"\r\n                        INSERT INTO app.attendance_log (employee_id, date, check_in_time, status)\r\n                        VALUES (:eid, CURRENT_DATE, now(), 'Present')\r\n                        ON CONFLICT (employee_id, date)\r\n                        DO UPDATE SET check_in_time = COALESCE(app.attendance_log.check_in_time, EXCLUDED.check_in_time)\r\n                    \"\"\"), {\"eid\": eid})\r\n                    s.commit()\r\n                st.success(f\"{eid} checked in.\")\r\n            except Exception as e:\r\n                st.error(f\"Check-in failed: {e}\")\r\n\r\n    with c2:\r\n        if st.button(\"Check Out\"):\r\n            try:\r\n                with conn.session as s:\r\n                    res = s.execute(text(\"\"\"\r\n                        UPDATE app.attendance_log\r\n                           SET check_out_time = now()\r\n                         WHERE employee_id = :eid\r\n                           AND date = CURRENT_DATE\r\n                           AND check_out_time IS NULL\r\n                    \"\"\"), {\"eid\": eid})\r\n                    s.commit()\r\n                st.success(f\"{eid} checked out.\") if res.rowcount else st.warning(\"No open check-in for today.\")\r\n            except Exception as e:\r\n                st.error(f\"Check-out failed: {e}\")\r\n\r\n    with c3:\r\n        status_note = st.text_input(\"Optional status/notes (e.g., Sick, Leave)\")\r\n        if st.button(\"Set Status/Note\"):\r\n            try:\r\n                with conn.session as s:\r\n                    s.execute(text(\"\"\"\r\n                        INSERT INTO app.attendance_log (employee_id, date)\r\n                        VALUES (:eid, CURRENT_DATE)\r\n                        ON CONFLICT (employee_id, date) DO NOTHING\r\n                    \"\"\"), {\"eid\": eid})\r\n                    s.execute(text(\"\"\"\r\n                        UPDATE app.attendance_log\r\n                           SET status = :st, notes = :nt\r\n                         WHERE employee_id = :eid AND date = CURRENT_DATE\r\n                    \"\"\"), {\"st\": status_note or None, \"nt\": status_note or None, \"eid\": eid})\r\n                    s.commit()\r\n                st.success(\"Status/notes updated.\")\r\n            except Exception as e:\r\n                st.error(f\"Update failed: {e}\")\r\n\r\n# 4) Views\r\nst.subheader(\"Today’s attendance\")\r\ntoday_df = conn.query(\"\"\"\r\n    SELECT\r\n      al.date,\r\n      e.employee_id,\r\n      e.first_name,\r\n      e.last_name,\r\n      al.check_in_time,\r\n      al.check_out_time,\r\n      al.status,\r\n      al.notes\r\n    FROM app.attendance_log al\r\n    JOIN app.employees e ON e.employee_id = al.employee_id\r\n    WHERE al.date = CURRENT_DATE\r\n    ORDER BY e.first_name, e.last_name\r\n\"\"\", ttl=\"30s\")\r\nst.dataframe(today_df, use_container_width=True)\r\n\r\nst.subheader(\"Recent attendance (last 30 days)\")\r\nrecent_df = conn.query(\"\"\"\r\n    SELECT\r\n      al.date,\r\n      e.employee_id,\r\n      e.first_name,\r\n      e.last_name,\r\n      al.check_in_time,\r\n      al.check_out_time,\r\n      al.status\r\n    FROM app.attendance_log al\r\n    JOIN app.employees e ON e.employee_id = al.employee_id\r\n    WHERE al.date >= CURRENT_DATE - INTERVAL '30 days'\r\n    ORDER BY al.date DESC, e.first_name, e.last_name\r\n\"\"\", ttl=\"2m\")\r\nst.dataframe(recent_df, use_container_width=True)\r\n\r\n# 5) Health check\r\nst.caption(\"DB server time:\")\r\nst.write(conn.query(\"SELECT now() AS server_time;\").iloc[0][\"server_time\"])</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- 3) HOW TO USE -->\r\n  <section class=\"section-card\" id=\"howto\">\r\n    <div class=\"banner\">\r\n      <small>Step 3</small>\r\n      <h1>How to use it</h1>\r\n      <p>Password sign-in, magic links, and sign out</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li><strong>Password sign-in:</strong> open your app, enter the password in the sidebar, click <em>Sign in</em>.</li>\r\n        <li><strong>Magic link sign-in:</strong> share <code class=\"inline\">https://your-app.streamlit.app/?token=THE_TOKEN</code> with trusted users (when <code class=\"inline\">tokens=[...]</code> is set in secrets).</li>\r\n        <li><strong>Sign out:</strong> use the sidebar button.</li>\r\n      </ul>\r\n      <p>This approach is <strong>simple</strong> (no OAuth/SSO), <strong>private</strong> (secrets live in Streamlit Cloud’s Secrets), <strong>stateless</strong> (per-session), and <strong>flexible</strong> (password or token links). You can later upgrade to SSO as needed.</p>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- FOOTER -->\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(\r\n    undefined, {year:'numeric', month:'short', day:'2-digit'}\r\n  );\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "4a87b8ea-89f3-4ddd-bfdc-6d1005384dcd"
    },
    {
      "kind": "article",
      "order": 7,
      "title": "Full CRUD Operation",
      "content": {
        "body_md": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n<title>Employees (CRUD) + Attendance • Streamlit + Neon</title>\r\n\r\n<style>\r\n/* === Global resets === */\r\n* { box-sizing: border-box; word-wrap: break-word; overflow-wrap: break-word; }\r\nbody { font: 16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color: #555; margin: 0; background: #fff; }\r\nimg { max-width: 100%; height: auto; display: block; border-radius: 10px; }\r\n\r\n/* === Page wrap === */\r\n.wrap { max-width: 1080px; margin: 0 auto; padding: 18px; }\r\n\r\n/* === Video container === */\r\n.video-container {\r\n  margin-bottom: 24px;\r\n  background: #f8f9fa;\r\n  border: 1px solid #e9ecef;\r\n  border-radius: 14px;\r\n  padding: 20px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,.06);\r\n}\r\n\r\n.video-container h2 {\r\n  margin: 0 0 16px 0;\r\n  font-size: 24px;\r\n  color: #333;\r\n  text-align: center;\r\n  font-weight: 600;\r\n}\r\n\r\n.video-wrapper {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 0;\r\n  padding-bottom: 56.25%; /* 16:9 aspect ratio */\r\n  overflow: hidden;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 12px rgba(0,0,0,.15);\r\n}\r\n\r\n.video-wrapper iframe {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  border: none;\r\n}\r\n\r\n/* === Card container === */\r\n.section-card {\r\n  border: 1px solid #EBEBEB; border-radius: 14px; overflow: hidden;\r\n  box-shadow: 0 1px 2px rgba(0,0,0,.04); margin-bottom: 24px; background: #ffffff;\r\n}\r\n\r\n/* === Banner / header === */\r\n.section-card .banner {\r\n  background: linear-gradient(120deg, #555555, #000000);\r\n  color: #FFFFFF; padding: 18px 20px;\r\n}\r\n.section-card .banner small { font-size: 12px; letter-spacing: .08em; opacity: .9; text-transform: uppercase; color: #FFFFFF; }\r\n.section-card .banner h1 { margin: 6px 0 4px; font-size: 26px; line-height: 1.2; color: #FFFFFF; }\r\n.section-card .banner p { margin: 0; opacity: .95; color: #FFFFFF; }\r\n\r\n/* === Body === */\r\n.section-card .body { padding: 20px; }\r\n.section-card p, .section-card li { font-size: 16px; margin-top: 0; color: #555; }\r\nul { margin: 0; padding-left: 18px; }\r\nli + li { margin-top: 6px; }\r\n\r\n/* === Code blocks (white on dark grey) === */\r\npre {\r\n  background: #1e1e1e; color: #f3f3f3; padding: 14px; border-radius: 10px;\r\n  overflow-x: auto; font-family: Consolas, Monaco, ui-monospace, SFMono-Regular, Menlo, monospace; font-size: 14px;\r\n}\r\n/* Inline code chip — per your preference */\r\ncode.inline { background: #BDBDBD; padding: 2px 6px; border-radius: 4px; }\r\n\r\n/* === Footer === */\r\n.footer-note { font-size: 13px; color: #777; text-align: center; margin: 30px 0 10px; }\r\n\r\n/* === Responsive video === */\r\n@media (max-width: 768px) {\r\n  .video-container {\r\n    padding: 15px;\r\n  }\r\n  .video-container h2 {\r\n    font-size: 20px;\r\n  }\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n\r\n  <!-- VIDEO TUTORIAL SECTION -->\r\n  <div class=\"video-container\">\r\n    <div class=\"video-wrapper\">\r\n      <iframe src=\"https://www.youtube.com/embed/BFrKOEiwtMs\" title=\"Full CRUD Operation\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- INTRO + CRUD DEFINITION -->\r\n  <section class=\"section-card\" id=\"intro\">\r\n    <div class=\"banner\">\r\n      <small>Employees Management</small>\r\n      <h1>Simple CRUD for <code class=\"inline\">app.employees</code> (with Attendance)</h1>\r\n      <p>Secure Streamlit UI • Parameterized SQL • No schema duplication</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <h3 style=\"margin-top:0;\">What is CRUD?</h3>\r\n      <ul>\r\n        <li><strong>Create</strong> — add a new employee row to the database.</li>\r\n        <li><strong>Read</strong> — search and list employees (by ID, name, email).</li>\r\n        <li><strong>Update</strong> — edit fields for a selected employee.</li>\r\n        <li><strong>Delete</strong> — remove an employee (guarded by FK; fails if attendance exists).</li>\r\n      </ul>\r\n\r\n      <h3>What you'll get</h3>\r\n      <ul>\r\n        <li><strong>Attendance</strong> page (as you have).</li>\r\n        <li><strong>Employees (CRUD)</strong> page with Create · Search/List · Edit · Delete.</li>\r\n      </ul>\r\n\r\n      <h3>How to apply</h3>\r\n      <ol>\r\n        <li><strong>Replace</strong> your current <code class=\"inline\">app.py</code> with the code below.</li>\r\n        <li>Keep your existing <strong>secrets</strong> (Neon URL & simple auth) exactly as set earlier.</li>\r\n        <li>Run locally or push to GitHub → Streamlit Cloud redeploys, or click <em>Rerun</em> in the app.</li>\r\n      </ol>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- THE APP CODE -->\r\n  <section class=\"section-card\" id=\"code\">\r\n    <div class=\"banner\">\r\n      <small>Copy & Run</small>\r\n      <h1>Updated <code class=\"inline\">app.py</code> (Secured + Employees CRUD + Attendance)</h1>\r\n      <p>Safe, parameterized SQL • Minimal UX • Reuses your existing schema</p>\r\n    </div>\r\n    <div class=\"body\">\r\n<pre>import streamlit as st\r\nfrom sqlalchemy import text\r\nimport hashlib, hmac\r\nfrom datetime import date, datetime\r\n\r\n# -------------------- App & Security --------------------\r\nst.set_page_config(page_title=\"Neon + Streamlit • Employees & Attendance\", page_icon=\"🗄️\", layout=\"centered\")\r\n\r\ndef _sha256(s: str) -> str:\r\n    return hashlib.sha256(s.encode(\"utf-8\")).hexdigest()\r\n\r\ndef _get_query_param(name: str):\r\n    try:\r\n        qp = st.query_params\r\n        val = qp.get(name, None)\r\n        if isinstance(val, list):\r\n            return val[0] if val else None\r\n        return val\r\n    except Exception:\r\n        val = st.experimental_get_query_params().get(name, [None])\r\n        return val[0] if isinstance(val, list) else val\r\n\r\ndef require_login() -> bool:\r\n    if st.session_state.get(\"_authed\"):\r\n        with st.sidebar:\r\n            st.success(f\"Signed in ({st.session_state.get('_method','')})\")\r\n            if st.button(\"Sign out\", use_container_width=True):\r\n                st.session_state.clear()\r\n                st.rerun()\r\n        return True\r\n\r\n    secrets_auth = st.secrets.get(\"auth\", {})\r\n    # URL token (magic link): ?token=XXXX\r\n    token = _get_query_param(\"token\")\r\n    allowed_tokens = set()\r\n    if \"tokens\" in secrets_auth:\r\n        allowed_tokens = {str(x) for x in secrets_auth[\"tokens\"]}\r\n    elif \"token\" in secrets_auth:\r\n        allowed_tokens = {str(secrets_auth[\"token\"])}\r\n\r\n    if token and token in allowed_tokens:\r\n        st.session_state[\"_authed\"] = True\r\n        st.session_state[\"_method\"] = \"token\"\r\n        st.rerun()\r\n\r\n    with st.sidebar:\r\n        st.markdown(\"### Sign in\")\r\n        pw_input = st.text_input(\"Access password\", type=\"password\")\r\n        if st.button(\"Sign in\", use_container_width=True):\r\n            ok = False\r\n            if \"password_sha256\" in secrets_auth:\r\n                ok = hmac.compare_digest(_sha256(pw_input), secrets_auth[\"password_sha256\"])\r\n            elif \"password\" in secrets_auth:\r\n                ok = hmac.compare_digest(pw_input, secrets_auth[\"password\"])\r\n            if ok:\r\n                st.session_state[\"_authed\"] = True\r\n                st.session_state[\"_method\"] = \"password\"\r\n                st.toast(\"Signed in\")\r\n                st.rerun()\r\n            else:\r\n                st.error(\"Invalid password\")\r\n    st.info(\"Enter the access password to continue.\")\r\n    return False\r\n\r\nif not require_login():\r\n    st.stop()\r\n\r\nst.title(\"Employees + Attendance\")\r\nst.caption(\"Neon (Postgres) backend • Streamlit frontend\")\r\n\r\n# -------------------- DB Connection --------------------\r\n# Requires: .streamlit/secrets.toml with [connections.neon].url\r\nconn = st.connection(\"neon\", type=\"sql\")\r\n\r\n# Ensure ONLY the attendance table exists (we assume app.employees already exists)\r\nwith conn.session as s:\r\n    s.execute(text(\"\"\"\r\n        CREATE TABLE IF NOT EXISTS app.attendance_log (\r\n            log_id BIGSERIAL PRIMARY KEY,\r\n            employee_id TEXT NOT NULL REFERENCES app.employees(employee_id)\r\n                ON UPDATE CASCADE ON DELETE RESTRICT,\r\n            date DATE NOT NULL,\r\n            check_in_time TIMESTAMPTZ,\r\n            check_out_time TIMESTAMPTZ,\r\n            status TEXT,\r\n            notes TEXT,\r\n            CONSTRAINT attendance_unique_per_day UNIQUE (employee_id, date)\r\n        )\r\n    \"\"\"))\r\n    s.execute(text(\"\"\"\r\n        CREATE INDEX IF NOT EXISTS idx_attendance_employee_date\r\n        ON app.attendance_log (employee_id, date)\r\n    \"\"\"))\r\n    s.commit()\r\n\r\n# -------------------- Page Navigation --------------------\r\nwith st.sidebar:\r\n    page = st.radio(\"Pages\", [\"Attendance\", \"Employees (CRUD)\"], index=0)\r\n\r\n# -------------------- Employees: helpers --------------------\r\ndef list_employees(search: str | None):\r\n    q = \"\"\"\r\n        SELECT employee_id, first_name, last_name, email, department, job_title,\r\n               status, hire_date, created_at\r\n        FROM app.employees\r\n        {where}\r\n        ORDER BY created_at DESC\r\n        LIMIT 500\r\n    \"\"\"\r\n    if search:\r\n        like = f\"%{search.strip()}%\"\r\n        return conn.query(\r\n            q.format(where=\"WHERE employee_id ILIKE :q OR first_name ILIKE :q OR last_name ILIKE :q OR email ILIKE :q\"),\r\n            params={\"q\": like}, ttl=\"10s\"\r\n        )\r\n    else:\r\n        return conn.query(q.format(where=\"\"), ttl=\"10s\")\r\n\r\ndef get_employee(eid: str):\r\n    df = conn.query(\"\"\"\r\n        SELECT employee_id, first_name, last_name, email, department, job_title,\r\n               status, hire_date\r\n        FROM app.employees\r\n        WHERE employee_id = :eid\r\n        LIMIT 1\r\n    \"\"\", params={\"eid\": eid}, ttl=0)\r\n    return None if df.empty else df.iloc[0].to_dict()\r\n\r\ndef insert_employee(payload: dict):\r\n    with conn.session as s:\r\n        s.execute(text(\"\"\"\r\n            INSERT INTO app.employees (employee_id, first_name, last_name, email,\r\n                                       department, job_title, status, hire_date)\r\n            VALUES (:employee_id, :first_name, :last_name, :email,\r\n                    :department, :job_title, :status, :hire_date)\r\n        \"\"\"), payload)\r\n        s.commit()\r\n\r\ndef update_employee(eid: str, payload: dict):\r\n    with conn.session as s:\r\n        s.execute(text(\"\"\"\r\n            UPDATE app.employees\r\n               SET first_name = :first_name,\r\n                   last_name  = :last_name,\r\n                   email      = :email,\r\n                   department = :department,\r\n                   job_title  = :job_title,\r\n                   status     = :status,\r\n                   hire_date  = :hire_date\r\n             WHERE employee_id = :employee_id\r\n        \"\"\"), {**payload, \"employee_id\": eid})\r\n        s.commit()\r\n\r\ndef delete_employee(eid: str):\r\n    with conn.session as s:\r\n        s.execute(text(\"DELETE FROM app.employees WHERE employee_id = :eid\"), {\"eid\": eid})\r\n        s.commit()\r\n\r\ndef _to_date(val):\r\n    if isinstance(val, date):\r\n        return val\r\n    if isinstance(val, datetime):\r\n        return val.date()\r\n    if isinstance(val, str):\r\n        try:\r\n            return date.fromisoformat(val)\r\n        except Exception:\r\n            return date.today()\r\n    return date.today()\r\n\r\n# -------------------- Attendance Page --------------------\r\nif page == \"Attendance\":\r\n    # Load employees to drive attendance UI\r\n    employees_df = conn.query(\"\"\"\r\n        SELECT employee_id, first_name, last_name\r\n        FROM app.employees\r\n        ORDER BY first_name, last_name\r\n    \"\"\", ttl=\"2m\")\r\n\r\n    st.subheader(\"Attendance (Today)\")\r\n    if employees_df.empty:\r\n        st.info(\"No employees found. Add employees first, then return to this page.\")\r\n    else:\r\n        options = employees_df.apply(\r\n            lambda r: f\"{r['first_name']} {r['last_name']} ({r['employee_id']})\", axis=1\r\n        ).tolist()\r\n        choice = st.selectbox(\"Select employee\", options)\r\n        eid = employees_df.iloc[options.index(choice)][\"employee_id\"]\r\n\r\n        c1, c2, c3, c4 = st.columns(4)\r\n\r\n        with c1:\r\n            if st.button(\"Check In\", use_container_width=True):\r\n                try:\r\n                    with conn.session as s:\r\n                        s.execute(text(\"\"\"\r\n                            INSERT INTO app.attendance_log (employee_id, date, check_in_time, status)\r\n                            VALUES (:eid, CURRENT_DATE, now(), 'Present')\r\n                            ON CONFLICT (employee_id, date)\r\n                            DO UPDATE SET check_in_time = COALESCE(app.attendance_log.check_in_time, EXCLUDED.check_in_time)\r\n                        \"\"\"), {\"eid\": eid})\r\n                        s.commit()\r\n                    st.success(f\"{eid} checked in.\")\r\n                except Exception as e:\r\n                    st.error(f\"Check-in failed: {e}\")\r\n\r\n        with c2:\r\n            if st.button(\"Check Out\", use_container_width=True):\r\n                try:\r\n                    with conn.session as s:\r\n                        res = s.execute(text(\"\"\"\r\n                            UPDATE app.attendance_log\r\n                               SET check_out_time = now()\r\n                             WHERE employee_id = :eid\r\n                               AND date = CURRENT_DATE\r\n                               AND check_out_time IS NULL\r\n                        \"\"\"), {\"eid\": eid})\r\n                        s.commit()\r\n                    st.success(f\"{eid} checked out.\") if res.rowcount else st.warning(\"No open check-in for today.\")\r\n                except Exception as e:\r\n                    st.error(f\"Check-out failed: {e}\")\r\n\r\n        with c3:\r\n            status_note = st.text_input(\"Optional status/notes (e.g., Sick, Leave)\")\r\n            if st.button(\"Set Status/Note\", use_container_width=True):\r\n                try:\r\n                    with conn.session as s:\r\n                        s.execute(text(\"\"\"\r\n                            INSERT INTO app.attendance_log (employee_id, date)\r\n                            VALUES (:eid, CURRENT_DATE)\r\n                            ON CONFLICT (employee_id, date) DO NOTHING\r\n                        \"\"\"), {\"eid\": eid})\r\n                        s.execute(text(\"\"\"\r\n                            UPDATE app.attendance_log\r\n                               SET status = :st, notes = :nt\r\n                             WHERE employee_id = :eid AND date = CURRENT_DATE\r\n                        \"\"\"), {\"st\": status_note or None, \"nt\": status_note or None, \"eid\": eid})\r\n                        s.commit()\r\n                    st.success(\"Status/notes updated.\")\r\n                except Exception as e:\r\n                    st.error(f\"Update failed: {e}\")\r\n\r\n        with c4:\r\n            if st.button(\"Delete today's row\", use_container_width=True):\r\n                try:\r\n                    with conn.session as s:\r\n                        res = s.execute(text(\"\"\"\r\n                            DELETE FROM app.attendance_log\r\n                             WHERE employee_id = :eid AND date = CURRENT_DATE\r\n                        \"\"\"), {\"eid\": eid})\r\n                        s.commit()\r\n                    st.success(\"Deleted.\") if res.rowcount else st.info(\"No row to delete.\")\r\n                except Exception as e:\r\n                    st.error(f\"Delete failed: {e}\")\r\n\r\n    st.subheader(\"Today's attendance\")\r\n    today_df = conn.query(\"\"\"\r\n        SELECT\r\n          al.date,\r\n          e.employee_id,\r\n          e.first_name,\r\n          e.last_name,\r\n          al.check_in_time,\r\n          al.check_out_time,\r\n          al.status,\r\n          al.notes\r\n        FROM app.attendance_log al\r\n        JOIN app.employees e ON e.employee_id = al.employee_id\r\n        WHERE al.date = CURRENT_DATE\r\n        ORDER BY e.first_name, e.last_name\r\n    \"\"\", ttl=\"30s\")\r\n    st.dataframe(today_df, use_container_width=True)\r\n\r\n    st.subheader(\"Recent attendance (last 30 days)\")\r\n    recent_df = conn.query(\"\"\"\r\n        SELECT\r\n          al.date,\r\n          e.employee_id,\r\n          e.first_name,\r\n          e.last_name,\r\n          al.check_in_time,\r\n          al.check_out_time,\r\n          al.status\r\n        FROM app.attendance_log al\r\n        JOIN app.employees e ON e.employee_id = al.employee_id\r\n        WHERE al.date >= CURRENT_DATE - INTERVAL '30 days'\r\n        ORDER BY al.date DESC, e.first_name, e.last_name\r\n    \"\"\", ttl=\"2m\")\r\n    st.dataframe(recent_df, use_container_width=True)\r\n\r\n    st.caption(\"DB server time:\")\r\n    st.write(conn.query(\"SELECT now() AS server_time;\").iloc[0][\"server_time\"])\r\n\r\n# -------------------- Employees (CRUD) Page --------------------\r\nelse:\r\n    st.subheader(\"Employees (CRUD)\")\r\n\r\n    # -------- Create --------\r\n    with st.expander(\"➕ Create new employee\", expanded=False):\r\n        with st.form(\"create_emp\"):\r\n            col1, col2 = st.columns(2)\r\n            employee_id = col1.text_input(\"Employee ID\", placeholder=\"E1003\")\r\n            first_name  = col1.text_input(\"First name\")\r\n            last_name   = col2.text_input(\"Last name\")\r\n            email       = col2.text_input(\"Email (optional)\")\r\n            department  = col1.text_input(\"Department (optional)\")\r\n            job_title   = col2.text_input(\"Job title (optional)\")\r\n            status      = st.selectbox(\"Status\", [\"active\", \"inactive\"], index=0)\r\n            hire_dt     = st.date_input(\"Hire date\", value=date.today())\r\n            submit_new  = st.form_submit_button(\"Create employee\", use_container_width=True)\r\n\r\n            if submit_new:\r\n                if not (employee_id and first_name and last_name):\r\n                    st.error(\"Employee ID, First name, and Last name are required.\")\r\n                else:\r\n                    try:\r\n                        payload = dict(\r\n                            employee_id=employee_id,\r\n                            first_name=first_name,\r\n                            last_name=last_name,\r\n                            email=email or None,\r\n                            department=department or None,\r\n                            job_title=job_title or None,\r\n                            status=status,\r\n                            hire_date=hire_dt.isoformat()\r\n                        )\r\n                        insert_employee(payload)\r\n                        st.success(f\"Created {employee_id}\")\r\n                    except Exception as e:\r\n                        st.error(f\"Create failed: {e}\")\r\n\r\n    # -------- Read (search & list) --------\r\n    st.markdown(\"#### Search employees\")\r\n    q = st.text_input(\"Search by ID, name, or email\", placeholder=\"e.g., E1001 or Mary or mary@example.com\")\r\n    emp_list_df = list_employees(q)\r\n    st.dataframe(emp_list_df, use_container_width=True, height=300)\r\n\r\n    # -------- Update/Delete --------\r\n    st.markdown(\"#### Edit / Delete\")\r\n    if emp_list_df.empty:\r\n        st.info(\"No employees to edit. Adjust search or create a new employee above.\")\r\n    else:\r\n        opts = [f\"{r.employee_id} — {r.first_name} {r.last_name}\" for r in emp_list_df.itertuples(index=False)]\r\n        select = st.selectbox(\"Select employee to edit\", opts)\r\n        selected_id = select.split(\" — \", 1)[0]\r\n\r\n        rec = get_employee(selected_id)\r\n        if not rec:\r\n            st.warning(\"Selected employee not found. Refresh list.\")\r\n        else:\r\n            with st.form(\"edit_emp\"):\r\n                c1, c2 = st.columns(2)\r\n                first_name = c1.text_input(\"First name\", value=rec[\"first_name\"])\r\n                last_name  = c2.text_input(\"Last name\",  value=rec[\"last_name\"])\r\n                email      = c2.text_input(\"Email (optional)\", value=rec.get(\"email\") or \"\")\r\n                department = c1.text_input(\"Department (optional)\", value=rec.get(\"department\") or \"\")\r\n                job_title  = c2.text_input(\"Job title (optional)\", value=rec.get(\"job_title\") or \"\")\r\n                status     = st.selectbox(\"Status\", [\"active\", \"inactive\"], index=0 if rec[\"status\"]==\"active\" else 1)\r\n                hire_dt    = st.date_input(\"Hire date\", value=_to_date(rec.get(\"hire_date\")))\r\n                colu, cold = st.columns(2)\r\n                update_btn = colu.form_submit_button(\"💾 Update\", use_container_width=True)\r\n                delete_btn = cold.form_submit_button(\"🗑️ Delete\", use_container_width=True)\r\n\r\n                if update_btn:\r\n                    try:\r\n                        payload = dict(\r\n                            first_name=first_name,\r\n                            last_name=last_name,\r\n                            email=email or None,\r\n                            department=department or None,\r\n                            job_title=job_title or None,\r\n                            status=status,\r\n                            hire_date=hire_dt.isoformat()\r\n                        )\r\n                        update_employee(selected_id, payload)\r\n                        st.success(\"Updated successfully.\")\r\n                    except Exception as e:\r\n                        st.error(f\"Update failed: {e}\")\r\n\r\n                if delete_btn:\r\n                    st.warning(\"You are about to delete this employee. This will fail if attendance rows exist.\", icon=\"⚠️\")\r\n                    if st.checkbox(\"Yes, delete this employee permanently\"):\r\n                        try:\r\n                            delete_employee(selected_id)\r\n                            st.success(\"Deleted.\")\r\n                        except Exception as e:\r\n                            st.error(f\"Delete failed: {e}\")</pre>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- HOW TO USE -->\r\n  <section class=\"section-card\" id=\"howto\">\r\n    <div class=\"banner\">\r\n      <small>Run it</small>\r\n      <h1>How to use the CRUD</h1>\r\n      <p>One place to manage employees safely</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li>Open <strong>Employees (CRUD)</strong> from the sidebar.</li>\r\n        <li><strong>Create</strong>: expand \"➕ Create new employee\", fill the form, click <em>Create employee</em>.</li>\r\n        <li><strong>Read</strong>: use the search box (ID, name, email). Results appear in a table.</li>\r\n        <li><strong>Update</strong>: pick a row under \"Edit / Delete\", modify fields, click <em>Update</em>.</li>\r\n        <li><strong>Delete</strong>: choose the employee → <em>Delete</em> → confirm checkbox → delete.\r\n          <br/><em>Note:</em> If the employee has attendance rows, the DB will <strong>reject</strong> the delete (<code class=\"inline\">ON DELETE RESTRICT</code>) — this protects your data.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <!-- NOTES -->\r\n  <section class=\"section-card\" id=\"notes\">\r\n    <div class=\"banner\">\r\n      <small>Notes</small>\r\n      <h1>Implementation details</h1>\r\n      <p>Safe SQL • No schema duplication • Easy to extend</p>\r\n    </div>\r\n    <div class=\"body\">\r\n      <ul>\r\n        <li>All writes use <strong>parameterized SQL</strong> within transactions.</li>\r\n        <li>We <strong>do not</strong> recreate <code class=\"inline\">app.employees</code>; we only ensure <code class=\"inline\">app.attendance_log</code> exists.</li>\r\n        <li>Extend the pattern for new tables: add simple helpers (<em>list/get/insert/update/delete</em>) and forms.</li>\r\n      </ul>\r\n    </div>\r\n  </section>\r\n\r\n  <div class=\"footer-note\">\r\n    © <span id=\"y\"></span> Hawkar — Last updated <span id=\"d\"></span>\r\n  </div>\r\n</div>\r\n\r\n<script>\r\n(function(){\r\n  const now = new Date();\r\n  document.getElementById('y').textContent = now.getFullYear();\r\n  document.getElementById('d').textContent = now.toLocaleDateString(undefined, {year:'numeric', month:'short', day:'2-digit'});\r\n})();\r\n</script>\r\n</body>\r\n</html>"
      },
      "lesson_uid": "a23f75e0-7767-48b0-ab8c-360014242420"
    }
  ]
}